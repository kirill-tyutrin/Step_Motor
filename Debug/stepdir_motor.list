
stepdir_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b44  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005c58  08005c58  00015c58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d18  08005d18  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08005d18  08005d18  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d18  08005d18  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d18  08005d18  00015d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d1c  08005d1c  00015d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08005d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  20000084  08005da4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  08005da4  00020274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001137e  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002341  00000000  00000000  0003142b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00033770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f80  00000000  00000000  000347b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018824  00000000  00000000  00035730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012762  00000000  00000000  0004df54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091769  00000000  00000000  000606b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1e1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b7c  00000000  00000000  000f1e70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	08005c3c 	.word	0x08005c3c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	08005c3c 	.word	0x08005c3c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <delay>:

/****************** define the timer handler below  **************/
#define timer htim4

extern TIM_HandleTypeDef timer;
void delay(uint16_t us) {
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <delay+0x2c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us)
 80010c2:	bf00      	nop
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <delay+0x2c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3f9      	bcc.n	80010c4 <delay+0x14>
		;
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	200001b4 	.word	0x200001b4

080010e0 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd(char data, int rs) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, rs); // rs = 1 for data, rs=0 for command
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	2102      	movs	r1, #2
 80010f4:	4820      	ldr	r0, [pc, #128]	; (8001178 <send_to_lcd+0x98>)
 80010f6:	f002 f8a8 	bl	800324a <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(D7_GPIO_Port, D7_Pin, ((data >> 3) & 0x01));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	b2db      	uxtb	r3, r3
 8001106:	461a      	mov	r2, r3
 8001108:	2180      	movs	r1, #128	; 0x80
 800110a:	481b      	ldr	r0, [pc, #108]	; (8001178 <send_to_lcd+0x98>)
 800110c:	f002 f89d 	bl	800324a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, ((data >> 2) & 0x01));
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	2140      	movs	r1, #64	; 0x40
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <send_to_lcd+0x98>)
 8001122:	f002 f892 	bl	800324a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, ((data >> 1) & 0x01));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	085b      	lsrs	r3, r3, #1
 800112a:	b2db      	uxtb	r3, r3
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	b2db      	uxtb	r3, r3
 8001132:	461a      	mov	r2, r3
 8001134:	2120      	movs	r1, #32
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <send_to_lcd+0x98>)
 8001138:	f002 f887 	bl	800324a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, ((data >> 0) & 0x01));
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	461a      	mov	r2, r3
 8001146:	2110      	movs	r1, #16
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <send_to_lcd+0x98>)
 800114a:	f002 f87e 	bl	800324a <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1);
 800114e:	2201      	movs	r2, #1
 8001150:	2108      	movs	r1, #8
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <send_to_lcd+0x98>)
 8001154:	f002 f879 	bl	800324a <HAL_GPIO_WritePin>
	delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f7ff ffa9 	bl	80010b0 <delay>
	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2108      	movs	r1, #8
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <send_to_lcd+0x98>)
 8001164:	f002 f871 	bl	800324a <HAL_GPIO_WritePin>
	delay(10);
 8001168:	200a      	movs	r0, #10
 800116a:	f7ff ffa1 	bl	80010b0 <delay>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010800 	.word	0x40010800

0800117c <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send upper nibble first */
	datatosend = ((cmd >> 4) & 0x0f);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	091b      	lsrs	r3, r3, #4
 800118a:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);  // RS must be 0 while sending command
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ffa5 	bl	80010e0 <send_to_lcd>

	/* send Lower Nibble */
	datatosend = ((cmd) & 0x0f);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 030f 	and.w	r3, r3, #15
 800119c:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 0);
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff9c 	bl	80010e0 <send_to_lcd>

}
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <lcd_send_data>:

void lcd_send_data(char data) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data >> 4) & 0x0f);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	091b      	lsrs	r3, r3, #4
 80011be:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	2101      	movs	r1, #1
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff8b 	bl	80010e0 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data) & 0x0f);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	73fb      	strb	r3, [r7, #15]
	send_to_lcd(datatosend, 1);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	2101      	movs	r1, #1
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff82 	bl	80010e0 <send_to_lcd>

}
 80011dc:	bf00      	nop
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <lcd_clear>:

void lcd_clear(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f7ff ffc7 	bl	800117c <lcd_send_cmd>
	HAL_Delay(2);
 80011ee:	2002      	movs	r0, #2
 80011f0:	f001 fb4c 	bl	800288c <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lcd_put_cur>:

void lcd_put_cur(int row, int col) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	switch (row) {
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <lcd_put_cur+0x18>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d005      	beq.n	800121a <lcd_put_cur+0x22>
 800120e:	e009      	b.n	8001224 <lcd_put_cur+0x2c>
	case 0:
		col |= 0x80;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001216:	603b      	str	r3, [r7, #0]
		break;
 8001218:	e004      	b.n	8001224 <lcd_put_cur+0x2c>
	case 1:
		col |= 0xC0;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001220:	603b      	str	r3, [r7, #0]
		break;
 8001222:	bf00      	nop
	}

	lcd_send_cmd(col);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ffa7 	bl	800117c <lcd_send_cmd>
	HAL_Delay(10);
 800122e:	200a      	movs	r0, #10
 8001230:	f001 fb2c 	bl	800288c <HAL_Delay>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <lcd_init>:

void lcd_init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	HAL_Delay(100);  // wait for >40ms
 8001240:	2064      	movs	r0, #100	; 0x64
 8001242:	f001 fb23 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001246:	2030      	movs	r0, #48	; 0x30
 8001248:	f7ff ff98 	bl	800117c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800124c:	2005      	movs	r0, #5
 800124e:	f001 fb1d 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x30);
 8001252:	2030      	movs	r0, #48	; 0x30
 8001254:	f7ff ff92 	bl	800117c <lcd_send_cmd>
	HAL_Delay(2);  // wait for >100us
 8001258:	2002      	movs	r0, #2
 800125a:	f001 fb17 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x30);
 800125e:	2030      	movs	r0, #48	; 0x30
 8001260:	f7ff ff8c 	bl	800117c <lcd_send_cmd>
	HAL_Delay(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f001 fb11 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x20);  // 4bit mode
 800126a:	2020      	movs	r0, #32
 800126c:	f7ff ff86 	bl	800117c <lcd_send_cmd>
	HAL_Delay(100);
 8001270:	2064      	movs	r0, #100	; 0x64
 8001272:	f001 fb0b 	bl	800288c <HAL_Delay>

	// dislay initialisation
	lcd_send_cmd(0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001276:	2028      	movs	r0, #40	; 0x28
 8001278:	f7ff ff80 	bl	800117c <lcd_send_cmd>
	HAL_Delay(100);
 800127c:	2064      	movs	r0, #100	; 0x64
 800127e:	f001 fb05 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001282:	2008      	movs	r0, #8
 8001284:	f7ff ff7a 	bl	800117c <lcd_send_cmd>
	HAL_Delay(100);
 8001288:	2064      	movs	r0, #100	; 0x64
 800128a:	f001 faff 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x01);  // clear display
 800128e:	2001      	movs	r0, #1
 8001290:	f7ff ff74 	bl	800117c <lcd_send_cmd>
	HAL_Delay(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f001 faf9 	bl	800288c <HAL_Delay>
	HAL_Delay(100);
 800129a:	2064      	movs	r0, #100	; 0x64
 800129c:	f001 faf6 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80012a0:	2006      	movs	r0, #6
 80012a2:	f7ff ff6b 	bl	800117c <lcd_send_cmd>
	HAL_Delay(100);
 80012a6:	2064      	movs	r0, #100	; 0x64
 80012a8:	f001 faf0 	bl	800288c <HAL_Delay>
	lcd_send_cmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80012ac:	200c      	movs	r0, #12
 80012ae:	f7ff ff65 	bl	800117c <lcd_send_cmd>

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <lcd_send_string>:

void lcd_send_string(char *str) {
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	while (*str) {
 80012be:	e009      	b.n	80012d4 <lcd_send_string+0x1e>
		lcd_send_data(*str++);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff71 	bl	80011b0 <lcd_send_data>
		delay(50);
 80012ce:	2032      	movs	r0, #50	; 0x32
 80012d0:	f7ff feee 	bl	80010b0 <delay>
	while (*str) {
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f1      	bne.n	80012c0 <lcd_send_string+0xa>
	}
}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
	...

080012e8 <HAL_GPIO_EXTI_Callback>:
volatile uint8_t KN = 0;
volatile uint8_t flag_usk = 1;

volatile uint8_t flag_test = 0;
volatile uint8_t FLAG_CHANGE_DIR = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) { //Прерывание. Р
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == KN2_Pin) { // остановка или запуск двигателя
 80012f2:	88fb      	ldrh	r3, [r7, #6]
 80012f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012f8:	d10c      	bne.n	8001314 <HAL_GPIO_EXTI_Callback+0x2c>
		NVIC->ICER[1] = (1 << (EXTI15_10_IRQn & 0x1F));
 80012fa:	4b11      	ldr	r3, [pc, #68]	; (8001340 <HAL_GPIO_EXTI_Callback+0x58>)
 80012fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		time1 = HAL_GetTick();
 8001304:	f001 fab8 	bl	8002878 <HAL_GetTick>
 8001308:	4603      	mov	r3, r0
 800130a:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <HAL_GPIO_EXTI_Callback+0x5c>)
 800130c:	6013      	str	r3, [r2, #0]
		flag2 = 1;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_GPIO_EXTI_Callback+0x60>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
	}
	if (GPIO_Pin == KN1_Pin) {
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800131a:	d10c      	bne.n	8001336 <HAL_GPIO_EXTI_Callback+0x4e>
		NVIC->ICER[1] = (1 << (EXTI15_10_IRQn & 0x1F)); //абота в меню
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_GPIO_EXTI_Callback+0x58>)
 800131e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		time11 = HAL_GetTick();
 8001326:	f001 faa7 	bl	8002878 <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	4a07      	ldr	r2, [pc, #28]	; (800134c <HAL_GPIO_EXTI_Callback+0x64>)
 800132e:	6013      	str	r3, [r2, #0]
		flag1 = 1;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <HAL_GPIO_EXTI_Callback+0x68>)
 8001332:	2201      	movs	r2, #1
 8001334:	701a      	strb	r2, [r3, #0]

	}
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	e000e100 	.word	0xe000e100
 8001344:	20000004 	.word	0x20000004
 8001348:	20000001 	.word	0x20000001
 800134c:	20000008 	.word	0x20000008
 8001350:	20000000 	.word	0x20000000

08001354 <ext>:


void ext() { // Работа с прерываниями
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	if (flag1 && HAL_GetTick() - time11 > 400
 8001358:	4b49      	ldr	r3, [pc, #292]	; (8001480 <ext+0x12c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d060      	beq.n	8001424 <ext+0xd0>
 8001362:	f001 fa89 	bl	8002878 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	4b46      	ldr	r3, [pc, #280]	; (8001484 <ext+0x130>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001372:	d957      	bls.n	8001424 <ext+0xd0>
			&& HAL_GPIO_ReadPin(GPIOB, KN1_Pin) == 0) { //прерывание. установка курсора в меню
 8001374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001378:	4843      	ldr	r0, [pc, #268]	; (8001488 <ext+0x134>)
 800137a:	f001 ff4f 	bl	800321c <HAL_GPIO_ReadPin>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d14f      	bne.n	8001424 <ext+0xd0>
		Position_Cur++;
 8001384:	4b41      	ldr	r3, [pc, #260]	; (800148c <ext+0x138>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	b2db      	uxtb	r3, r3
 800138a:	3301      	adds	r3, #1
 800138c:	b2da      	uxtb	r2, r3
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <ext+0x138>)
 8001390:	701a      	strb	r2, [r3, #0]
		Position_Cur = Position_Cur % 3;
 8001392:	4b3e      	ldr	r3, [pc, #248]	; (800148c <ext+0x138>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b3d      	ldr	r3, [pc, #244]	; (8001490 <ext+0x13c>)
 800139a:	fba3 1302 	umull	r1, r3, r3, r2
 800139e:	0859      	lsrs	r1, r3, #1
 80013a0:	460b      	mov	r3, r1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	440b      	add	r3, r1
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b38      	ldr	r3, [pc, #224]	; (800148c <ext+0x138>)
 80013ac:	701a      	strb	r2, [r3, #0]
		flag1 = 0;
 80013ae:	4b34      	ldr	r3, [pc, #208]	; (8001480 <ext+0x12c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]

		if (Position_Cur == 1) {
 80013b4:	4b35      	ldr	r3, [pc, #212]	; (800148c <ext+0x138>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d10e      	bne.n	80013dc <ext+0x88>
			lcd_put_cur(0, 6);
 80013be:	2106      	movs	r1, #6
 80013c0:	2000      	movs	r0, #0
 80013c2:	f7ff ff19 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("  ");
 80013c6:	4833      	ldr	r0, [pc, #204]	; (8001494 <ext+0x140>)
 80013c8:	f7ff ff75 	bl	80012b6 <lcd_send_string>
			lcd_put_cur(1, 7);
 80013cc:	2107      	movs	r1, #7
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ff12 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("_");
 80013d4:	4830      	ldr	r0, [pc, #192]	; (8001498 <ext+0x144>)
 80013d6:	f7ff ff6e 	bl	80012b6 <lcd_send_string>
 80013da:	e01f      	b.n	800141c <ext+0xc8>
		} else if (Position_Cur == 0) {
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <ext+0x138>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10e      	bne.n	8001404 <ext+0xb0>
			lcd_put_cur(1, 7);
 80013e6:	2107      	movs	r1, #7
 80013e8:	2001      	movs	r0, #1
 80013ea:	f7ff ff05 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("  ");
 80013ee:	4829      	ldr	r0, [pc, #164]	; (8001494 <ext+0x140>)
 80013f0:	f7ff ff61 	bl	80012b6 <lcd_send_string>
			lcd_put_cur(0, 7);
 80013f4:	2107      	movs	r1, #7
 80013f6:	2000      	movs	r0, #0
 80013f8:	f7ff fefe 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("_");
 80013fc:	4826      	ldr	r0, [pc, #152]	; (8001498 <ext+0x144>)
 80013fe:	f7ff ff5a 	bl	80012b6 <lcd_send_string>
 8001402:	e00b      	b.n	800141c <ext+0xc8>
		}
		else if (Position_Cur == 2){
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <ext+0x138>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d106      	bne.n	800141c <ext+0xc8>
			lcd_put_cur(1, 7);
 800140e:	2107      	movs	r1, #7
 8001410:	2001      	movs	r0, #1
 8001412:	f7ff fef1 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("  ");
 8001416:	481f      	ldr	r0, [pc, #124]	; (8001494 <ext+0x140>)
 8001418:	f7ff ff4d 	bl	80012b6 <lcd_send_string>
		}
		NVIC->ISER[1] = (1 << (EXTI15_10_IRQn & 0x1F));
 800141c:	4b1f      	ldr	r3, [pc, #124]	; (800149c <ext+0x148>)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	605a      	str	r2, [r3, #4]

	}
	if (flag2 && HAL_GetTick() - time1 > 400 // прерывание. остановка или запуск двигателя
 8001424:	4b1e      	ldr	r3, [pc, #120]	; (80014a0 <ext+0x14c>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d026      	beq.n	800147c <ext+0x128>
 800142e:	f001 fa23 	bl	8002878 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <ext+0x150>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800143e:	d91d      	bls.n	800147c <ext+0x128>
	&& HAL_GPIO_ReadPin(GPIOB, KN2_Pin) == 0) {
 8001440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <ext+0x134>)
 8001446:	f001 fee9 	bl	800321c <HAL_GPIO_ReadPin>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d115      	bne.n	800147c <ext+0x128>
		STOP_MOTOR++;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <ext+0x154>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	3301      	adds	r3, #1
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <ext+0x154>)
 800145c:	701a      	strb	r2, [r3, #0]
		STOP_MOTOR = STOP_MOTOR % 2;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <ext+0x154>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	b2da      	uxtb	r2, r3
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <ext+0x154>)
 800146c:	701a      	strb	r2, [r3, #0]
		flag2 = 0;
 800146e:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <ext+0x14c>)
 8001470:	2200      	movs	r2, #0
 8001472:	701a      	strb	r2, [r3, #0]
		NVIC->ISER[1] = (1 << (EXTI15_10_IRQn & 0x1F));
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <ext+0x148>)
 8001476:	f44f 7280 	mov.w	r2, #256	; 0x100
 800147a:	605a      	str	r2, [r3, #4]
	}
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000000 	.word	0x20000000
 8001484:	20000008 	.word	0x20000008
 8001488:	40010c00 	.word	0x40010c00
 800148c:	20000244 	.word	0x20000244
 8001490:	aaaaaaab 	.word	0xaaaaaaab
 8001494:	08005c58 	.word	0x08005c58
 8001498:	08005c5c 	.word	0x08005c5c
 800149c:	e000e100 	.word	0xe000e100
 80014a0:	20000001 	.word	0x20000001
 80014a4:	20000004 	.word	0x20000004
 80014a8:	20000245 	.word	0x20000245

080014ac <MENU_SET.0>:
	HAL_Delay(100);
	HAL_GPIO_EXTI_Callback(KN1_Pin);
// ==============================================================================
	uint32_t enc_previous = 0;
	uint32_t time_of_delay = 0;
	void MENU_SET(uint8_t enc_pos, uint32_t Delay) {
 80014ac:	b590      	push	{r4, r7, lr}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	4664      	mov	r4, ip
 80014ba:	f8c7 c004 	str.w	ip, [r7, #4]

		if (enc_pos != enc_previous && HAL_GetTick() - time_of_delay >= Delay) {
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	68a2      	ldr	r2, [r4, #8]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	f000 80b4 	beq.w	8001630 <MENU_SET.0+0x184>
 80014c8:	f001 f9d6 	bl	8002878 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	f200 80ab 	bhi.w	8001630 <MENU_SET.0+0x184>
			switch (Position_Cur) {
 80014da:	4b57      	ldr	r3, [pc, #348]	; (8001638 <MENU_SET.0+0x18c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <MENU_SET.0+0x3e>
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d027      	beq.n	8001538 <MENU_SET.0+0x8c>
 80014e8:	e06a      	b.n	80015c0 <MENU_SET.0+0x114>
			case 0:
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 80014ea:	4b54      	ldr	r3, [pc, #336]	; (800163c <MENU_SET.0+0x190>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b10      	cmp	r3, #16
 80014f6:	d10f      	bne.n	8001518 <MENU_SET.0+0x6c>
					if (DIR != 1 && STOP_MOTOR == 1) FLAG_CHANGE_DIR = 1;
 80014f8:	4b51      	ldr	r3, [pc, #324]	; (8001640 <MENU_SET.0+0x194>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d007      	beq.n	8001510 <MENU_SET.0+0x64>
 8001500:	4b50      	ldr	r3, [pc, #320]	; (8001644 <MENU_SET.0+0x198>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <MENU_SET.0+0x64>
 800150a:	4b4f      	ldr	r3, [pc, #316]	; (8001648 <MENU_SET.0+0x19c>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
					DIR = 1;
 8001510:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <MENU_SET.0+0x194>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
				} else {
					if (DIR != 0 && STOP_MOTOR == 1) FLAG_CHANGE_DIR = 1;
					DIR = 0;
				}

				break;
 8001516:	e053      	b.n	80015c0 <MENU_SET.0+0x114>
					if (DIR != 0 && STOP_MOTOR == 1) FLAG_CHANGE_DIR = 1;
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <MENU_SET.0+0x194>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d007      	beq.n	8001530 <MENU_SET.0+0x84>
 8001520:	4b48      	ldr	r3, [pc, #288]	; (8001644 <MENU_SET.0+0x198>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <MENU_SET.0+0x84>
 800152a:	4b47      	ldr	r3, [pc, #284]	; (8001648 <MENU_SET.0+0x19c>)
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
					DIR = 0;
 8001530:	4b43      	ldr	r3, [pc, #268]	; (8001640 <MENU_SET.0+0x194>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
				break;
 8001536:	e043      	b.n	80015c0 <MENU_SET.0+0x114>

			case 1:
				if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <MENU_SET.0+0x190>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0310 	and.w	r3, r3, #16
 8001542:	2b10      	cmp	r3, #16
 8001544:	d120      	bne.n	8001588 <MENU_SET.0+0xdc>
					if (HAL_GPIO_ReadPin(GPIOB, ENC_KN_Pin) == GPIO_PIN_RESET) {
 8001546:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800154a:	4840      	ldr	r0, [pc, #256]	; (800164c <MENU_SET.0+0x1a0>)
 800154c:	f001 fe66 	bl	800321c <HAL_GPIO_ReadPin>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d107      	bne.n	8001566 <MENU_SET.0+0xba>
						SPEED_RPM = SPEED_RPM - 10;
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	3b0a      	subs	r3, #10
 800155a:	6023      	str	r3, [r4, #0]
						if (SPEED_RPM <= 0) {
 800155c:	6823      	ldr	r3, [r4, #0]
 800155e:	2b00      	cmp	r3, #0
 8001560:	dc01      	bgt.n	8001566 <MENU_SET.0+0xba>
							SPEED_RPM = 1;
 8001562:	2301      	movs	r3, #1
 8001564:	6023      	str	r3, [r4, #0]
						}

					}
					if (HAL_GPIO_ReadPin(GPIOB, ENC_KN_Pin) == GPIO_PIN_SET) {
 8001566:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800156a:	4838      	ldr	r0, [pc, #224]	; (800164c <MENU_SET.0+0x1a0>)
 800156c:	f001 fe56 	bl	800321c <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b01      	cmp	r3, #1
 8001574:	d11e      	bne.n	80015b4 <MENU_SET.0+0x108>
						SPEED_RPM = SPEED_RPM - 1;
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	6023      	str	r3, [r4, #0]
						if (SPEED_RPM <= 0) {
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	2b00      	cmp	r3, #0
 8001580:	dc18      	bgt.n	80015b4 <MENU_SET.0+0x108>
							SPEED_RPM = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	e015      	b.n	80015b4 <MENU_SET.0+0x108>
						}
					}

				} else {
					if (HAL_GPIO_ReadPin(GPIOB, ENC_KN_Pin) == GPIO_PIN_RESET) {
 8001588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158c:	482f      	ldr	r0, [pc, #188]	; (800164c <MENU_SET.0+0x1a0>)
 800158e:	f001 fe45 	bl	800321c <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d102      	bne.n	800159e <MENU_SET.0+0xf2>
						SPEED_RPM = SPEED_RPM + 10;
 8001598:	6823      	ldr	r3, [r4, #0]
 800159a:	330a      	adds	r3, #10
 800159c:	6023      	str	r3, [r4, #0]
					}
					if (HAL_GPIO_ReadPin(GPIOB, ENC_KN_Pin) == GPIO_PIN_SET) {
 800159e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a2:	482a      	ldr	r0, [pc, #168]	; (800164c <MENU_SET.0+0x1a0>)
 80015a4:	f001 fe3a 	bl	800321c <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d102      	bne.n	80015b4 <MENU_SET.0+0x108>
						SPEED_RPM = SPEED_RPM + 1;
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	3301      	adds	r3, #1
 80015b2:	6023      	str	r3, [r4, #0]
					}
				}
				if (SPEED_RPM >= 200) SPEED_RPM = 199;
 80015b4:	6823      	ldr	r3, [r4, #0]
 80015b6:	2bc7      	cmp	r3, #199	; 0xc7
 80015b8:	dd01      	ble.n	80015be <MENU_SET.0+0x112>
 80015ba:	23c7      	movs	r3, #199	; 0xc7
 80015bc:	6023      	str	r3, [r4, #0]
				break;
 80015be:	bf00      	nop
			}
			enc_previous = enc_pos;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
 80015c2:	60a3      	str	r3, [r4, #8]
			HAL_Delay(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f001 f961 	bl	800288c <HAL_Delay>
			if (Position_Cur == 0) {
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MENU_SET.0+0x18c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10e      	bne.n	80015f2 <MENU_SET.0+0x146>

				lcd_put_cur(0, 4);
 80015d4:	2104      	movs	r1, #4
 80015d6:	2000      	movs	r0, #0
 80015d8:	f7ff fe0e 	bl	80011f8 <lcd_put_cur>
				if (DIR == 0) {
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MENU_SET.0+0x194>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d103      	bne.n	80015ec <MENU_SET.0+0x140>
					lcd_send_string("CW ");
 80015e4:	481a      	ldr	r0, [pc, #104]	; (8001650 <MENU_SET.0+0x1a4>)
 80015e6:	f7ff fe66 	bl	80012b6 <lcd_send_string>
 80015ea:	e002      	b.n	80015f2 <MENU_SET.0+0x146>
				} else {
					lcd_send_string("CCW");
 80015ec:	4819      	ldr	r0, [pc, #100]	; (8001654 <MENU_SET.0+0x1a8>)
 80015ee:	f7ff fe62 	bl	80012b6 <lcd_send_string>
				}

			}

			if (Position_Cur == 1) {
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MENU_SET.0+0x18c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d115      	bne.n	8001628 <MENU_SET.0+0x17c>

				lcd_put_cur(1, 4);
 80015fc:	2104      	movs	r1, #4
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fdfa 	bl	80011f8 <lcd_put_cur>
				lcd_send_string("   ");
 8001604:	4814      	ldr	r0, [pc, #80]	; (8001658 <MENU_SET.0+0x1ac>)
 8001606:	f7ff fe56 	bl	80012b6 <lcd_send_string>
				lcd_put_cur(1, 4);
 800160a:	2104      	movs	r1, #4
 800160c:	2001      	movs	r0, #1
 800160e:	f7ff fdf3 	bl	80011f8 <lcd_put_cur>
				lcd_send_string(itoa(SPEED_RPM, buff, 10));
 8001612:	f104 010c 	add.w	r1, r4, #12
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	220a      	movs	r2, #10
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fbde 	bl	8004ddc <itoa>
 8001620:	4603      	mov	r3, r0
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fe47 	bl	80012b6 <lcd_send_string>
			}
			time_of_delay = HAL_GetTick();
 8001628:	f001 f926 	bl	8002878 <HAL_GetTick>
 800162c:	4603      	mov	r3, r0
 800162e:	6063      	str	r3, [r4, #4]
		}
	}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	bd90      	pop	{r4, r7, pc}
 8001638:	20000244 	.word	0x20000244
 800163c:	20000124 	.word	0x20000124
 8001640:	20000248 	.word	0x20000248
 8001644:	20000245 	.word	0x20000245
 8001648:	2000024d 	.word	0x2000024d
 800164c:	40010c00 	.word	0x40010c00
 8001650:	08005c60 	.word	0x08005c60
 8001654:	08005c64 	.word	0x08005c64
 8001658:	08005c68 	.word	0x08005c68

0800165c <main>:
int main(void) {
 800165c:	b580      	push	{r7, lr}
 800165e:	b090      	sub	sp, #64	; 0x40
 8001660:	af02      	add	r7, sp, #8
 8001662:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_Init();
 8001668:	f001 f8ae 	bl	80027c8 <HAL_Init>
	SystemClock_Config();
 800166c:	f000 f90a 	bl	8001884 <SystemClock_Config>
	MX_GPIO_Init();
 8001670:	f000 fb18 	bl	8001ca4 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001674:	f000 f964 	bl	8001940 <MX_ADC1_Init>
	MX_I2C1_Init();
 8001678:	f000 f9a0 	bl	80019bc <MX_I2C1_Init>
	MX_TIM3_Init();
 800167c:	f000 fa24 	bl	8001ac8 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8001680:	f000 fae6 	bl	8001c50 <MX_USART1_UART_Init>
	MX_TIM4_Init();
 8001684:	f000 fa96 	bl	8001bb4 <MX_TIM4_Init>
	MX_TIM1_Init();
 8001688:	f000 f9c6 	bl	8001a18 <MX_TIM1_Init>
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800168c:	213c      	movs	r1, #60	; 0x3c
 800168e:	486b      	ldr	r0, [pc, #428]	; (800183c <main+0x1e0>)
 8001690:	f002 fdd0 	bl	8004234 <HAL_TIM_Encoder_Start>
	HAL_GPIO_WritePin(GPIOA, LCD_LED_Pin, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	2101      	movs	r1, #1
 8001698:	4869      	ldr	r0, [pc, #420]	; (8001840 <main+0x1e4>)
 800169a:	f001 fdd6 	bl	800324a <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim4);
 800169e:	4869      	ldr	r0, [pc, #420]	; (8001844 <main+0x1e8>)
 80016a0:	f002 fc84 	bl	8003fac <HAL_TIM_Base_Start>
	lcd_init();
 80016a4:	f7ff fdca 	bl	800123c <lcd_init>
	HAL_Delay(100);
 80016a8:	2064      	movs	r0, #100	; 0x64
 80016aa:	f001 f8ef 	bl	800288c <HAL_Delay>
	lcd_put_cur(0, 0);
 80016ae:	2100      	movs	r1, #0
 80016b0:	2000      	movs	r0, #0
 80016b2:	f7ff fda1 	bl	80011f8 <lcd_put_cur>
	HAL_Delay(100);
 80016b6:	2064      	movs	r0, #100	; 0x64
 80016b8:	f001 f8e8 	bl	800288c <HAL_Delay>
	HAL_Delay(1000);
 80016bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c0:	f001 f8e4 	bl	800288c <HAL_Delay>
	lcd_send_string("HELLO");
 80016c4:	4860      	ldr	r0, [pc, #384]	; (8001848 <main+0x1ec>)
 80016c6:	f7ff fdf6 	bl	80012b6 <lcd_send_string>
	HAL_Delay(1000);
 80016ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ce:	f001 f8dd 	bl	800288c <HAL_Delay>
	lcd_clear();
 80016d2:	f7ff fd87 	bl	80011e4 <lcd_clear>
	TIM1->ARR = 5000;
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <main+0x1f0>)
 80016d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
	int32_t SPEED_RPM = 10; //Скорость вращения двигателя в оборотах в минуту
 80016de:	230a      	movs	r3, #10
 80016e0:	607b      	str	r3, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80016e2:	4b56      	ldr	r3, [pc, #344]	; (800183c <main+0x1e0>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
	Init_Pins(GPIOB, ENA_Pin, GPIOA, STP_Pin, GPIOA, DIR_Pin); // Инициализация пинов
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	4b53      	ldr	r3, [pc, #332]	; (8001840 <main+0x1e4>)
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <main+0x1e4>)
 80016fa:	2108      	movs	r1, #8
 80016fc:	4854      	ldr	r0, [pc, #336]	; (8001850 <main+0x1f4>)
 80016fe:	f000 fba5 	bl	8001e4c <Init_Pins>
	lcd_send_cmd(0b00001100);
 8001702:	200c      	movs	r0, #12
 8001704:	f7ff fd3a 	bl	800117c <lcd_send_cmd>
	HAL_Delay(10);
 8001708:	200a      	movs	r0, #10
 800170a:	f001 f8bf 	bl	800288c <HAL_Delay>
	lcd_put_cur(0, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fd71 	bl	80011f8 <lcd_put_cur>
	DIR = 0;
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <main+0x1f8>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
	lcd_send_string("DIR:"); //направление
 800171c:	484e      	ldr	r0, [pc, #312]	; (8001858 <main+0x1fc>)
 800171e:	f7ff fdca 	bl	80012b6 <lcd_send_string>
	if (DIR == 1) {
 8001722:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <main+0x1f8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d103      	bne.n	8001732 <main+0xd6>
		lcd_send_string("CCW");
 800172a:	484c      	ldr	r0, [pc, #304]	; (800185c <main+0x200>)
 800172c:	f7ff fdc3 	bl	80012b6 <lcd_send_string>
 8001730:	e002      	b.n	8001738 <main+0xdc>
		lcd_send_string("CW ");
 8001732:	484b      	ldr	r0, [pc, #300]	; (8001860 <main+0x204>)
 8001734:	f7ff fdbf 	bl	80012b6 <lcd_send_string>
	HAL_Delay(5);
 8001738:	2005      	movs	r0, #5
 800173a:	f001 f8a7 	bl	800288c <HAL_Delay>
	lcd_put_cur(1, 0);
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff fd59 	bl	80011f8 <lcd_put_cur>
	lcd_send_string("RPM:");
 8001746:	4847      	ldr	r0, [pc, #284]	; (8001864 <main+0x208>)
 8001748:	f7ff fdb5 	bl	80012b6 <lcd_send_string>
	HAL_Delay(10);
 800174c:	200a      	movs	r0, #10
 800174e:	f001 f89d 	bl	800288c <HAL_Delay>
	lcd_send_string(itoa(SPEED_RPM, buff, 10));
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	330c      	adds	r3, #12
 8001758:	220a      	movs	r2, #10
 800175a:	4619      	mov	r1, r3
 800175c:	f003 fb3e 	bl	8004ddc <itoa>
 8001760:	4603      	mov	r3, r0
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fda7 	bl	80012b6 <lcd_send_string>
	lcd_put_cur(0, 7);
 8001768:	2107      	movs	r1, #7
 800176a:	2000      	movs	r0, #0
 800176c:	f7ff fd44 	bl	80011f8 <lcd_put_cur>
	lcd_send_string("_");
 8001770:	483d      	ldr	r0, [pc, #244]	; (8001868 <main+0x20c>)
 8001772:	f7ff fda0 	bl	80012b6 <lcd_send_string>
	HAL_Delay(100);
 8001776:	2064      	movs	r0, #100	; 0x64
 8001778:	f001 f888 	bl	800288c <HAL_Delay>
	HAL_GPIO_EXTI_Callback(KN1_Pin);
 800177c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001780:	f7ff fdb2 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
	uint32_t enc_previous = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	60fb      	str	r3, [r7, #12]
	uint32_t time_of_delay = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		if (STOP_MOTOR == 0) { //РАБОТА В МЕНЮ
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <main+0x210>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d119      	bne.n	80017ca <main+0x16e>

// ==================================================================
			ext();
 8001796:	f7ff fddd 	bl	8001354 <ext>
			lcd_put_cur(1, 9);
 800179a:	2109      	movs	r1, #9
 800179c:	2001      	movs	r0, #1
 800179e:	f7ff fd2b 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("    ");
 80017a2:	4833      	ldr	r0, [pc, #204]	; (8001870 <main+0x214>)
 80017a4:	f7ff fd87 	bl	80012b6 <lcd_send_string>
			lcd_put_cur(1, 9);
 80017a8:	2109      	movs	r1, #9
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fd24 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("OFF");
 80017b0:	4830      	ldr	r0, [pc, #192]	; (8001874 <main+0x218>)
 80017b2:	f7ff fd80 	bl	80012b6 <lcd_send_string>
			MENU_SET(TIM1->CNT / 2, 0);
 80017b6:	4b25      	ldr	r3, [pc, #148]	; (800184c <main+0x1f0>)
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	085b      	lsrs	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	1d3a      	adds	r2, r7, #4
 80017c0:	4694      	mov	ip, r2
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fe71 	bl	80014ac <MENU_SET.0>


		}
		if (STOP_MOTOR == 1) {
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <main+0x210>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d1db      	bne.n	800178c <main+0x130>
			lcd_put_cur(1, 9);
 80017d4:	2109      	movs	r1, #9
 80017d6:	2001      	movs	r0, #1
 80017d8:	f7ff fd0e 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("    ");
 80017dc:	4824      	ldr	r0, [pc, #144]	; (8001870 <main+0x214>)
 80017de:	f7ff fd6a 	bl	80012b6 <lcd_send_string>
			HAL_Delay(100);
 80017e2:	2064      	movs	r0, #100	; 0x64
 80017e4:	f001 f852 	bl	800288c <HAL_Delay>
			lcd_put_cur(1, 9);
 80017e8:	2109      	movs	r1, #9
 80017ea:	2001      	movs	r0, #1
 80017ec:	f7ff fd04 	bl	80011f8 <lcd_put_cur>
			lcd_send_string("ON");
 80017f0:	4821      	ldr	r0, [pc, #132]	; (8001878 <main+0x21c>)
 80017f2:	f7ff fd60 	bl	80012b6 <lcd_send_string>
			flag_usk = 1;
 80017f6:	4b21      	ldr	r3, [pc, #132]	; (800187c <main+0x220>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	701a      	strb	r2, [r3, #0]
			while (1) {

				MENU_SET(TIM1->CNT / 2, 300);
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <main+0x1f0>)
 80017fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001800:	085b      	lsrs	r3, r3, #1
 8001802:	b2db      	uxtb	r3, r3
 8001804:	1d3a      	adds	r2, r7, #4
 8001806:	4694      	mov	ip, r2
 8001808:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe4d 	bl	80014ac <MENU_SET.0>
				Motor_On();
 8001812:	f000 fbb9 	bl	8001f88 <Motor_On>
//				MOTOR_Direction(DIR);
				Speed(SPEED_RPM);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	f000 fb45 	bl	8001ea8 <Speed>
				ext();
 800181e:	f7ff fd99 	bl	8001354 <ext>
				Steps(10);
 8001822:	200a      	movs	r0, #10
 8001824:	f000 fd0a 	bl	800223c <Steps>
				if (flag_test == 1) {
 8001828:	4b15      	ldr	r3, [pc, #84]	; (8001880 <main+0x224>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b01      	cmp	r3, #1
 8001830:	d1e4      	bne.n	80017fc <main+0x1a0>
					flag_test = 0;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <main+0x224>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
					break;
 8001838:	bf00      	nop
		if (STOP_MOTOR == 0) { //РАБОТА В МЕНЮ
 800183a:	e7a7      	b.n	800178c <main+0x130>
 800183c:	20000124 	.word	0x20000124
 8001840:	40010800 	.word	0x40010800
 8001844:	200001b4 	.word	0x200001b4
 8001848:	08005c6c 	.word	0x08005c6c
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40010c00 	.word	0x40010c00
 8001854:	20000248 	.word	0x20000248
 8001858:	08005c74 	.word	0x08005c74
 800185c:	08005c64 	.word	0x08005c64
 8001860:	08005c60 	.word	0x08005c60
 8001864:	08005c7c 	.word	0x08005c7c
 8001868:	08005c5c 	.word	0x08005c5c
 800186c:	20000245 	.word	0x20000245
 8001870:	08005c84 	.word	0x08005c84
 8001874:	08005c8c 	.word	0x08005c8c
 8001878:	08005c90 	.word	0x08005c90
 800187c:	2000000c 	.word	0x2000000c
 8001880:	2000024c 	.word	0x2000024c

08001884 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b094      	sub	sp, #80	; 0x50
 8001888:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800188a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800188e:	2228      	movs	r2, #40	; 0x28
 8001890:	2100      	movs	r1, #0
 8001892:	4618      	mov	r0, r3
 8001894:	f003 faa4 	bl	8004de0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]
 80018b0:	609a      	str	r2, [r3, #8]
 80018b2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c2:	2301      	movs	r3, #1
 80018c4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018c6:	2302      	movs	r3, #2
 80018c8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80018d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80018d4:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fe2a 	bl	8003534 <HAL_RCC_OscConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0x66>
		Error_Handler();
 80018e6:	f000 fa93 	bl	8001e10 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018ea:	230f      	movs	r3, #15
 80018ec:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fa:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2102      	movs	r1, #2
 8001906:	4618      	mov	r0, r3
 8001908:	f002 f896 	bl	8003a38 <HAL_RCC_ClockConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <SystemClock_Config+0x92>
		Error_Handler();
 8001912:	f000 fa7d 	bl	8001e10 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001916:	2302      	movs	r3, #2
 8001918:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800191a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800191e:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001920:	1d3b      	adds	r3, r7, #4
 8001922:	4618      	mov	r0, r3
 8001924:	f002 fa3c 	bl	8003da0 <HAL_RCCEx_PeriphCLKConfig>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <SystemClock_Config+0xae>
		Error_Handler();
 800192e:	f000 fa6f 	bl	8001e10 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001932:	f002 f96b 	bl	8003c0c <HAL_RCC_EnableCSS>
}
 8001936:	bf00      	nop
 8001938:	3750      	adds	r7, #80	; 0x50
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */

static void MX_ADC1_Init(void) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_ADC1_Init+0x74>)
 8001952:	4a19      	ldr	r2, [pc, #100]	; (80019b8 <MX_ADC1_Init+0x78>)
 8001954:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_ADC1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_ADC1_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001962:	4b14      	ldr	r3, [pc, #80]	; (80019b4 <MX_ADC1_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <MX_ADC1_Init+0x74>)
 800196a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800196e:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001970:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <MX_ADC1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8001976:	4b0f      	ldr	r3, [pc, #60]	; (80019b4 <MX_ADC1_Init+0x74>)
 8001978:	2201      	movs	r2, #1
 800197a:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800197c:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_ADC1_Init+0x74>)
 800197e:	f000 ffa9 	bl	80028d4 <HAL_ADC_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_ADC1_Init+0x4c>
		Error_Handler();
 8001988:	f000 fa42 	bl	8001e10 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800198c:	2309      	movs	r3, #9
 800198e:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001990:	2301      	movs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4805      	ldr	r0, [pc, #20]	; (80019b4 <MX_ADC1_Init+0x74>)
 800199e:	f001 f871 	bl	8002a84 <HAL_ADC_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_ADC1_Init+0x6c>
		Error_Handler();
 80019a8:	f000 fa32 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80019ac:	bf00      	nop
 80019ae:	3710      	adds	r7, #16
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	200000a0 	.word	0x200000a0
 80019b8:	40012400 	.word	0x40012400

080019bc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <MX_I2C1_Init+0x54>)
 80019c4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019c8:	4a12      	ldr	r2, [pc, #72]	; (8001a14 <MX_I2C1_Init+0x58>)
 80019ca:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019de:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e0:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019ec:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80019f8:	4804      	ldr	r0, [pc, #16]	; (8001a0c <MX_I2C1_Init+0x50>)
 80019fa:	f001 fc57 	bl	80032ac <HAL_I2C_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001a04:	f000 fa04 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200000d0 	.word	0x200000d0
 8001a10:	40005400 	.word	0x40005400
 8001a14:	000186a0 	.word	0x000186a0

08001a18 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08c      	sub	sp, #48	; 0x30
 8001a1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8001a1e:	f107 030c 	add.w	r3, r7, #12
 8001a22:	2224      	movs	r2, #36	; 0x24
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f9da 	bl	8004de0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <MX_TIM1_Init+0xac>)
 8001a38:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a40:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a60:	2301      	movs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK) {
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001a8c:	f002 fb30 	bl	80040f0 <HAL_TIM_Encoder_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x82>
		Error_Handler();
 8001a96:	f000 f9bb 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <MX_TIM1_Init+0xa8>)
 8001aa8:	f003 f81a 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 8001ab2:	f000 f9ad 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	; 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	20000124 	.word	0x20000124
 8001ac4:	40012c00 	.word	0x40012c00

08001ac8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001adc:	f107 0320 	add.w	r3, r7, #32
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	615a      	str	r2, [r3, #20]
 8001af6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001afa:	4a2d      	ldr	r2, [pc, #180]	; (8001bb0 <MX_TIM3_Init+0xe8>)
 8001afc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001afe:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b04:	4b29      	ldr	r3, [pc, #164]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001b0a:	4b28      	ldr	r3, [pc, #160]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b10:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001b1e:	4823      	ldr	r0, [pc, #140]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b20:	f002 f9f4 	bl	8003f0c <HAL_TIM_Base_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM3_Init+0x66>
		Error_Handler();
 8001b2a:	f000 f971 	bl	8001e10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b32:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481c      	ldr	r0, [pc, #112]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b3c:	f002 fc64 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x82>
		Error_Handler();
 8001b46:	f000 f963 	bl	8001e10 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim3) != HAL_OK) {
 8001b4a:	4818      	ldr	r0, [pc, #96]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b4c:	f002 fa78 	bl	8004040 <HAL_TIM_OC_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM3_Init+0x92>
		Error_Handler();
 8001b56:	f000 f95b 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	4619      	mov	r1, r3
 8001b68:	4810      	ldr	r0, [pc, #64]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b6a:	f002 ffb9 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8001b74:	f000 f94c 	bl	8001e10 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001b90:	f002 fbde 	bl	8004350 <HAL_TIM_OC_ConfigChannel>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM3_Init+0xd6>
		Error_Handler();
 8001b9a:	f000 f939 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001b9e:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM3_Init+0xe4>)
 8001ba0:	f000 fd04 	bl	80025ac <HAL_TIM_MspPostInit>

}
 8001ba4:	bf00      	nop
 8001ba6:	3738      	adds	r7, #56	; 0x38
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000016c 	.word	0x2000016c
 8001bb0:	40000400 	.word	0x40000400

08001bb4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001bba:	f107 0308 	add.w	r3, r7, #8
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001bc8:	463b      	mov	r3, r7
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bd2:	4a1e      	ldr	r2, [pc, #120]	; (8001c4c <MX_TIM4_Init+0x98>)
 8001bd4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 72 - 1;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bd8:	2247      	movs	r2, #71	; 0x47
 8001bda:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 0xffff - 1;
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001be4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001be8:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bea:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001bf6:	4814      	ldr	r0, [pc, #80]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001bf8:	f002 f988 	bl	8003f0c <HAL_TIM_Base_Init>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM4_Init+0x52>
		Error_Handler();
 8001c02:	f000 f905 	bl	8001e10 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c0a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001c0c:	f107 0308 	add.w	r3, r7, #8
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001c14:	f002 fbf8 	bl	8004408 <HAL_TIM_ConfigClockSource>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8001c1e:	f000 f8f7 	bl	8001e10 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c22:	2300      	movs	r3, #0
 8001c24:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4806      	ldr	r0, [pc, #24]	; (8001c48 <MX_TIM4_Init+0x94>)
 8001c30:	f002 ff56 	bl	8004ae0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8001c3a:	f000 f8e9 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001c3e:	bf00      	nop
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001b4 	.word	0x200001b4
 8001c4c:	40000800 	.word	0x40000800

08001c50 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001c54:	4b11      	ldr	r3, [pc, #68]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c56:	4a12      	ldr	r2, [pc, #72]	; (8001ca0 <MX_USART1_UART_Init+0x50>)
 8001c58:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001c5a:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c60:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c62:	4b0e      	ldr	r3, [pc, #56]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001c74:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c76:	220c      	movs	r2, #12
 8001c78:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001c86:	4805      	ldr	r0, [pc, #20]	; (8001c9c <MX_USART1_UART_Init+0x4c>)
 8001c88:	f002 ff88 	bl	8004b9c <HAL_UART_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8001c92:	f000 f8bd 	bl	8001e10 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200001fc 	.word	0x200001fc
 8001ca0:	40013800 	.word	0x40013800

08001ca4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001caa:	f107 0310 	add.w	r3, r7, #16
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	4b4f      	ldr	r3, [pc, #316]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	4a4e      	ldr	r2, [pc, #312]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6193      	str	r3, [r2, #24]
 8001cc4:	4b4c      	ldr	r3, [pc, #304]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	f003 0310 	and.w	r3, r3, #16
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd0:	4b49      	ldr	r3, [pc, #292]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	4a48      	ldr	r2, [pc, #288]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6193      	str	r3, [r2, #24]
 8001cdc:	4b46      	ldr	r3, [pc, #280]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	4b43      	ldr	r3, [pc, #268]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	4a42      	ldr	r2, [pc, #264]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cee:	f043 0304 	orr.w	r3, r3, #4
 8001cf2:	6193      	str	r3, [r2, #24]
 8001cf4:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001d00:	4b3d      	ldr	r3, [pc, #244]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001d06:	f043 0308 	orr.w	r3, r3, #8
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b3a      	ldr	r3, [pc, #232]	; (8001df8 <MX_GPIO_Init+0x154>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1e:	4837      	ldr	r0, [pc, #220]	; (8001dfc <MX_GPIO_Init+0x158>)
 8001d20:	f001 fa93 	bl	800324a <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001d24:	2200      	movs	r2, #0
 8001d26:	f249 01ff 	movw	r1, #37119	; 0x90ff
 8001d2a:	4835      	ldr	r0, [pc, #212]	; (8001e00 <MX_GPIO_Init+0x15c>)
 8001d2c:	f001 fa8d 	bl	800324a <HAL_GPIO_WritePin>
			LCD_LED_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin | LCD_D4_Pin
					| LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin | DIR_Pin | STP_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ENA_GPIO_Port, ENA_Pin, GPIO_PIN_RESET);
 8001d30:	2200      	movs	r2, #0
 8001d32:	2108      	movs	r1, #8
 8001d34:	4833      	ldr	r0, [pc, #204]	; (8001e04 <MX_GPIO_Init+0x160>)
 8001d36:	f001 fa88 	bl	800324a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8001d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 0310 	add.w	r3, r7, #16
 8001d50:	4619      	mov	r1, r3
 8001d52:	482a      	ldr	r0, [pc, #168]	; (8001dfc <MX_GPIO_Init+0x158>)
 8001d54:	f001 f8de 	bl	8002f14 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_LED_Pin LCD_RS_Pin LCD_RW_Pin LCD_E_Pin
	 LCD_D4_Pin LCD_D5_Pin LCD_D6_Pin LCD_D7_Pin
	 DIR_Pin STP_Pin */
	GPIO_InitStruct.Pin = LCD_LED_Pin | LCD_RS_Pin | LCD_RW_Pin | LCD_E_Pin
 8001d58:	f249 03ff 	movw	r3, #37119	; 0x90ff
 8001d5c:	613b      	str	r3, [r7, #16]
			| LCD_D4_Pin | LCD_D5_Pin | LCD_D6_Pin | LCD_D7_Pin | DIR_Pin
			| STP_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d66:	2302      	movs	r3, #2
 8001d68:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6a:	f107 0310 	add.w	r3, r7, #16
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4823      	ldr	r0, [pc, #140]	; (8001e00 <MX_GPIO_Init+0x15c>)
 8001d72:	f001 f8cf 	bl	8002f14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENC_KN_Pin */
	GPIO_InitStruct.Pin = ENC_KN_Pin;
 8001d76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001d7e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(ENC_KN_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0310 	add.w	r3, r7, #16
 8001d88:	4619      	mov	r1, r3
 8001d8a:	481e      	ldr	r0, [pc, #120]	; (8001e04 <MX_GPIO_Init+0x160>)
 8001d8c:	f001 f8c2 	bl	8002f14 <HAL_GPIO_Init>

	/*Configure GPIO pins : KN2_Pin KN1_Pin */
	GPIO_InitStruct.Pin = KN2_Pin | KN1_Pin;
 8001d90:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d94:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d96:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <MX_GPIO_Init+0x168>)
 8001d98:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	4619      	mov	r1, r3
 8001da4:	4817      	ldr	r0, [pc, #92]	; (8001e04 <MX_GPIO_Init+0x160>)
 8001da6:	f001 f8b5 	bl	8002f14 <HAL_GPIO_Init>

	/*Configure GPIO pins : LEFT_Pin RIGHT_Pin */
	GPIO_InitStruct.Pin = LEFT_Pin | RIGHT_Pin;
 8001daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001dae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001db0:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <MX_GPIO_Init+0x164>)
 8001db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	f107 0310 	add.w	r3, r7, #16
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4810      	ldr	r0, [pc, #64]	; (8001e00 <MX_GPIO_Init+0x15c>)
 8001dc0:	f001 f8a8 	bl	8002f14 <HAL_GPIO_Init>

	/*Configure GPIO pin : ENA_Pin */
	GPIO_InitStruct.Pin = ENA_Pin;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ENA_GPIO_Port, &GPIO_InitStruct);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	4619      	mov	r1, r3
 8001dda:	480a      	ldr	r0, [pc, #40]	; (8001e04 <MX_GPIO_Init+0x160>)
 8001ddc:	f001 f89a 	bl	8002f14 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001de0:	2200      	movs	r2, #0
 8001de2:	2100      	movs	r1, #0
 8001de4:	2028      	movs	r0, #40	; 0x28
 8001de6:	f001 f85e 	bl	8002ea6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dea:	2028      	movs	r0, #40	; 0x28
 8001dec:	f001 f877 	bl	8002ede <HAL_NVIC_EnableIRQ>

}
 8001df0:	bf00      	nop
 8001df2:	3720      	adds	r7, #32
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40011000 	.word	0x40011000
 8001e00:	40010800 	.word	0x40010800
 8001e04:	40010c00 	.word	0x40010c00
 8001e08:	10110000 	.word	0x10110000
 8001e0c:	10210000 	.word	0x10210000

08001e10 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 8001e14:	b672      	cpsid	i
}
 8001e16:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e18:	e7fe      	b.n	8001e18 <Error_Handler+0x8>
	...

08001e1c <DelayMotor>:
float c0 = 1;
uint32_t Delta_Time;
uint32_t buffer;
uint8_t buffer_dir;
uint8_t dir__ = 1;
void DelayMotor(uint32_t us) {
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

	__HAL_TIM_SET_COUNTER(&timer, 0);
 8001e24:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <DelayMotor+0x2c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us)
 8001e2c:	bf00      	nop
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <DelayMotor+0x2c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d8f9      	bhi.n	8001e2e <DelayMotor+0x12>
		;

}
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	200001b4 	.word	0x200001b4

08001e4c <Init_Pins>:

void Init_Pins(GPIO_TypeDef *GPIO_Enable, uint16_t Pin_Enable,
		GPIO_TypeDef *GPIO_Step, uint16_t Pin_Step,
		GPIO_TypeDef *GPIO_Direction, uint16_t Pin_Direction) {
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	607a      	str	r2, [r7, #4]
 8001e56:	461a      	mov	r2, r3
 8001e58:	460b      	mov	r3, r1
 8001e5a:	817b      	strh	r3, [r7, #10]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	813b      	strh	r3, [r7, #8]

	Motor_Pin_Enable = Pin_Enable;
 8001e60:	4a0b      	ldr	r2, [pc, #44]	; (8001e90 <Init_Pins+0x44>)
 8001e62:	897b      	ldrh	r3, [r7, #10]
 8001e64:	8013      	strh	r3, [r2, #0]
	Motor_Enable = GPIO_Enable;
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <Init_Pins+0x48>)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6013      	str	r3, [r2, #0]

	Motor_Pin_Step = Pin_Step;
 8001e6c:	4a0a      	ldr	r2, [pc, #40]	; (8001e98 <Init_Pins+0x4c>)
 8001e6e:	893b      	ldrh	r3, [r7, #8]
 8001e70:	8013      	strh	r3, [r2, #0]
	Motor_Step = GPIO_Step;
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <Init_Pins+0x50>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6013      	str	r3, [r2, #0]

	Motor_Pin_Direction = Pin_Direction;
 8001e78:	4a09      	ldr	r2, [pc, #36]	; (8001ea0 <Init_Pins+0x54>)
 8001e7a:	8bbb      	ldrh	r3, [r7, #28]
 8001e7c:	8013      	strh	r3, [r2, #0]
	Motor_Direction = GPIO_Direction;
 8001e7e:	4a09      	ldr	r2, [pc, #36]	; (8001ea4 <Init_Pins+0x58>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	2000024e 	.word	0x2000024e
 8001e94:	20000250 	.word	0x20000250
 8001e98:	2000025c 	.word	0x2000025c
 8001e9c:	20000260 	.word	0x20000260
 8001ea0:	20000254 	.word	0x20000254
 8001ea4:	20000258 	.word	0x20000258

08001ea8 <Speed>:

void Speed(int speed_) {
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	float USK = (float) speed_ / 0.2f * 0.104f;
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe fec3 	bl	8000c3c <__aeabi_i2f>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	492b      	ldr	r1, [pc, #172]	; (8001f68 <Speed+0xc0>)
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ffc6 	bl	8000e4c <__aeabi_fdiv>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	492a      	ldr	r1, [pc, #168]	; (8001f6c <Speed+0xc4>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe ff0d 	bl	8000ce4 <__aeabi_fmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	60fb      	str	r3, [r7, #12]
	Delta_Time = (int) (60 * 1000 * 1000 / (2 * steps * speed_));
 8001ece:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	fb02 f303 	mul.w	r3, r2, r3
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4a25      	ldr	r2, [pc, #148]	; (8001f70 <Speed+0xc8>)
 8001edc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <Speed+0xcc>)
 8001ee4:	601a      	str	r2, [r3, #0]
	c0 = 1.0f * 1000.0f * 1000.0f / (Delta_Time * 2.0f)
 8001ee6:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <Speed+0xcc>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe fea2 	bl	8000c34 <__aeabi_ui2f>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fded 	bl	8000ad4 <__addsf3>
 8001efa:	4603      	mov	r3, r0
 8001efc:	4619      	mov	r1, r3
 8001efe:	481e      	ldr	r0, [pc, #120]	; (8001f78 <Speed+0xd0>)
 8001f00:	f7fe ffa4 	bl	8000e4c <__aeabi_fdiv>
 8001f04:	4603      	mov	r3, r0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fa86 	bl	8000418 <__aeabi_f2d>
 8001f0c:	4604      	mov	r4, r0
 8001f0e:	460d      	mov	r5, r1
			* pow(2.0f * 2.0f * 3.14f / steps / USK, 0.5f);
 8001f10:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7fe fe91 	bl	8000c3c <__aeabi_i2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4817      	ldr	r0, [pc, #92]	; (8001f7c <Speed+0xd4>)
 8001f20:	f7fe ff94 	bl	8000e4c <__aeabi_fdiv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	68f9      	ldr	r1, [r7, #12]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe ff8f 	bl	8000e4c <__aeabi_fdiv>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe fa71 	bl	8000418 <__aeabi_f2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <Speed+0xd8>)
 8001f3c:	f002 ff9a 	bl	8004e74 <pow>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe fabe 	bl	80004c8 <__aeabi_dmul>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	460b      	mov	r3, r1
 8001f50:	4610      	mov	r0, r2
 8001f52:	4619      	mov	r1, r3
 8001f54:	f7fe fd68 	bl	8000a28 <__aeabi_d2f>
 8001f58:	4603      	mov	r3, r0
	c0 = 1.0f * 1000.0f * 1000.0f / (Delta_Time * 2.0f)
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <Speed+0xdc>)
 8001f5c:	6013      	str	r3, [r2, #0]

}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	3e4ccccd 	.word	0x3e4ccccd
 8001f6c:	3dd4fdf4 	.word	0x3dd4fdf4
 8001f70:	03938700 	.word	0x03938700
 8001f74:	20000268 	.word	0x20000268
 8001f78:	49742400 	.word	0x49742400
 8001f7c:	4148f5c3 	.word	0x4148f5c3
 8001f80:	3fe00000 	.word	0x3fe00000
 8001f84:	20000010 	.word	0x20000010

08001f88 <Motor_On>:
void Motor_On(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor_Enable, Motor_Pin_Enable, GPIO_PIN_RESET);
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <Motor_On+0x18>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <Motor_On+0x1c>)
 8001f92:	8811      	ldrh	r1, [r2, #0]
 8001f94:	2200      	movs	r2, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f001 f957 	bl	800324a <HAL_GPIO_WritePin>
}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000250 	.word	0x20000250
 8001fa4:	2000024e 	.word	0x2000024e

08001fa8 <Motor_Off>:
void Motor_Off(void) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Motor_Enable, Motor_Pin_Enable, GPIO_PIN_SET);
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <Motor_Off+0x18>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <Motor_Off+0x1c>)
 8001fb2:	8811      	ldrh	r1, [r2, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f001 f947 	bl	800324a <HAL_GPIO_WritePin>
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000250 	.word	0x20000250
 8001fc4:	2000024e 	.word	0x2000024e

08001fc8 <Acceleration>:

float Acceleration(uint32_t n, float a) {
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
	return a * (1.0f - 2.0f / (4.0f * n + 1.0f));
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe fe2e 	bl	8000c34 <__aeabi_ui2f>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fe80 	bl	8000ce4 <__aeabi_fmul>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fd72 	bl	8000ad4 <__addsf3>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ff8:	f7fe ff28 	bl	8000e4c <__aeabi_fdiv>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4619      	mov	r1, r3
 8002000:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002004:	f7fe fd64 	bl	8000ad0 <__aeabi_fsub>
 8002008:	4603      	mov	r3, r0
 800200a:	6839      	ldr	r1, [r7, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fe69 	bl	8000ce4 <__aeabi_fmul>
 8002012:	4603      	mov	r3, r0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <Deceleration>:

float Deceleration(uint32_t n, float a) {
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
	return a / (1.0f - 2.0f / (4.0f * n + 1.0f));
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fe04 	bl	8000c34 <__aeabi_ui2f>
 800202c:	4603      	mov	r3, r0
 800202e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe56 	bl	8000ce4 <__aeabi_fmul>
 8002038:	4603      	mov	r3, r0
 800203a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fd48 	bl	8000ad4 <__addsf3>
 8002044:	4603      	mov	r3, r0
 8002046:	4619      	mov	r1, r3
 8002048:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800204c:	f7fe fefe 	bl	8000e4c <__aeabi_fdiv>
 8002050:	4603      	mov	r3, r0
 8002052:	4619      	mov	r1, r3
 8002054:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002058:	f7fe fd3a 	bl	8000ad0 <__aeabi_fsub>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	6838      	ldr	r0, [r7, #0]
 8002062:	f7fe fef3 	bl	8000e4c <__aeabi_fdiv>
 8002066:	4603      	mov	r3, r0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3708      	adds	r7, #8
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <ACC>:

void ACC() { // функция ускорения или торможения
 8002070:	b590      	push	{r4, r7, lr}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
	//Ускорение:
	float C = 1.0;
 8002076:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800207a:	60fb      	str	r3, [r7, #12]
	C = c0;
 800207c:	4b65      	ldr	r3, [pc, #404]	; (8002214 <ACC+0x1a4>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
	uint32_t i = 1;
 8002082:	2301      	movs	r3, #1
 8002084:	60bb      	str	r3, [r7, #8]
	if (flag_usk) {
 8002086:	4b64      	ldr	r3, [pc, #400]	; (8002218 <ACC+0x1a8>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b2db      	uxtb	r3, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05e      	beq.n	800214e <ACC+0xde>
		HAL_GPIO_WritePin(Motor_Direction, Motor_Pin_Direction, DIR); //Задаем направление
 8002090:	4b62      	ldr	r3, [pc, #392]	; (800221c <ACC+0x1ac>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a62      	ldr	r2, [pc, #392]	; (8002220 <ACC+0x1b0>)
 8002096:	8811      	ldrh	r1, [r2, #0]
 8002098:	4a62      	ldr	r2, [pc, #392]	; (8002224 <ACC+0x1b4>)
 800209a:	7812      	ldrb	r2, [r2, #0]
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	4618      	mov	r0, r3
 80020a0:	f001 f8d3 	bl	800324a <HAL_GPIO_WritePin>

		while (C >= 1) {
 80020a4:	e045      	b.n	8002132 <ACC+0xc2>
			HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_SET);
 80020a6:	4b60      	ldr	r3, [pc, #384]	; (8002228 <ACC+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a60      	ldr	r2, [pc, #384]	; (800222c <ACC+0x1bc>)
 80020ac:	8811      	ldrh	r1, [r2, #0]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4618      	mov	r0, r3
 80020b2:	f001 f8ca 	bl	800324a <HAL_GPIO_WritePin>
			DelayMotor((int) Delta_Time * Acceleration(i, C));
 80020b6:	4b5e      	ldr	r3, [pc, #376]	; (8002230 <ACC+0x1c0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fdbe 	bl	8000c3c <__aeabi_i2f>
 80020c0:	4604      	mov	r4, r0
 80020c2:	68f9      	ldr	r1, [r7, #12]
 80020c4:	68b8      	ldr	r0, [r7, #8]
 80020c6:	f7ff ff7f 	bl	8001fc8 <Acceleration>
 80020ca:	4603      	mov	r3, r0
 80020cc:	4619      	mov	r1, r3
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7fe fe08 	bl	8000ce4 <__aeabi_fmul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe ffca 	bl	8001070 <__aeabi_f2uiz>
 80020dc:	4603      	mov	r3, r0
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fe9c 	bl	8001e1c <DelayMotor>
			HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_RESET);
 80020e4:	4b50      	ldr	r3, [pc, #320]	; (8002228 <ACC+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a50      	ldr	r2, [pc, #320]	; (800222c <ACC+0x1bc>)
 80020ea:	8811      	ldrh	r1, [r2, #0]
 80020ec:	2200      	movs	r2, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 f8ab 	bl	800324a <HAL_GPIO_WritePin>
			DelayMotor((int) Delta_Time * Acceleration(i, C));
 80020f4:	4b4e      	ldr	r3, [pc, #312]	; (8002230 <ACC+0x1c0>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fd9f 	bl	8000c3c <__aeabi_i2f>
 80020fe:	4604      	mov	r4, r0
 8002100:	68f9      	ldr	r1, [r7, #12]
 8002102:	68b8      	ldr	r0, [r7, #8]
 8002104:	f7ff ff60 	bl	8001fc8 <Acceleration>
 8002108:	4603      	mov	r3, r0
 800210a:	4619      	mov	r1, r3
 800210c:	4620      	mov	r0, r4
 800210e:	f7fe fde9 	bl	8000ce4 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe ffab 	bl	8001070 <__aeabi_f2uiz>
 800211a:	4603      	mov	r3, r0
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fe7d 	bl	8001e1c <DelayMotor>
			C = Acceleration(i, C);
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	68b8      	ldr	r0, [r7, #8]
 8002126:	f7ff ff4f 	bl	8001fc8 <Acceleration>
 800212a:	60f8      	str	r0, [r7, #12]
			i++;
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	3301      	adds	r3, #1
 8002130:	60bb      	str	r3, [r7, #8]
		while (C >= 1) {
 8002132:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f7fe ff86 	bl	8001048 <__aeabi_fcmpge>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1b1      	bne.n	80020a6 <ACC+0x36>
		}

		buffer = i;
 8002142:	4a3c      	ldr	r2, [pc, #240]	; (8002234 <ACC+0x1c4>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	6013      	str	r3, [r2, #0]
		flag_usk = 0;
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <ACC+0x1a8>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
	}

	if (flag_dec) {
 800214e:	4b3a      	ldr	r3, [pc, #232]	; (8002238 <ACC+0x1c8>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d059      	beq.n	800220c <ACC+0x19c>
		C = 1.0;
 8002158:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800215c:	60fb      	str	r3, [r7, #12]
		for (size_t i = buffer; i > 1; i--) {
 800215e:	4b35      	ldr	r3, [pc, #212]	; (8002234 <ACC+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	e045      	b.n	80021f2 <ACC+0x182>
			HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_SET);
 8002166:	4b30      	ldr	r3, [pc, #192]	; (8002228 <ACC+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a30      	ldr	r2, [pc, #192]	; (800222c <ACC+0x1bc>)
 800216c:	8811      	ldrh	r1, [r2, #0]
 800216e:	2201      	movs	r2, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f001 f86a 	bl	800324a <HAL_GPIO_WritePin>
			DelayMotor((int) Delta_Time * Deceleration(i, C));
 8002176:	4b2e      	ldr	r3, [pc, #184]	; (8002230 <ACC+0x1c0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7fe fd5e 	bl	8000c3c <__aeabi_i2f>
 8002180:	4604      	mov	r4, r0
 8002182:	68f9      	ldr	r1, [r7, #12]
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff49 	bl	800201c <Deceleration>
 800218a:	4603      	mov	r3, r0
 800218c:	4619      	mov	r1, r3
 800218e:	4620      	mov	r0, r4
 8002190:	f7fe fda8 	bl	8000ce4 <__aeabi_fmul>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe ff6a 	bl	8001070 <__aeabi_f2uiz>
 800219c:	4603      	mov	r3, r0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe3c 	bl	8001e1c <DelayMotor>
			HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_RESET);
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <ACC+0x1b8>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a20      	ldr	r2, [pc, #128]	; (800222c <ACC+0x1bc>)
 80021aa:	8811      	ldrh	r1, [r2, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f001 f84b 	bl	800324a <HAL_GPIO_WritePin>
			DelayMotor((int) Delta_Time * Deceleration(i, C));
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <ACC+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fd3f 	bl	8000c3c <__aeabi_i2f>
 80021be:	4604      	mov	r4, r0
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff2a 	bl	800201c <Deceleration>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4619      	mov	r1, r3
 80021cc:	4620      	mov	r0, r4
 80021ce:	f7fe fd89 	bl	8000ce4 <__aeabi_fmul>
 80021d2:	4603      	mov	r3, r0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe ff4b 	bl	8001070 <__aeabi_f2uiz>
 80021da:	4603      	mov	r3, r0
 80021dc:	4618      	mov	r0, r3
 80021de:	f7ff fe1d 	bl	8001e1c <DelayMotor>
			C = Deceleration(i, C);
 80021e2:	68f9      	ldr	r1, [r7, #12]
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f7ff ff19 	bl	800201c <Deceleration>
 80021ea:	60f8      	str	r0, [r7, #12]
		for (size_t i = buffer; i > 1; i--) {
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	607b      	str	r3, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d8b6      	bhi.n	8002166 <ACC+0xf6>
		}
		HAL_GPIO_WritePin(Motor_Direction, Motor_Pin_Direction, DIR); //Задаем направление
 80021f8:	4b08      	ldr	r3, [pc, #32]	; (800221c <ACC+0x1ac>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a08      	ldr	r2, [pc, #32]	; (8002220 <ACC+0x1b0>)
 80021fe:	8811      	ldrh	r1, [r2, #0]
 8002200:	4a08      	ldr	r2, [pc, #32]	; (8002224 <ACC+0x1b4>)
 8002202:	7812      	ldrb	r2, [r2, #0]
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4618      	mov	r0, r3
 8002208:	f001 f81f 	bl	800324a <HAL_GPIO_WritePin>

	}
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}
 8002214:	20000010 	.word	0x20000010
 8002218:	2000000c 	.word	0x2000000c
 800221c:	20000258 	.word	0x20000258
 8002220:	20000254 	.word	0x20000254
 8002224:	20000248 	.word	0x20000248
 8002228:	20000260 	.word	0x20000260
 800222c:	2000025c 	.word	0x2000025c
 8002230:	20000268 	.word	0x20000268
 8002234:	2000026c 	.word	0x2000026c
 8002238:	20000264 	.word	0x20000264

0800223c <Steps>:
		return;
		buffer_dir = stable;

}
}
void Steps(uint32_t steps_) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	ACC();
 8002244:	f7ff ff14 	bl	8002070 <ACC>
	for (size_t i = 0; i < steps_; i++) { //razgon
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e05e      	b.n	800230c <Steps+0xd0>
		if(FLAG_CHANGE_DIR){
 800224e:	4b34      	ldr	r3, [pc, #208]	; (8002320 <Steps+0xe4>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d01c      	beq.n	8002292 <Steps+0x56>
			flag_dec = 1;
 8002258:	4b32      	ldr	r3, [pc, #200]	; (8002324 <Steps+0xe8>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
			ACC();
 800225e:	f7ff ff07 	bl	8002070 <ACC>
			flag_dec = 0;
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <Steps+0xe8>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
			flag_usk = 1;
 8002268:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <Steps+0xec>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(Motor_Direction, Motor_Pin_Direction, DIR); //Задаем направление
 800226e:	4b2f      	ldr	r3, [pc, #188]	; (800232c <Steps+0xf0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2f      	ldr	r2, [pc, #188]	; (8002330 <Steps+0xf4>)
 8002274:	8811      	ldrh	r1, [r2, #0]
 8002276:	4a2f      	ldr	r2, [pc, #188]	; (8002334 <Steps+0xf8>)
 8002278:	7812      	ldrb	r2, [r2, #0]
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f000 ffe4 	bl	800324a <HAL_GPIO_WritePin>
			ACC();
 8002282:	f7ff fef5 	bl	8002070 <ACC>
			flag_usk = 0;
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <Steps+0xec>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			FLAG_CHANGE_DIR = 0;
 800228c:	4b24      	ldr	r3, [pc, #144]	; (8002320 <Steps+0xe4>)
 800228e:	2200      	movs	r2, #0
 8002290:	701a      	strb	r2, [r3, #0]
		}
		HAL_GPIO_WritePin(Motor_Direction, Motor_Pin_Direction, DIR); //Задаем направление
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <Steps+0xf0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a26      	ldr	r2, [pc, #152]	; (8002330 <Steps+0xf4>)
 8002298:	8811      	ldrh	r1, [r2, #0]
 800229a:	4a26      	ldr	r2, [pc, #152]	; (8002334 <Steps+0xf8>)
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f000 ffd2 	bl	800324a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_SET);
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <Steps+0xfc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a24      	ldr	r2, [pc, #144]	; (800233c <Steps+0x100>)
 80022ac:	8811      	ldrh	r1, [r2, #0]
 80022ae:	2201      	movs	r2, #1
 80022b0:	4618      	mov	r0, r3
 80022b2:	f000 ffca 	bl	800324a <HAL_GPIO_WritePin>
		DelayMotor(Delta_Time);
 80022b6:	4b22      	ldr	r3, [pc, #136]	; (8002340 <Steps+0x104>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fdae 	bl	8001e1c <DelayMotor>
		HAL_GPIO_WritePin(Motor_Step, Motor_Pin_Step, GPIO_PIN_RESET);
 80022c0:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <Steps+0xfc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <Steps+0x100>)
 80022c6:	8811      	ldrh	r1, [r2, #0]
 80022c8:	2200      	movs	r2, #0
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 ffbd 	bl	800324a <HAL_GPIO_WritePin>
		DelayMotor(Delta_Time);
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <Steps+0x104>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff fda1 	bl	8001e1c <DelayMotor>
		if (STOP_MOTOR == 0) {
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <Steps+0x108>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d110      	bne.n	8002306 <Steps+0xca>
			flag_dec = 1;
 80022e4:	4b0f      	ldr	r3, [pc, #60]	; (8002324 <Steps+0xe8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
			ACC();
 80022ea:	f7ff fec1 	bl	8002070 <ACC>
			flag_dec = 0;
 80022ee:	4b0d      	ldr	r3, [pc, #52]	; (8002324 <Steps+0xe8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			flag_usk = 1;
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <Steps+0xec>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	701a      	strb	r2, [r3, #0]
			flag_test = 1;
 80022fa:	4b13      	ldr	r3, [pc, #76]	; (8002348 <Steps+0x10c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
			Motor_Off();
 8002300:	f7ff fe52 	bl	8001fa8 <Motor_Off>
			break;
 8002304:	e007      	b.n	8002316 <Steps+0xda>
	for (size_t i = 0; i < steps_; i++) { //razgon
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3301      	adds	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d39c      	bcc.n	800224e <Steps+0x12>
		}
	}
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000024d 	.word	0x2000024d
 8002324:	20000264 	.word	0x20000264
 8002328:	2000000c 	.word	0x2000000c
 800232c:	20000258 	.word	0x20000258
 8002330:	20000254 	.word	0x20000254
 8002334:	20000248 	.word	0x20000248
 8002338:	20000260 	.word	0x20000260
 800233c:	2000025c 	.word	0x2000025c
 8002340:	20000268 	.word	0x20000268
 8002344:	20000245 	.word	0x20000245
 8002348:	2000024c 	.word	0x2000024c

0800234c <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8002352:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_MspInit+0x5c>)
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	4a14      	ldr	r2, [pc, #80]	; (80023a8 <HAL_MspInit+0x5c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6193      	str	r3, [r2, #24]
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_MspInit+0x5c>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 800236a:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_MspInit+0x5c>)
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_MspInit+0x5c>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	61d3      	str	r3, [r2, #28]
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_MspInit+0x5c>)
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	607b      	str	r3, [r7, #4]
 8002380:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002382:	4b0a      	ldr	r3, [pc, #40]	; (80023ac <HAL_MspInit+0x60>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	4a04      	ldr	r2, [pc, #16]	; (80023ac <HAL_MspInit+0x60>)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40010000 	.word	0x40010000

080023b0 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80023b8:	f107 0310 	add.w	r3, r7, #16
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]
 80023c4:	60da      	str	r2, [r3, #12]
	if (hadc->Instance == ADC1) {
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a14      	ldr	r2, [pc, #80]	; (800241c <HAL_ADC_MspInit+0x6c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d121      	bne.n	8002414 <HAL_ADC_MspInit+0x64>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 80023d0:	4b13      	ldr	r3, [pc, #76]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	4a12      	ldr	r2, [pc, #72]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023da:	6193      	str	r3, [r2, #24]
 80023dc:	4b10      	ldr	r3, [pc, #64]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e8:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	4a0c      	ldr	r2, [pc, #48]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023ee:	f043 0308 	orr.w	r3, r3, #8
 80023f2:	6193      	str	r3, [r2, #24]
 80023f4:	4b0a      	ldr	r3, [pc, #40]	; (8002420 <HAL_ADC_MspInit+0x70>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0308 	and.w	r3, r3, #8
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	68bb      	ldr	r3, [r7, #8]
		/**ADC1 GPIO Configuration
		 PB1     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = ADC_Pin;
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002404:	2303      	movs	r3, #3
 8002406:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(ADC_GPIO_Port, &GPIO_InitStruct);
 8002408:	f107 0310 	add.w	r3, r7, #16
 800240c:	4619      	mov	r1, r3
 800240e:	4805      	ldr	r0, [pc, #20]	; (8002424 <HAL_ADC_MspInit+0x74>)
 8002410:	f000 fd80 	bl	8002f14 <HAL_GPIO_Init>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8002414:	bf00      	nop
 8002416:	3720      	adds	r7, #32
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40012400 	.word	0x40012400
 8002420:	40021000 	.word	0x40021000
 8002424:	40010c00 	.word	0x40010c00

08002428 <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	; 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002430:	f107 0314 	add.w	r3, r7, #20
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
	if (hi2c->Instance == I2C1) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a1d      	ldr	r2, [pc, #116]	; (80024b8 <HAL_I2C_MspInit+0x90>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d132      	bne.n	80024ae <HAL_I2C_MspInit+0x86>
		/* USER CODE BEGIN I2C1_MspInit 0 */

		/* USER CODE END I2C1_MspInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	4a1b      	ldr	r2, [pc, #108]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6193      	str	r3, [r2, #24]
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002460:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002464:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002466:	2312      	movs	r3, #18
 8002468:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246a:	2303      	movs	r3, #3
 800246c:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0314 	add.w	r3, r7, #20
 8002472:	4619      	mov	r1, r3
 8002474:	4812      	ldr	r0, [pc, #72]	; (80024c0 <HAL_I2C_MspInit+0x98>)
 8002476:	f000 fd4d 	bl	8002f14 <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_I2C1_ENABLE();
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_I2C_MspInit+0x9c>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	627b      	str	r3, [r7, #36]	; 0x24
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002486:	627b      	str	r3, [r7, #36]	; 0x24
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	627b      	str	r3, [r7, #36]	; 0x24
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_I2C_MspInit+0x9c>)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	6053      	str	r3, [r2, #4]

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_I2C_MspInit+0x94>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_I2C_MspInit+0x94>)
 800249c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024a0:	61d3      	str	r3, [r2, #28]
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_I2C_MspInit+0x94>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	; 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40005400 	.word	0x40005400
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40010c00 	.word	0x40010c00
 80024c4:	40010000 	.word	0x40010000

080024c8 <HAL_TIM_Encoder_MspInit>:
 * @brief TIM_Encoder MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_encoder: TIM_Encoder handle pointer
 * @retval None
 */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim_encoder) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
	if (htim_encoder->Instance == TIM1) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a16      	ldr	r2, [pc, #88]	; (800253c <HAL_TIM_Encoder_MspInit+0x74>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d124      	bne.n	8002532 <HAL_TIM_Encoder_MspInit+0x6a>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 80024e8:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 80024ea:	699b      	ldr	r3, [r3, #24]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 80024ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024f2:	6193      	str	r3, [r2, #24]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 80024f6:	699b      	ldr	r3, [r3, #24]
 80024f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <HAL_TIM_Encoder_MspInit+0x78>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0304 	and.w	r3, r3, #4
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 PA9     ------> TIM1_CH2
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002522:	2301      	movs	r3, #1
 8002524:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002526:	f107 0310 	add.w	r3, r7, #16
 800252a:	4619      	mov	r1, r3
 800252c:	4805      	ldr	r0, [pc, #20]	; (8002544 <HAL_TIM_Encoder_MspInit+0x7c>)
 800252e:	f000 fcf1 	bl	8002f14 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM1_MspInit 1 */

		/* USER CODE END TIM1_MspInit 1 */
	}

}
 8002532:	bf00      	nop
 8002534:	3720      	adds	r7, #32
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40012c00 	.word	0x40012c00
 8002540:	40021000 	.word	0x40021000
 8002544:	40010800 	.word	0x40010800

08002548 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM3) {
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <HAL_TIM_Base_MspInit+0x58>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10c      	bne.n	8002574 <HAL_TIM_Base_MspInit+0x2c>
		/* USER CODE BEGIN TIM3_MspInit 0 */

		/* USER CODE END TIM3_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM3_CLK_ENABLE();
 800255a:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	4a11      	ldr	r2, [pc, #68]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002560:	f043 0302 	orr.w	r3, r3, #2
 8002564:	61d3      	str	r3, [r2, #28]
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}

}
 8002572:	e010      	b.n	8002596 <HAL_TIM_Base_MspInit+0x4e>
	} else if (htim_base->Instance == TIM4) {
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0b      	ldr	r2, [pc, #44]	; (80025a8 <HAL_TIM_Base_MspInit+0x60>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10b      	bne.n	8002596 <HAL_TIM_Base_MspInit+0x4e>
		__HAL_RCC_TIM4_CLK_ENABLE();
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <HAL_TIM_Base_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
}
 8002596:	bf00      	nop
 8002598:	3714      	adds	r7, #20
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	40000400 	.word	0x40000400
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40000800 	.word	0x40000800

080025ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80025b4:	f107 030c 	add.w	r3, r7, #12
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
	if (htim->Instance == TIM3) {
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a18      	ldr	r2, [pc, #96]	; (8002628 <HAL_TIM_MspPostInit+0x7c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d129      	bne.n	8002620 <HAL_TIM_MspPostInit+0x74>
		/* USER CODE BEGIN TIM3_MspPostInit 0 */

		/* USER CODE END TIM3_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <HAL_TIM_MspPostInit+0x80>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a16      	ldr	r2, [pc, #88]	; (800262c <HAL_TIM_MspPostInit+0x80>)
 80025d2:	f043 0308 	orr.w	r3, r3, #8
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <HAL_TIM_MspPostInit+0x80>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f003 0308 	and.w	r3, r3, #8
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	68bb      	ldr	r3, [r7, #8]
		/**TIM3 GPIO Configuration
		 PB4     ------> TIM3_CH1
		 */
		GPIO_InitStruct.Pin = PWM_OUT_Pin;
 80025e4:	2310      	movs	r3, #16
 80025e6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e8:	2302      	movs	r3, #2
 80025ea:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2302      	movs	r3, #2
 80025ee:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(PWM_OUT_GPIO_Port, &GPIO_InitStruct);
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	4619      	mov	r1, r3
 80025f6:	480e      	ldr	r0, [pc, #56]	; (8002630 <HAL_TIM_MspPostInit+0x84>)
 80025f8:	f000 fc8c 	bl	8002f14 <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_TIM3_PARTIAL();
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_TIM_MspPostInit+0x88>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	4a06      	ldr	r2, [pc, #24]	; (8002634 <HAL_TIM_MspPostInit+0x88>)
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	6053      	str	r3, [r2, #4]
		/* USER CODE BEGIN TIM3_MspPostInit 1 */

		/* USER CODE END TIM3_MspPostInit 1 */
	}

}
 8002620:	bf00      	nop
 8002622:	3720      	adds	r7, #32
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40000400 	.word	0x40000400
 800262c:	40021000 	.word	0x40021000
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40010000 	.word	0x40010000

08002638 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	; 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a22      	ldr	r2, [pc, #136]	; (80026dc <HAL_UART_MspInit+0xa4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d13d      	bne.n	80026d4 <HAL_UART_MspInit+0x9c>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8002658:	4b21      	ldr	r3, [pc, #132]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a20      	ldr	r2, [pc, #128]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 800265e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b1e      	ldr	r3, [pc, #120]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002670:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_UART_MspInit+0xa8>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
		/**USART1 GPIO Configuration
		 PB6     ------> USART1_TX
		 PB7     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = TxD_Pin;
 8002688:	2340      	movs	r3, #64	; 0x40
 800268a:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002690:	2303      	movs	r3, #3
 8002692:	623b      	str	r3, [r7, #32]
		HAL_GPIO_Init(TxD_GPIO_Port, &GPIO_InitStruct);
 8002694:	f107 0314 	add.w	r3, r7, #20
 8002698:	4619      	mov	r1, r3
 800269a:	4812      	ldr	r0, [pc, #72]	; (80026e4 <HAL_UART_MspInit+0xac>)
 800269c:	f000 fc3a 	bl	8002f14 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RxD_Pin;
 80026a0:	2380      	movs	r3, #128	; 0x80
 80026a2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(RxD_GPIO_Port, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	480c      	ldr	r0, [pc, #48]	; (80026e4 <HAL_UART_MspInit+0xac>)
 80026b4:	f000 fc2e 	bl	8002f14 <HAL_GPIO_Init>

		__HAL_AFIO_REMAP_USART1_ENABLE();
 80026b8:	4b0b      	ldr	r3, [pc, #44]	; (80026e8 <HAL_UART_MspInit+0xb0>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	4a06      	ldr	r2, [pc, #24]	; (80026e8 <HAL_UART_MspInit+0xb0>)
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	6053      	str	r3, [r2, #4]
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40013800 	.word	0x40013800
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40010c00 	.word	0x40010c00
 80026e8:	40010000 	.word	0x40010000

080026ec <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	HAL_RCC_NMI_IRQHandler();
 80026f0:	f001 fb1e 	bl	8003d30 <HAL_RCC_NMI_IRQHandler>
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80026f4:	e7fe      	b.n	80026f4 <NMI_Handler+0x8>

080026f6 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80026f6:	b480      	push	{r7}
 80026f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80026fa:	e7fe      	b.n	80026fa <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8002700:	e7fe      	b.n	8002700 <MemManage_Handler+0x4>

08002702 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8002706:	e7fe      	b.n	8002706 <BusFault_Handler+0x4>

08002708 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800270c:	e7fe      	b.n	800270c <UsageFault_Handler+0x4>

0800270e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	46bd      	mov	sp, r7
 8002716:	bc80      	pop	{r7}
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr

08002732 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002732:	b580      	push	{r7, lr}
 8002734:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002736:	f000 f88d 	bl	8002854 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}

0800273e <EXTI15_10_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 800273e:	b580      	push	{r7, lr}
 8002740:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(LEFT_Pin);
 8002742:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002746:	f000 fd99 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(RIGHT_Pin);
 800274a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800274e:	f000 fd95 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(ENC_KN_Pin);
 8002752:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002756:	f000 fd91 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(KN2_Pin);
 800275a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800275e:	f000 fd8d 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(KN1_Pin);
 8002762:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002766:	f000 fd89 	bl	800327c <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}

0800276e <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800276e:	b480      	push	{r7}
 8002770:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr
	...

0800277c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800277c:	f7ff fff7 	bl	800276e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002782:	490c      	ldr	r1, [pc, #48]	; (80027b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002784:	4a0c      	ldr	r2, [pc, #48]	; (80027b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002788:	e002      	b.n	8002790 <LoopCopyDataInit>

0800278a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800278a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800278c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278e:	3304      	adds	r3, #4

08002790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002794:	d3f9      	bcc.n	800278a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002796:	4a09      	ldr	r2, [pc, #36]	; (80027bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002798:	4c09      	ldr	r4, [pc, #36]	; (80027c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800279c:	e001      	b.n	80027a2 <LoopFillZerobss>

0800279e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027a0:	3204      	adds	r2, #4

080027a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a4:	d3fb      	bcc.n	800279e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a6:	f002 fadd 	bl	8004d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027aa:	f7fe ff57 	bl	800165c <main>
  bx lr
 80027ae:	4770      	bx	lr
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80027b8:	08005d20 	.word	0x08005d20
  ldr r2, =_sbss
 80027bc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80027c0:	20000274 	.word	0x20000274

080027c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC1_2_IRQHandler>
	...

080027c8 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

	/* Prefetch buffer is not available on value line devices */
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027cc:	4b08      	ldr	r3, [pc, #32]	; (80027f0 <HAL_Init+0x28>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <HAL_Init+0x28>)
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d8:	2003      	movs	r0, #3
 80027da:	f000 fb59 	bl	8002e90 <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 80027de:	200f      	movs	r0, #15
 80027e0:	f000 f808 	bl	80027f4 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 80027e4:	f7ff fdb2 	bl	800234c <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000

080027f4 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x54>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_InitTick+0x58>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	4619      	mov	r1, r3
 8002806:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280a:	fbb3 f3f1 	udiv	r3, r3, r1
 800280e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fb71 	bl	8002efa <HAL_SYSTICK_Config>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_InitTick+0x2e>
		return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e00e      	b.n	8002840 <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b0f      	cmp	r3, #15
 8002826:	d80a      	bhi.n	800283e <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002828:	2200      	movs	r2, #0
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f000 fb39 	bl	8002ea6 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8002834:	4a06      	ldr	r2, [pc, #24]	; (8002850 <HAL_InitTick+0x5c>)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e000      	b.n	8002840 <HAL_InitTick+0x4c>
		return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000014 	.word	0x20000014
 800284c:	2000001c 	.word	0x2000001c
 8002850:	20000018 	.word	0x20000018

08002854 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8002858:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_IncTick+0x1c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_IncTick+0x20>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_IncTick+0x20>)
 8002866:	6013      	str	r3, [r2, #0]
}
 8002868:	bf00      	nop
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	2000001c 	.word	0x2000001c
 8002874:	20000270 	.word	0x20000270

08002878 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note  This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
	return uwTick;
 800287c:	4b02      	ldr	r3, [pc, #8]	; (8002888 <HAL_GetTick+0x10>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	20000270 	.word	0x20000270

0800288c <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fff0 	bl	8002878 <HAL_GetTick>
 8002898:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a4:	d005      	beq.n	80028b2 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <HAL_Delay+0x44>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4413      	add	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80028b2:	bf00      	nop
 80028b4:	f7ff ffe0 	bl	8002878 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d8f7      	bhi.n	80028b4 <HAL_Delay+0x28>
	}
}
 80028c4:	bf00      	nop
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	2000001c 	.word	0x2000001c

080028d4 <HAL_ADC_Init>:
 *         ADC and scope of regular group. For parameters details, see comments 
 *         of structure "ADC_InitTypeDef".
 * @param  hadc: ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b086      	sub	sp, #24
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	75fb      	strb	r3, [r7, #23]
	uint32_t tmp_cr1 = 0U;
 80028e0:	2300      	movs	r3, #0
 80028e2:	613b      	str	r3, [r7, #16]
	uint32_t tmp_cr2 = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
	uint32_t tmp_sqr1 = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]

	/* Check ADC handle */
	if (hadc == NULL) {
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_Init+0x22>
		return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e0be      	b.n	8002a74 <HAL_ADC_Init+0x1a0>
	assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
	assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
	assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));

	if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE) {
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	2b00      	cmp	r3, #0
	/* Refer to header of this file for more details on clock enabling          */
	/* procedure.                                                               */

	/* Actions performed only if ADC is coming from state reset:                */
	/* - Initialization of ADC MSP                                              */
	if (hadc->State == HAL_ADC_STATE_RESET) {
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_ADC_Init+0x44>
		/* Initialize ADC error code */
		ADC_CLEAR_ERRORCODE(hadc);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Allocate lock resource and initialize it */
		hadc->Lock = HAL_UNLOCKED;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
		/* Init the low level hardware */
		HAL_ADC_MspInit(hadc);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f7ff fd4c 	bl	80023b0 <HAL_ADC_MspInit>
	/* Stop potential conversion on going, on regular and injected groups */
	/* Disable ADC peripheral */
	/* Note: In case of ADC already enabled, precaution to not launch an        */
	/*       unwanted conversion while modifying register CR2 by writing 1 to   */
	/*       bit ADON.                                                          */
	tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f9ab 	bl	8002c74 <ADC_ConversionStop_Disable>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]

	/* Configuration of ADC parameters if previous preliminary actions are      */
	/* correctly completed.                                                     */
	if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	f003 0310 	and.w	r3, r3, #16
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 8099 	bne.w	8002a62 <HAL_ADC_Init+0x18e>
			&& (tmp_hal_status == HAL_OK)) {
 8002930:	7dfb      	ldrb	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	f040 8095 	bne.w	8002a62 <HAL_ADC_Init+0x18e>
		/* Set ADC state */
		ADC_STATE_CLR_SET(hadc->State,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002940:	f023 0302 	bic.w	r3, r3, #2
 8002944:	f043 0202 	orr.w	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
		/*  - continuous conversion mode                                          */
		/* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
		/*       HAL_ADC_Start_xxx functions because if set in this function,     */
		/*       a conversion on injected group would start a conversion also on  */
		/*       regular group after ADC enabling.                                */
		tmp_cr2 |= (hadc->Init.DataAlign
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685a      	ldr	r2, [r3, #4]
				| ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	69db      	ldr	r3, [r3, #28]
 8002954:	431a      	orrs	r2, r3
				| ADC_CR2_CONTINUOUS((uint32_t )hadc->Init.ContinuousConvMode));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7b1b      	ldrb	r3, [r3, #12]
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4313      	orrs	r3, r2
		tmp_cr2 |= (hadc->Init.DataAlign
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]

		/* Configuration of ADC:                                                  */
		/*  - scan mode                                                           */
		/*  - discontinuous mode disable/enable                                   */
		/*  - discontinuous mode number of conversions                            */
		tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800296c:	d003      	beq.n	8002976 <HAL_ADC_Init+0xa2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d102      	bne.n	800297c <HAL_ADC_Init+0xa8>
 8002976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800297a:	e000      	b.n	800297e <HAL_ADC_Init+0xaa>
 800297c:	2300      	movs	r3, #0
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]

		/* Enable discontinuous mode only if continuous mode is disabled */
		/* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
		/*       discontinuous is set anyway, but will have no effect on ADC HW.  */
		if (hadc->Init.DiscontinuousConvMode == ENABLE) {
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	7d1b      	ldrb	r3, [r3, #20]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d119      	bne.n	80029c0 <HAL_ADC_Init+0xec>
			if (hadc->Init.ContinuousConvMode == DISABLE) {
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7b1b      	ldrb	r3, [r3, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_ADC_Init+0xd4>
				/* Enable the selected ADC regular discontinuous mode */
				/* Set the number of channels to be converted in discontinuous mode */
				SET_BIT(tmp_cr1,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	3b01      	subs	r3, #1
 800299a:	035a      	lsls	r2, r3, #13
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	e00b      	b.n	80029c0 <HAL_ADC_Init+0xec>
			} else {
				/* ADC regular group settings continuous and sequencer discontinuous*/
				/* cannot be enabled simultaneously.                                */

				/* Update ADC state machine to error */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ac:	f043 0220 	orr.w	r2, r3, #32
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28

				/* Set ADC error code to ADC IP internal error */
				SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	f043 0201 	orr.w	r2, r3, #1
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}

		/* Update ADC configuration register CR1 with previous settings */
		MODIFY_REG(hadc->Instance->CR1,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	693a      	ldr	r2, [r7, #16]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
				ADC_CR1_SCAN | ADC_CR1_DISCEN | ADC_CR1_DISCNUM, tmp_cr1);

		/* Update ADC configuration register CR2 with previous settings */
		MODIFY_REG(hadc->Instance->CR2,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_ADC_Init+0x1a8>)
 80029dc:	4013      	ands	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	430b      	orrs	r3, r1
 80029e6:	6093      	str	r3, [r2, #8]
		/*   Note: Scan mode is present by hardware on this device and, if        */
		/*   disabled, discards automatically nb of conversions. Anyway, nb of    */
		/*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
		/* - if scan mode is enabled, regular channels sequence length is set to  */
		/*   parameter "NbrOfConversion"                                          */
		if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE) {
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d003      	beq.n	80029fa <HAL_ADC_Init+0x126>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d104      	bne.n	8002a04 <HAL_ADC_Init+0x130>
			tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	051b      	lsls	r3, r3, #20
 8002a02:	60fb      	str	r3, [r7, #12]
		}

		MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, tmp_sqr1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
		/* ensure of no potential problem of ADC core IP clocking.                */
		/* Check through register CR2 (excluding bits set in other functions:     */
		/* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
		/* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
		/* measurement path bit (TSVREFE).                                        */
		if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689a      	ldr	r2, [r3, #8]
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <HAL_ADC_Init+0x1ac>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10b      	bne.n	8002a40 <HAL_ADC_Init+0x16c>
						ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
						ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
						ADC_CR2_TSVREFE )) == tmp_cr2) {
			/* Set ADC error code to none */
			ADC_CLEAR_ERRORCODE(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c

			/* Set the ADC state */
			ADC_STATE_CLR_SET(hadc->State,
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a32:	f023 0303 	bic.w	r3, r3, #3
 8002a36:	f043 0201 	orr.w	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	629a      	str	r2, [r3, #40]	; 0x28
		if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a3e:	e018      	b.n	8002a72 <HAL_ADC_Init+0x19e>
					HAL_ADC_STATE_BUSY_INTERNAL,
					HAL_ADC_STATE_READY);
		} else {
			/* Update ADC state machine to error */
			ADC_STATE_CLR_SET(hadc->State,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a44:	f023 0312 	bic.w	r3, r3, #18
 8002a48:	f043 0210 	orr.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
					HAL_ADC_STATE_BUSY_INTERNAL,
					HAL_ADC_STATE_ERROR_INTERNAL);

			/* Set ADC error code to ADC IP internal error */
			SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	62da      	str	r2, [r3, #44]	; 0x2c

			tmp_hal_status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	75fb      	strb	r3, [r7, #23]
		if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a60:	e007      	b.n	8002a72 <HAL_ADC_Init+0x19e>
		}

	} else {
		/* Update ADC state machine to error */
		SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	f043 0210 	orr.w	r2, r3, #16
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	629a      	str	r2, [r3, #40]	; 0x28

		tmp_hal_status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	75fb      	strb	r3, [r7, #23]
	}

	/* Return function status */
	return tmp_hal_status;
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	ffe1f7fd 	.word	0xffe1f7fd
 8002a80:	ff1f0efe 	.word	0xff1f0efe

08002a84 <HAL_ADC_ConfigChannel>:
 * @param  hadc: ADC handle
 * @param  sConfig: Structure of ADC channel for regular group.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_ChannelConfTypeDef *sConfig) {
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	73fb      	strb	r3, [r7, #15]
	__IO uint32_t wait_loop_index = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
	assert_param(IS_ADC_CHANNEL(sConfig->Channel));
	assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
	assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

	/* Process locked */
	__HAL_LOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x20>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e0dc      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x1da>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Regular sequence configuration */
	/* For Rank 1 to 6 */
	if (sConfig->Rank < 7U) {
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b06      	cmp	r3, #6
 8002ab2:	d81c      	bhi.n	8002aee <HAL_ADC_ConfigChannel+0x6a>
		MODIFY_REG(hadc->Instance->SQR3,
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3b05      	subs	r3, #5
 8002ac6:	221f      	movs	r2, #31
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	43db      	mvns	r3, r3
 8002ace:	4019      	ands	r1, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	685a      	ldr	r2, [r3, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	3b05      	subs	r3, #5
 8002ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
 8002aec:	e03c      	b.n	8002b68 <HAL_ADC_ConfigChannel+0xe4>
				ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank),
				ADC_SQR3_RK(sConfig->Channel, sConfig->Rank));
	}
	/* For Rank 7 to 12 */
	else if (sConfig->Rank < 13U) {
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d81c      	bhi.n	8002b30 <HAL_ADC_ConfigChannel+0xac>
		MODIFY_REG(hadc->Instance->SQR2,
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	3b23      	subs	r3, #35	; 0x23
 8002b08:	221f      	movs	r2, #31
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	4019      	ands	r1, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	fa00 f203 	lsl.w	r2, r0, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
 8002b2e:	e01b      	b.n	8002b68 <HAL_ADC_ConfigChannel+0xe4>
				ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank),
				ADC_SQR2_RK(sConfig->Channel, sConfig->Rank));
	}
	/* For Rank 13 to 16 */
	else {
		MODIFY_REG(hadc->Instance->SQR1,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	3b41      	subs	r3, #65	; 0x41
 8002b42:	221f      	movs	r2, #31
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4019      	ands	r1, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b41      	subs	r3, #65	; 0x41
 8002b5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	62da      	str	r2, [r3, #44]	; 0x2c
				ADC_SQR1_RK(sConfig->Channel, sConfig->Rank));
	}

	/* Channel sampling time configuration */
	/* For channels 10 to 17 */
	if (sConfig->Channel >= ADC_CHANNEL_10) {
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b09      	cmp	r3, #9
 8002b6e:	d91c      	bls.n	8002baa <HAL_ADC_ConfigChannel+0x126>
		MODIFY_REG(hadc->Instance->SMPR1,
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68d9      	ldr	r1, [r3, #12]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b1e      	subs	r3, #30
 8002b82:	2207      	movs	r2, #7
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	4019      	ands	r1, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6898      	ldr	r0, [r3, #8]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	4413      	add	r3, r2
 8002b9a:	3b1e      	subs	r3, #30
 8002b9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	e019      	b.n	8002bde <HAL_ADC_ConfigChannel+0x15a>
				ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel),
				ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel));
	} else /* For channels 0 to 9 */
	{
		MODIFY_REG(hadc->Instance->SMPR2,
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6919      	ldr	r1, [r3, #16]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	4413      	add	r3, r2
 8002bba:	2207      	movs	r2, #7
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	4019      	ands	r1, r3
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6898      	ldr	r0, [r3, #8]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	611a      	str	r2, [r3, #16]
				ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel));
	}

	/* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
	/* and VREFINT measurement path.                                            */
	if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b10      	cmp	r3, #16
 8002be4:	d003      	beq.n	8002bee <HAL_ADC_ConfigChannel+0x16a>
			|| (sConfig->Channel == ADC_CHANNEL_VREFINT)) {
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b11      	cmp	r3, #17
 8002bec:	d132      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
		/* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
		/* measurement channels (VrefInt/TempSensor). If these channels are       */
		/* intended to be set on other ADC instances, an error is reported.       */
		if (hadc->Instance == ADC1) {
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_ADC_ConfigChannel+0x1e4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d125      	bne.n	8002c44 <HAL_ADC_ConfigChannel+0x1c0>
			if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d126      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
				SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c14:	609a      	str	r2, [r3, #8]

				if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) {
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d11a      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
					/* Delay for temperature sensor stabilization time */
					/* Compute number of CPU cycles to wait for */
					wait_loop_index = (ADC_TEMPSENSOR_DELAY_US
							* (SystemCoreClock / 1000000U));
 8002c1e:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <HAL_ADC_ConfigChannel+0x1e8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <HAL_ADC_ConfigChannel+0x1ec>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	0c9a      	lsrs	r2, r3, #18
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	005b      	lsls	r3, r3, #1
					wait_loop_index = (ADC_TEMPSENSOR_DELAY_US
 8002c32:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0U) {
 8002c34:	e002      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x1b8>
						wait_loop_index--;
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
					while (wait_loop_index != 0U) {
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1f9      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x1b2>
 8002c42:	e007      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x1d0>
					}
				}
			}
		} else {
			/* Update ADC state machine to error */
			SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	f043 0220 	orr.w	r2, r3, #32
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

			tmp_hal_status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
		}
	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	/* Return function status */
	return tmp_hal_status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	40012400 	.word	0x40012400
 8002c6c:	20000014 	.word	0x20000014
 8002c70:	431bde83 	.word	0x431bde83

08002c74 <ADC_ConversionStop_Disable>:
 * @note   Prerequisite condition to use this function: ADC conversions must be
 *         stopped to disable the ADC.
 * @param  hadc: ADC handle
 * @retval HAL status.
 */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef *hadc) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60fb      	str	r3, [r7, #12]

	/* Verification if ADC is not already disabled */
	if (ADC_IS_ENABLE(hadc) != RESET) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d12e      	bne.n	8002cec <ADC_ConversionStop_Disable+0x78>
		/* Disable the ADC peripheral */
		__HAL_ADC_DISABLE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0201 	bic.w	r2, r2, #1
 8002c9c:	609a      	str	r2, [r3, #8]

		/* Get tick count */
		tickstart = HAL_GetTick();
 8002c9e:	f7ff fdeb 	bl	8002878 <HAL_GetTick>
 8002ca2:	60f8      	str	r0, [r7, #12]

		/* Wait for ADC effectively disabled */
		while (ADC_IS_ENABLE(hadc) != RESET) {
 8002ca4:	e01b      	b.n	8002cde <ADC_ConversionStop_Disable+0x6a>
			if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT) {
 8002ca6:	f7ff fde7 	bl	8002878 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d914      	bls.n	8002cde <ADC_ConversionStop_Disable+0x6a>
				/* New check to avoid false timeout detection in case of preemption */
				if (ADC_IS_ENABLE(hadc) != RESET) {
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d10d      	bne.n	8002cde <ADC_ConversionStop_Disable+0x6a>
					/* Update ADC state machine to error */
					SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	f043 0210 	orr.w	r2, r3, #16
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	629a      	str	r2, [r3, #40]	; 0x28

					/* Set ADC error code to ADC IP internal error */
					SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd2:	f043 0201 	orr.w	r2, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	62da      	str	r2, [r3, #44]	; 0x2c

					return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e007      	b.n	8002cee <ADC_ConversionStop_Disable+0x7a>
		while (ADC_IS_ENABLE(hadc) != RESET) {
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d0dc      	beq.n	8002ca6 <ADC_ConversionStop_Disable+0x32>
			}
		}
	}

	/* Return HAL status */
	return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
	...

08002cf8 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
	}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bc80      	pop	{r7}
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8002d74:	4906      	ldr	r1, [pc, #24]	; (8002d90 <__NVIC_EnableIRQ+0x34>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	e000e100 	.word	0xe000e100

08002d94 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	6039      	str	r1, [r7, #0]
 8002d9e:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8002da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	db0a      	blt.n	8002dbe <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	b2da      	uxtb	r2, r3
 8002dac:	490c      	ldr	r1, [pc, #48]	; (8002de0 <__NVIC_SetPriority+0x4c>)
 8002dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db2:	0112      	lsls	r2, r2, #4
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	440b      	add	r3, r1
 8002db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8002dbc:	e00a      	b.n	8002dd4 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	4908      	ldr	r1, [pc, #32]	; (8002de4 <__NVIC_SetPriority+0x50>)
 8002dc4:	79fb      	ldrb	r3, [r7, #7]
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	3b04      	subs	r3, #4
 8002dcc:	0112      	lsls	r2, r2, #4
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	761a      	strb	r2, [r3, #24]
	}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8002de8:	b480      	push	{r7}
 8002dea:	b089      	sub	sp, #36	; 0x24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f003 0307 	and.w	r3, r3, #7
 8002dfa:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	bf28      	it	cs
 8002e06:	2304      	movcs	r3, #4
 8002e08:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8002e0e:	2b06      	cmp	r3, #6
 8002e10:	d902      	bls.n	8002e18 <NVIC_EncodePriority+0x30>
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3b03      	subs	r3, #3
 8002e16:	e000      	b.n	8002e1a <NVIC_EncodePriority+0x32>
 8002e18:	2300      	movs	r3, #0
		SubPriorityBits =
 8002e1a:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8002e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	fa02 f303 	lsl.w	r3, r2, r3
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8002e30:	f04f 31ff 	mov.w	r1, #4294967295
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3a:	43d9      	mvns	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	400b      	ands	r3, r1
 8002e40:	4313      	orrs	r3, r2
	}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3724      	adds	r7, #36	; 0x24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e5c:	d301      	bcc.n	8002e62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e00f      	b.n	8002e82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <SysTick_Config+0x40>)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e6a:	210f      	movs	r1, #15
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e70:	f7ff ff90 	bl	8002d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <SysTick_Config+0x40>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <SysTick_Config+0x40>)
 8002e7c:	2207      	movs	r2, #7
 8002e7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	e000e010 	.word	0xe000e010

08002e90 <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff ff2d 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	60b9      	str	r1, [r7, #8]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8002eb8:	f7ff ff42 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ebc:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	6978      	ldr	r0, [r7, #20]
 8002ec4:	f7ff ff90 	bl	8002de8 <NVIC_EncodePriority>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff ff5f 	bl	8002d94 <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002ed6:	bf00      	nop
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <HAL_NVIC_EnableIRQ>:
 * @param  IRQn External interrupt number.
 *         This parameter can be an enumerator of IRQn_Type enumeration
 *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
 * @retval None
 */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn) {
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b082      	sub	sp, #8
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	71fb      	strb	r3, [r7, #7]
	/* Check the parameters */
	assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

	/* Enable interrupt */
	NVIC_EnableIRQ(IRQn);
 8002ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff ff35 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b082      	sub	sp, #8
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff ffa2 	bl	8002e4c <SysTick_Config>
 8002f08:	4603      	mov	r3, r0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_GPIO_Init>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8002f14:	b480      	push	{r7}
 8002f16:	b08b      	sub	sp, #44	; 0x2c
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ioposition;
	uint32_t iocurrent;
	uint32_t temp;
	uint32_t config = 0x00u;
 8002f22:	2300      	movs	r3, #0
 8002f24:	623b      	str	r3, [r7, #32]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 8002f26:	e169      	b.n	80031fc <HAL_GPIO_Init+0x2e8>
		/* Get the IO position */
		ioposition = (0x01uL << position);
 8002f28:	2201      	movs	r2, #1
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	61fb      	str	r3, [r7, #28]

		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	61bb      	str	r3, [r7, #24]

		if (iocurrent == ioposition) {
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	f040 8158 	bne.w	80031f6 <HAL_GPIO_Init+0x2e2>
			/* Check the Alternate function parameters */
			assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

			/* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
			switch (GPIO_Init->Mode) {
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	4a9a      	ldr	r2, [pc, #616]	; (80031b4 <HAL_GPIO_Init+0x2a0>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d05e      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f50:	4a98      	ldr	r2, [pc, #608]	; (80031b4 <HAL_GPIO_Init+0x2a0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d875      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f56:	4a98      	ldr	r2, [pc, #608]	; (80031b8 <HAL_GPIO_Init+0x2a4>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d058      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f5c:	4a96      	ldr	r2, [pc, #600]	; (80031b8 <HAL_GPIO_Init+0x2a4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d86f      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f62:	4a96      	ldr	r2, [pc, #600]	; (80031bc <HAL_GPIO_Init+0x2a8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d052      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f68:	4a94      	ldr	r2, [pc, #592]	; (80031bc <HAL_GPIO_Init+0x2a8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d869      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f6e:	4a94      	ldr	r2, [pc, #592]	; (80031c0 <HAL_GPIO_Init+0x2ac>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d04c      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f74:	4a92      	ldr	r2, [pc, #584]	; (80031c0 <HAL_GPIO_Init+0x2ac>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d863      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f7a:	4a92      	ldr	r2, [pc, #584]	; (80031c4 <HAL_GPIO_Init+0x2b0>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d046      	beq.n	800300e <HAL_GPIO_Init+0xfa>
 8002f80:	4a90      	ldr	r2, [pc, #576]	; (80031c4 <HAL_GPIO_Init+0x2b0>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d85d      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f86:	2b12      	cmp	r3, #18
 8002f88:	d82a      	bhi.n	8002fe0 <HAL_GPIO_Init+0xcc>
 8002f8a:	2b12      	cmp	r3, #18
 8002f8c:	d859      	bhi.n	8003042 <HAL_GPIO_Init+0x12e>
 8002f8e:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <HAL_GPIO_Init+0x80>)
 8002f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f94:	0800300f 	.word	0x0800300f
 8002f98:	08002fe9 	.word	0x08002fe9
 8002f9c:	08002ffb 	.word	0x08002ffb
 8002fa0:	0800303d 	.word	0x0800303d
 8002fa4:	08003043 	.word	0x08003043
 8002fa8:	08003043 	.word	0x08003043
 8002fac:	08003043 	.word	0x08003043
 8002fb0:	08003043 	.word	0x08003043
 8002fb4:	08003043 	.word	0x08003043
 8002fb8:	08003043 	.word	0x08003043
 8002fbc:	08003043 	.word	0x08003043
 8002fc0:	08003043 	.word	0x08003043
 8002fc4:	08003043 	.word	0x08003043
 8002fc8:	08003043 	.word	0x08003043
 8002fcc:	08003043 	.word	0x08003043
 8002fd0:	08003043 	.word	0x08003043
 8002fd4:	08003043 	.word	0x08003043
 8002fd8:	08002ff1 	.word	0x08002ff1
 8002fdc:	08003005 	.word	0x08003005
 8002fe0:	4a79      	ldr	r2, [pc, #484]	; (80031c8 <HAL_GPIO_Init+0x2b4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0xfa>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
				break;

				/* Parameters are checked with assert_param */
			default:
				break;
 8002fe6:	e02c      	b.n	8003042 <HAL_GPIO_Init+0x12e>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	623b      	str	r3, [r7, #32]
				break;
 8002fee:	e029      	b.n	8003044 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	623b      	str	r3, [r7, #32]
				break;
 8002ff8:	e024      	b.n	8003044 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	3308      	adds	r3, #8
 8003000:	623b      	str	r3, [r7, #32]
				break;
 8003002:	e01f      	b.n	8003044 <HAL_GPIO_Init+0x130>
				config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	330c      	adds	r3, #12
 800300a:	623b      	str	r3, [r7, #32]
				break;
 800300c:	e01a      	b.n	8003044 <HAL_GPIO_Init+0x130>
				if (GPIO_Init->Pull == GPIO_NOPULL) {
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d102      	bne.n	800301c <HAL_GPIO_Init+0x108>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003016:	2304      	movs	r3, #4
 8003018:	623b      	str	r3, [r7, #32]
				break;
 800301a:	e013      	b.n	8003044 <HAL_GPIO_Init+0x130>
				} else if (GPIO_Init->Pull == GPIO_PULLUP) {
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_GPIO_Init+0x11c>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003024:	2308      	movs	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
					GPIOx->BSRR = ioposition;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	611a      	str	r2, [r3, #16]
				break;
 800302e:	e009      	b.n	8003044 <HAL_GPIO_Init+0x130>
					config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003030:	2308      	movs	r3, #8
 8003032:	623b      	str	r3, [r7, #32]
					GPIOx->BRR = ioposition;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	615a      	str	r2, [r3, #20]
				break;
 800303a:	e003      	b.n	8003044 <HAL_GPIO_Init+0x130>
				config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800303c:	2300      	movs	r3, #0
 800303e:	623b      	str	r3, [r7, #32]
				break;
 8003040:	e000      	b.n	8003044 <HAL_GPIO_Init+0x130>
				break;
 8003042:	bf00      	nop
			}

			/* Check if the current bit belongs to first half or last half of the pin count number
			 in order to address CRH or CRL register*/
			configregister =
					(iocurrent < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	2bff      	cmp	r3, #255	; 0xff
 8003048:	d801      	bhi.n	800304e <HAL_GPIO_Init+0x13a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	e001      	b.n	8003052 <HAL_GPIO_Init+0x13e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3304      	adds	r3, #4
			configregister =
 8003052:	617b      	str	r3, [r7, #20]
			registeroffset =
					(iocurrent < GPIO_PIN_8) ?
							(position << 2u) : ((position - 8u) << 2u);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2bff      	cmp	r3, #255	; 0xff
 8003058:	d802      	bhi.n	8003060 <HAL_GPIO_Init+0x14c>
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	e002      	b.n	8003066 <HAL_GPIO_Init+0x152>
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	3b08      	subs	r3, #8
 8003064:	009b      	lsls	r3, r3, #2
			registeroffset =
 8003066:	613b      	str	r3, [r7, #16]

			/* Apply the new configuration of the pin to the register */
			MODIFY_REG((*configregister),
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	210f      	movs	r1, #15
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	401a      	ands	r2, r3
 8003078:	6a39      	ldr	r1, [r7, #32]
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	431a      	orrs	r2, r3
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	601a      	str	r2, [r3, #0]
					((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset),
					(config << registeroffset));

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80b1 	beq.w	80031f6 <HAL_GPIO_Init+0x2e2>
				/* Enable AFIO Clock */
				__HAL_RCC_AFIO_CLK_ENABLE();
 8003094:	4b4d      	ldr	r3, [pc, #308]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	4a4c      	ldr	r2, [pc, #304]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6193      	str	r3, [r2, #24]
 80030a0:	4b4a      	ldr	r3, [pc, #296]	; (80031cc <HAL_GPIO_Init+0x2b8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
				temp = AFIO->EXTICR[position >> 2u];
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2bc>)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	089b      	lsrs	r3, r3, #2
 80030b2:	3302      	adds	r3, #2
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	60fb      	str	r3, [r7, #12]
				CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	f003 0303 	and.w	r3, r3, #3
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	220f      	movs	r2, #15
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	4013      	ands	r3, r2
 80030ce:	60fb      	str	r3, [r7, #12]
				SET_BIT(temp,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a40      	ldr	r2, [pc, #256]	; (80031d4 <HAL_GPIO_Init+0x2c0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d013      	beq.n	8003100 <HAL_GPIO_Init+0x1ec>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a3f      	ldr	r2, [pc, #252]	; (80031d8 <HAL_GPIO_Init+0x2c4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00d      	beq.n	80030fc <HAL_GPIO_Init+0x1e8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a3e      	ldr	r2, [pc, #248]	; (80031dc <HAL_GPIO_Init+0x2c8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <HAL_GPIO_Init+0x1e4>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <HAL_GPIO_Init+0x2cc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_GPIO_Init+0x1e0>
 80030f0:	2303      	movs	r3, #3
 80030f2:	e006      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030f4:	2304      	movs	r3, #4
 80030f6:	e004      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_GPIO_Init+0x1ee>
 8003100:	2300      	movs	r3, #0
 8003102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003104:	f002 0203 	and.w	r2, r2, #3
 8003108:	0092      	lsls	r2, r2, #2
 800310a:	4093      	lsls	r3, r2
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
						(GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
				AFIO->EXTICR[position >> 2u] = temp;
 8003112:	492f      	ldr	r1, [pc, #188]	; (80031d0 <HAL_GPIO_Init+0x2bc>)
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	089b      	lsrs	r3, r3, #2
 8003118:	3302      	adds	r3, #2
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Enable or disable the rising trigger */
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <HAL_GPIO_Init+0x226>
					SET_BIT(EXTI->RTSR, iocurrent);
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	492c      	ldr	r1, [pc, #176]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	608b      	str	r3, [r1, #8]
 8003138:	e006      	b.n	8003148 <HAL_GPIO_Init+0x234>
				} else {
					CLEAR_BIT(EXTI->RTSR, iocurrent);
 800313a:	4b2a      	ldr	r3, [pc, #168]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800313c:	689a      	ldr	r2, [r3, #8]
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	43db      	mvns	r3, r3
 8003142:	4928      	ldr	r1, [pc, #160]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003144:	4013      	ands	r3, r2
 8003146:	608b      	str	r3, [r1, #8]
				}

				/* Enable or disable the falling trigger */
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d006      	beq.n	8003162 <HAL_GPIO_Init+0x24e>
					SET_BIT(EXTI->FTSR, iocurrent);
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e006      	b.n	8003170 <HAL_GPIO_Init+0x25c>
				} else {
					CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	43db      	mvns	r3, r3
 800316a:	491e      	ldr	r1, [pc, #120]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800316c:	4013      	ands	r3, r2
 800316e:	60cb      	str	r3, [r1, #12]
				}

				/* Configure the event mask */
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <HAL_GPIO_Init+0x276>
					SET_BIT(EXTI->EMR, iocurrent);
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800317e:	685a      	ldr	r2, [r3, #4]
 8003180:	4918      	ldr	r1, [pc, #96]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	4313      	orrs	r3, r2
 8003186:	604b      	str	r3, [r1, #4]
 8003188:	e006      	b.n	8003198 <HAL_GPIO_Init+0x284>
				} else {
					CLEAR_BIT(EXTI->EMR, iocurrent);
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	43db      	mvns	r3, r3
 8003192:	4914      	ldr	r1, [pc, #80]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 8003194:	4013      	ands	r3, r2
 8003196:	604b      	str	r3, [r1, #4]
				}

				/* Configure the interrupt mask */
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d021      	beq.n	80031e8 <HAL_GPIO_Init+0x2d4>
					SET_BIT(EXTI->IMR, iocurrent);
 80031a4:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	490e      	ldr	r1, [pc, #56]	; (80031e4 <HAL_GPIO_Init+0x2d0>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]
 80031b0:	e021      	b.n	80031f6 <HAL_GPIO_Init+0x2e2>
 80031b2:	bf00      	nop
 80031b4:	10320000 	.word	0x10320000
 80031b8:	10310000 	.word	0x10310000
 80031bc:	10220000 	.word	0x10220000
 80031c0:	10210000 	.word	0x10210000
 80031c4:	10120000 	.word	0x10120000
 80031c8:	10110000 	.word	0x10110000
 80031cc:	40021000 	.word	0x40021000
 80031d0:	40010000 	.word	0x40010000
 80031d4:	40010800 	.word	0x40010800
 80031d8:	40010c00 	.word	0x40010c00
 80031dc:	40011000 	.word	0x40011000
 80031e0:	40011400 	.word	0x40011400
 80031e4:	40010400 	.word	0x40010400
				} else {
					CLEAR_BIT(EXTI->IMR, iocurrent);
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	4909      	ldr	r1, [pc, #36]	; (8003218 <HAL_GPIO_Init+0x304>)
 80031f2:	4013      	ands	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
				}
			}
		}

		position++;
 80031f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f8:	3301      	adds	r3, #1
 80031fa:	627b      	str	r3, [r7, #36]	; 0x24
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003202:	fa22 f303 	lsr.w	r3, r2, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	f47f ae8e 	bne.w	8002f28 <HAL_GPIO_Init+0x14>
	}
}
 800320c:	bf00      	nop
 800320e:	bf00      	nop
 8003210:	372c      	adds	r7, #44	; 0x2c
 8003212:	46bd      	mov	sp, r7
 8003214:	bc80      	pop	{r7}
 8003216:	4770      	bx	lr
 8003218:	40010400 	.word	0x40010400

0800321c <HAL_GPIO_ReadPin>:
 * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
 * @param  GPIO_Pin: specifies the port bit to read.
 *         This parameter can be GPIO_PIN_x where x can be (0..15).
 * @retval The input port pin value.
 */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
	GPIO_PinState bitstatus;

	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));

	if ((GPIOx->IDR & GPIO_Pin) != (uint32_t) GPIO_PIN_RESET) {
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	887b      	ldrh	r3, [r7, #2]
 800322e:	4013      	ands	r3, r2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <HAL_GPIO_ReadPin+0x1e>
		bitstatus = GPIO_PIN_SET;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
 8003238:	e001      	b.n	800323e <HAL_GPIO_ReadPin+0x22>
	} else {
		bitstatus = GPIO_PIN_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus;
 800323e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	bc80      	pop	{r7}
 8003248:	4770      	bx	lr

0800324a <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 800324a:	b480      	push	{r7}
 800324c:	b083      	sub	sp, #12
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	807b      	strh	r3, [r7, #2]
 8003256:	4613      	mov	r3, r2
 8003258:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 800325a:	787b      	ldrb	r3, [r7, #1]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8003260:	887a      	ldrh	r2, [r7, #2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	611a      	str	r2, [r3, #16]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
	}
}
 8003266:	e003      	b.n	8003270 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16u;
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	041a      	lsls	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	611a      	str	r2, [r3, #16]
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr
	...

0800327c <HAL_GPIO_EXTI_IRQHandler>:
/**
 * @brief  This function handles EXTI interrupt request.
 * @param  GPIO_Pin: Specifies the pins connected EXTI line
 * @retval None
 */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
	/* EXTI line interrupt detected */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u) {
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003288:	695a      	ldr	r2, [r3, #20]
 800328a:	88fb      	ldrh	r3, [r7, #6]
 800328c:	4013      	ands	r3, r2
 800328e:	2b00      	cmp	r3, #0
 8003290:	d006      	beq.n	80032a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	88fb      	ldrh	r3, [r7, #6]
 8003296:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fe f824 	bl	80012e8 <HAL_GPIO_EXTI_Callback>
	}
}
 80032a0:	bf00      	nop
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40010400 	.word	0x40010400

080032ac <HAL_I2C_Init>:
 *         in the I2C_InitTypeDef and initialize the associated handle.
 * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
 *                the configuration information for the specified I2C.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
	uint32_t freqrange;
	uint32_t pclk1;

	/* Check the I2C handle allocation */
	if (hi2c == NULL) {
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_I2C_Init+0x12>
		return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e12b      	b.n	8003516 <HAL_I2C_Init+0x26a>
	assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
	assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
	assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
	assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

	if (hi2c->State == HAL_I2C_STATE_RESET) {
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d106      	bne.n	80032d8 <HAL_I2C_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hi2c->Lock = HAL_UNLOCKED;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_I2C_MspInit(hi2c);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff f8a8 	bl	8002428 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
	}

	hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Disable the selected I2C peripheral */
	__HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

	/*Reset I2C*/
	hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032fe:	601a      	str	r2, [r3, #0]
	hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800330e:	601a      	str	r2, [r3, #0]

	/* Get PCLK1 frequency */
	pclk1 = HAL_RCC_GetPCLK1Freq();
 8003310:	f000 fce6 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8003314:	60f8      	str	r0, [r7, #12]

	/* Check the minimum allowed PCLK1 frequency */
	if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U) {
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4a81      	ldr	r2, [pc, #516]	; (8003520 <HAL_I2C_Init+0x274>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d807      	bhi.n	8003330 <HAL_I2C_Init+0x84>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	4a80      	ldr	r2, [pc, #512]	; (8003524 <HAL_I2C_Init+0x278>)
 8003324:	4293      	cmp	r3, r2
 8003326:	bf94      	ite	ls
 8003328:	2301      	movls	r3, #1
 800332a:	2300      	movhi	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e006      	b.n	800333e <HAL_I2C_Init+0x92>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	4a7d      	ldr	r2, [pc, #500]	; (8003528 <HAL_I2C_Init+0x27c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	bf94      	ite	ls
 8003338:	2301      	movls	r3, #1
 800333a:	2300      	movhi	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_I2C_Init+0x9a>
		return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e0e7      	b.n	8003516 <HAL_I2C_Init+0x26a>
	}

	/* Calculate frequency range */
	freqrange = I2C_FREQRANGE(pclk1);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	4a78      	ldr	r2, [pc, #480]	; (800352c <HAL_I2C_Init+0x280>)
 800334a:	fba2 2303 	umull	r2, r3, r2, r3
 800334e:	0c9b      	lsrs	r3, r3, #18
 8003350:	60bb      	str	r3, [r7, #8]

	/*---------------------------- I2Cx CR2 Configuration ----------------------*/
	/* Configure I2Cx: Frequency range */
	MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]

	/*---------------------------- I2Cx TRISE Configuration --------------------*/
	/* Configure I2Cx: Rise Time */
	MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a6a      	ldr	r2, [pc, #424]	; (8003520 <HAL_I2C_Init+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d802      	bhi.n	8003380 <HAL_I2C_Init+0xd4>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	3301      	adds	r3, #1
 800337e:	e009      	b.n	8003394 <HAL_I2C_Init+0xe8>
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003386:	fb02 f303 	mul.w	r3, r2, r3
 800338a:	4a69      	ldr	r2, [pc, #420]	; (8003530 <HAL_I2C_Init+0x284>)
 800338c:	fba2 2303 	umull	r2, r3, r2, r3
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	3301      	adds	r3, #1
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	430b      	orrs	r3, r1
 800339a:	6213      	str	r3, [r2, #32]
			I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

	/*---------------------------- I2Cx CCR Configuration ----------------------*/
	/* Configure I2Cx: Speed */
	MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR),
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	495c      	ldr	r1, [pc, #368]	; (8003520 <HAL_I2C_Init+0x274>)
 80033b0:	428b      	cmp	r3, r1
 80033b2:	d819      	bhi.n	80033e8 <HAL_I2C_Init+0x13c>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e59      	subs	r1, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fbb1 f3f3 	udiv	r3, r1, r3
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033c8:	400b      	ands	r3, r1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_I2C_Init+0x138>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e59      	subs	r1, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e2:	e051      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e4:	2304      	movs	r3, #4
 80033e6:	e04f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d111      	bne.n	8003414 <HAL_I2C_Init+0x168>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	e012      	b.n	800343a <HAL_I2C_Init+0x18e>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1e58      	subs	r0, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6859      	ldr	r1, [r3, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	0099      	lsls	r1, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	fbb0 f3f3 	udiv	r3, r0, r3
 800342a:	3301      	adds	r3, #1
 800342c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003430:	2b00      	cmp	r3, #0
 8003432:	bf0c      	ite	eq
 8003434:	2301      	moveq	r3, #1
 8003436:	2300      	movne	r3, #0
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <HAL_I2C_Init+0x196>
 800343e:	2301      	movs	r3, #1
 8003440:	e022      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10e      	bne.n	8003468 <HAL_I2C_Init+0x1bc>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	1e58      	subs	r0, r3, #1
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6859      	ldr	r1, [r3, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	440b      	add	r3, r1
 8003458:	fbb0 f3f3 	udiv	r3, r0, r3
 800345c:	3301      	adds	r3, #1
 800345e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003462:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003466:	e00f      	b.n	8003488 <HAL_I2C_Init+0x1dc>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	1e58      	subs	r0, r3, #1
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	0099      	lsls	r1, r3, #2
 8003478:	440b      	add	r3, r1
 800347a:	fbb0 f3f3 	udiv	r3, r0, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003484:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003488:	6879      	ldr	r1, [r7, #4]
 800348a:	6809      	ldr	r1, [r1, #0]
 800348c:	4313      	orrs	r3, r2
 800348e:	61cb      	str	r3, [r1, #28]
			I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));

	/*---------------------------- I2Cx CR1 Configuration ----------------------*/
	/* Configure I2Cx: Generalcall and NoStretch mode */
	MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH),
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69da      	ldr	r2, [r3, #28]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	601a      	str	r2, [r3, #0]
			(hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));

	/*---------------------------- I2Cx OAR1 Configuration ---------------------*/
	/* Configure I2Cx: Own Address1 and addressing mode */
	MODIFY_REG(hi2c->Instance->OAR1,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6911      	ldr	r1, [r2, #16]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	68d2      	ldr	r2, [r2, #12]
 80034c2:	4311      	orrs	r1, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6093      	str	r3, [r2, #8]
			(I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0),
			(hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));

	/*---------------------------- I2Cx OAR2 Configuration ---------------------*/
	/* Configure I2Cx: Dual mode and Own Address2 */
	MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2),
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695a      	ldr	r2, [r3, #20]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	60da      	str	r2, [r3, #12]
			(hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));

	/* Enable the selected I2C peripheral */
	__HAL_I2C_ENABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

	hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	641a      	str	r2, [r3, #64]	; 0x40
	hi2c->State = HAL_I2C_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	hi2c->PreviousState = I2C_STATE_NONE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	631a      	str	r2, [r3, #48]	; 0x30
	hi2c->Mode = HAL_I2C_MODE_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	000186a0 	.word	0x000186a0
 8003524:	001e847f 	.word	0x001e847f
 8003528:	003d08ff 	.word	0x003d08ff
 800352c:	431bde83 	.word	0x431bde83
 8003530:	10624dd3 	.word	0x10624dd3

08003534 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this macro. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d101      	bne.n	8003546 <HAL_RCC_OscConfig+0x12>
		return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e272      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 8087 	beq.w	8003662 <HAL_RCC_OscConfig+0x12e>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

		/* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003554:	4b92      	ldr	r3, [pc, #584]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b04      	cmp	r3, #4
 800355e:	d00c      	beq.n	800357a <HAL_RCC_OscConfig+0x46>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 8003560:	4b8f      	ldr	r3, [pc, #572]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 030c 	and.w	r3, r3, #12
 8003568:	2b08      	cmp	r3, #8
 800356a:	d112      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE))) {
 800356c:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d10b      	bne.n	8003592 <HAL_RCC_OscConfig+0x5e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	4b89      	ldr	r3, [pc, #548]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d06c      	beq.n	8003660 <HAL_RCC_OscConfig+0x12c>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d168      	bne.n	8003660 <HAL_RCC_OscConfig+0x12c>
				return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e24c      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359a:	d106      	bne.n	80035aa <HAL_RCC_OscConfig+0x76>
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7f      	ldr	r2, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	e02e      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10c      	bne.n	80035cc <HAL_RCC_OscConfig+0x98>
 80035b2:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a77      	ldr	r2, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035c8:	6013      	str	r3, [r2, #0]
 80035ca:	e01d      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035d4:	d10c      	bne.n	80035f0 <HAL_RCC_OscConfig+0xbc>
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a71      	ldr	r2, [pc, #452]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	4b6f      	ldr	r3, [pc, #444]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6e      	ldr	r2, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	e00b      	b.n	8003608 <HAL_RCC_OscConfig+0xd4>
 80035f0:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a6a      	ldr	r2, [pc, #424]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035fa:	6013      	str	r3, [r2, #0]
 80035fc:	4b68      	ldr	r3, [pc, #416]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a67      	ldr	r2, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003602:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003606:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d013      	beq.n	8003638 <HAL_RCC_OscConfig+0x104>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003610:	f7ff f932 	bl	8002878 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0xf6>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8003618:	f7ff f92e 	bl	8002878 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b64      	cmp	r3, #100	; 0x64
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0xf6>
						return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e200      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800362a:	4b5d      	ldr	r3, [pc, #372]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0xe4>
 8003636:	e014      	b.n	8003662 <HAL_RCC_OscConfig+0x12e>
					}
				}
			} else {
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003638:	f7ff f91e 	bl	8002878 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x11e>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8003640:	f7ff f91a 	bl	8002878 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b64      	cmp	r3, #100	; 0x64
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x11e>
						return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e1ec      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8003652:	4b53      	ldr	r3, [pc, #332]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x10c>
 800365e:	e000      	b.n	8003662 <HAL_RCC_OscConfig+0x12e>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003660:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d063      	beq.n	8003736 <HAL_RCC_OscConfig+0x202>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800366e:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_RCC_OscConfig+0x15e>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 800367a:	4b49      	ldr	r3, [pc, #292]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d11c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x18c>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& (__HAL_RCC_GET_PLL_OSCSOURCE()
 8003686:	4b46      	ldr	r3, [pc, #280]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d116      	bne.n	80036c0 <HAL_RCC_OscConfig+0x18c>
								== RCC_PLLSOURCE_HSI_DIV2))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b43      	ldr	r3, [pc, #268]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d005      	beq.n	80036aa <HAL_RCC_OscConfig+0x176>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d001      	beq.n	80036aa <HAL_RCC_OscConfig+0x176>
				return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e1c0      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80036aa:	4b3d      	ldr	r3, [pc, #244]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4939      	ldr	r1, [pc, #228]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	e03a      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF) {
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d020      	beq.n	800370a <HAL_RCC_OscConfig+0x1d6>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 80036ca:	2201      	movs	r2, #1
 80036cc:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80036ce:	f7ff f8d3 	bl	8002878 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x1b4>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 80036d6:	f7ff f8cf 	bl	8002878 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x1b4>
						return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e1a1      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 80036e8:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0f0      	beq.n	80036d6 <HAL_RCC_OscConfig+0x1a2>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80036f4:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	4927      	ldr	r1, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 8003704:	4313      	orrs	r3, r2
 8003706:	600b      	str	r3, [r1, #0]
 8003708:	e015      	b.n	8003736 <HAL_RCC_OscConfig+0x202>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 800370a:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_RCC_OscConfig+0x270>)
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003710:	f7ff f8b2 	bl	8002878 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0x1f6>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8003718:	f7ff f8ae 	bl	8002878 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0x1f6>
						return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e180      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 800372a:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f0      	bne.n	8003718 <HAL_RCC_OscConfig+0x1e4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d03a      	beq.n	80037b8 <HAL_RCC_OscConfig+0x284>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF) {
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d019      	beq.n	800377e <HAL_RCC_OscConfig+0x24a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 800374a:	4b17      	ldr	r3, [pc, #92]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 800374c:	2201      	movs	r2, #1
 800374e:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8003750:	f7ff f892 	bl	8002878 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x236>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 8003758:	f7ff f88e 	bl	8002878 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x236>
					return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e160      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x26c>)
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	f003 0302 	and.w	r3, r3, #2
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x224>
				}
			}
			/*  To have a fully stabilized clock in the specified range, a software delay of 1ms
			 should be added.*/
			RCC_Delay(1);
 8003776:	2001      	movs	r0, #1
 8003778:	f000 faee 	bl	8003d58 <RCC_Delay>
 800377c:	e01c      	b.n	80037b8 <HAL_RCC_OscConfig+0x284>
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_OscConfig+0x274>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

			/* Get Start Tick */
			tickstart = HAL_GetTick();
 8003784:	f7ff f878 	bl	8002878 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 800378a:	e00f      	b.n	80037ac <HAL_RCC_OscConfig+0x278>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 800378c:	f7ff f874 	bl	8002878 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d908      	bls.n	80037ac <HAL_RCC_OscConfig+0x278>
					return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e146      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	42420000 	.word	0x42420000
 80037a8:	42420480 	.word	0x42420480
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80037ac:	4b92      	ldr	r3, [pc, #584]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d1e9      	bne.n	800378c <HAL_RCC_OscConfig+0x258>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0304 	and.w	r3, r3, #4
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 80a6 	beq.w	8003912 <HAL_RCC_OscConfig+0x3de>
			== RCC_OSCILLATORTYPE_LSE) {
		FlagStatus pwrclkchanged = RESET;
 80037c6:	2300      	movs	r3, #0
 80037c8:	75fb      	strb	r3, [r7, #23]
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 80037ca:	4b8b      	ldr	r3, [pc, #556]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10d      	bne.n	80037f2 <HAL_RCC_OscConfig+0x2be>
			__HAL_RCC_PWR_CLK_ENABLE();
 80037d6:	4b88      	ldr	r3, [pc, #544]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	4a87      	ldr	r2, [pc, #540]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037e0:	61d3      	str	r3, [r2, #28]
 80037e2:	4b85      	ldr	r3, [pc, #532]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 80037ee:	2301      	movs	r3, #1
 80037f0:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 80037f2:	4b82      	ldr	r3, [pc, #520]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d118      	bne.n	8003830 <HAL_RCC_OscConfig+0x2fc>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 80037fe:	4b7f      	ldr	r3, [pc, #508]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a7e      	ldr	r2, [pc, #504]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003808:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800380a:	f7ff f835 	bl	8002878 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x2f0>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8003812:	f7ff f831 	bl	8002878 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b64      	cmp	r3, #100	; 0x64
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x2f0>
					return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e103      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003824:	4b75      	ldr	r3, [pc, #468]	; (80039fc <HAL_RCC_OscConfig+0x4c8>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d0f0      	beq.n	8003812 <HAL_RCC_OscConfig+0x2de>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x312>
 8003838:	4b6f      	ldr	r3, [pc, #444]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	4a6e      	ldr	r2, [pc, #440]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800383e:	f043 0301 	orr.w	r3, r3, #1
 8003842:	6213      	str	r3, [r2, #32]
 8003844:	e02d      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10c      	bne.n	8003868 <HAL_RCC_OscConfig+0x334>
 800384e:	4b6a      	ldr	r3, [pc, #424]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a69      	ldr	r2, [pc, #420]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	4b67      	ldr	r3, [pc, #412]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	4a66      	ldr	r2, [pc, #408]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6213      	str	r3, [r2, #32]
 8003866:	e01c      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	2b05      	cmp	r3, #5
 800386e:	d10c      	bne.n	800388a <HAL_RCC_OscConfig+0x356>
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a60      	ldr	r2, [pc, #384]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003876:	f043 0304 	orr.w	r3, r3, #4
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	4b5e      	ldr	r3, [pc, #376]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	4a5d      	ldr	r2, [pc, #372]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6213      	str	r3, [r2, #32]
 8003888:	e00b      	b.n	80038a2 <HAL_RCC_OscConfig+0x36e>
 800388a:	4b5b      	ldr	r3, [pc, #364]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a5a      	ldr	r2, [pc, #360]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6213      	str	r3, [r2, #32]
 8003896:	4b58      	ldr	r3, [pc, #352]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003898:	6a1b      	ldr	r3, [r3, #32]
 800389a:	4a57      	ldr	r2, [pc, #348]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800389c:	f023 0304 	bic.w	r3, r3, #4
 80038a0:	6213      	str	r3, [r2, #32]
		/* Check the LSE State */
		if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d015      	beq.n	80038d6 <HAL_RCC_OscConfig+0x3a2>
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80038aa:	f7fe ffe5 	bl	8002878 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80038b0:	e00a      	b.n	80038c8 <HAL_RCC_OscConfig+0x394>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80038b2:	f7fe ffe1 	bl	8002878 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x394>
					return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e0b1      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80038c8:	4b4b      	ldr	r3, [pc, #300]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d0ee      	beq.n	80038b2 <HAL_RCC_OscConfig+0x37e>
 80038d4:	e014      	b.n	8003900 <HAL_RCC_OscConfig+0x3cc>
				}
			}
		} else {
			/* Get Start Tick */
			tickstart = HAL_GetTick();
 80038d6:	f7fe ffcf 	bl	8002878 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is disabled */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80038dc:	e00a      	b.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80038de:	f7fe ffcb 	bl	8002878 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x3c0>
					return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e09b      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 80038f4:	4b40      	ldr	r3, [pc, #256]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d1ee      	bne.n	80038de <HAL_RCC_OscConfig+0x3aa>
				}
			}
		}

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8003900:	7dfb      	ldrb	r3, [r7, #23]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d105      	bne.n	8003912 <HAL_RCC_OscConfig+0x3de>
			__HAL_RCC_PWR_CLK_DISABLE();
 8003906:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	4a3b      	ldr	r2, [pc, #236]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800390c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003910:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 8087 	beq.w	8003a2a <HAL_RCC_OscConfig+0x4f6>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d061      	beq.n	80039ec <HAL_RCC_OscConfig+0x4b8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d146      	bne.n	80039be <HAL_RCC_OscConfig+0x48a>
				assert_param(
						IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
				assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8003930:	4b33      	ldr	r3, [pc, #204]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003936:	f7fe ff9f 	bl	8002878 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x41c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800393e:	f7fe ff9b 	bl	8002878 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x41c>
						return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e06d      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8003950:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1f0      	bne.n	800393e <HAL_RCC_OscConfig+0x40a>
					}
				}

				/* Configure the HSE prediv factor --------------------------------*/
				/* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
				if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003964:	d108      	bne.n	8003978 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

					/* Set PREDIV1 Value */
					__HAL_RCC_HSE_PREDIV_CONFIG(
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	4921      	ldr	r1, [pc, #132]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
							RCC_OscInitStruct->HSEPredivValue);
				}

				/* Configure the main PLL clock source and multiplication factors. */
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003978:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a19      	ldr	r1, [r3, #32]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	430b      	orrs	r3, r1
 800398a:	491b      	ldr	r1, [pc, #108]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
						RCC_OscInitStruct->PLL.PLLMUL);
				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 8003990:	4b1b      	ldr	r3, [pc, #108]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003996:	f7fe ff6f 	bl	8002878 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x47c>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 800399e:	f7fe ff6b 	bl	8002878 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x47c>
						return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e03d      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80039b0:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x46a>
 80039bc:	e035      	b.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 80039be:	4b10      	ldr	r3, [pc, #64]	; (8003a00 <HAL_RCC_OscConfig+0x4cc>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

				/* Get Start Tick */
				tickstart = HAL_GetTick();
 80039c4:	f7fe ff58 	bl	8002878 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0x4aa>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80039cc:	f7fe ff54 	bl	8002878 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0x4aa>
						return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e026      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 80039de:	4b06      	ldr	r3, [pc, #24]	; (80039f8 <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d1f0      	bne.n	80039cc <HAL_RCC_OscConfig+0x498>
 80039ea:	e01e      	b.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
					}
				}
			}
		} else {
			/* Check if there is a request to disable the PLL used as System clock source */
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) {
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d107      	bne.n	8003a04 <HAL_RCC_OscConfig+0x4d0>
				return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e019      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40007000 	.word	0x40007000
 8003a00:	42420060 	.word	0x42420060
			} else {
				/* Do not return HAL_ERROR if request repeats the current configuration */
				pll_config = RCC->CFGR;
 8003a04:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <HAL_RCC_OscConfig+0x500>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	60fb      	str	r3, [r7, #12]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
						!= RCC_OscInitStruct->PLL.PLLSource)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
				if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC)
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x4f2>
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
								!= RCC_OscInitStruct->PLL.PLLMUL)) {
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
						|| (READ_BIT(pll_config, RCC_CFGR_PLLMULL)
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d001      	beq.n	8003a2a <HAL_RCC_OscConfig+0x4f6>
					return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <HAL_RCC_OscConfig+0x4f8>
				}
			}
		}
	}

	return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40021000 	.word	0x40021000

08003a38 <HAL_RCC_ClockConfig>:
 *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
 *         currently used as system clock source.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	uint32_t tickstart;

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x14>
		return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0d0      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
	/* Increasing the number of wait states because of higher CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 8003a4c:	4b6a      	ldr	r3, [pc, #424]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0307 	and.w	r3, r3, #7
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d910      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x44>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8003a5a:	4b67      	ldr	r3, [pc, #412]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 0207 	bic.w	r2, r3, #7
 8003a62:	4965      	ldr	r1, [pc, #404]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x44>
			return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
		}
	}

#endif /* FLASH_ACR_LATENCY */
	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x92>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x68>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a9e:	6053      	str	r3, [r2, #4]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x80>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ab2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003ab6:	6053      	str	r3, [r2, #4]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d040      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x120>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xb6>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xce>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 8003af6:	4b41      	ldr	r3, [pc, #260]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e073      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 8003b06:	4b3d      	ldr	r3, [pc, #244]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xde>
				return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
			}
		}
		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b39      	ldr	r3, [pc, #228]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4936      	ldr	r1, [pc, #216]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	604b      	str	r3, [r1, #4]

		/* Get Start Tick */
		tickstart = HAL_GetTick();
 8003b28:	f7fe fea6 	bl	8002878 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 8003b30:	f7fe fea2 	bl	8002878 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x10e>
				return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e053      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003b46:	4b2d      	ldr	r3, [pc, #180]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf8>
		}
	}

#if defined(FLASH_ACR_LATENCY)
	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 8003b58:	4b27      	ldr	r3, [pc, #156]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d210      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x150>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 8003b66:	4b24      	ldr	r3, [pc, #144]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f023 0207 	bic.w	r2, r3, #7
 8003b6e:	4922      	ldr	r1, [pc, #136]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x150>
			return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1b6>
		}
	}
#endif /* FLASH_ACR_LATENCY */

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x16e>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	604b      	str	r3, [r1, #4]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x18e>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	604b      	str	r3, [r1, #4]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003bc6:	f000 f82d 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1c4>)
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1cc>)
 8003be0:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1d0>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fe04 	bl	80027f4 <HAL_InitTick>

	return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40022000 	.word	0x40022000
 8003bfc:	40021000 	.word	0x40021000
 8003c00:	08005c94 	.word	0x08005c94
 8003c04:	20000014 	.word	0x20000014
 8003c08:	20000018 	.word	0x20000018

08003c0c <HAL_RCC_EnableCSS>:
 *         software about the failure (Clock Security System Interrupt, CSSI),
 *         allowing the MCU to perform rescue operations. The CSSI is linked to
 *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
 * @retval None
 */
void HAL_RCC_EnableCSS(void) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
	*(__IO uint32_t*) RCC_CR_CSSON_BB = (uint32_t) ENABLE;
 8003c10:	4b03      	ldr	r3, [pc, #12]	; (8003c20 <HAL_RCC_EnableCSS+0x14>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
}
 8003c16:	bf00      	nop
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bc80      	pop	{r7}
 8003c1c:	4770      	bx	lr
 8003c1e:	bf00      	nop
 8003c20:	4242004c 	.word	0x4242004c

08003c24 <HAL_RCC_GetSysClockFreq>:
 * @note   Each time SYSCLK changes, this function must be called to update the
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 8003c24:	b480      	push	{r7}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af00      	add	r7, sp, #0
#else
	static const uint8_t aPredivFactorTable[2U] = { 1, 2 };
#endif /*RCC_CFGR2_PREDIV1*/

#endif
	uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	60bb      	str	r3, [r7, #8]
 8003c32:	2300      	movs	r3, #0
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	2300      	movs	r3, #0
 8003c38:	607b      	str	r3, [r7, #4]
	uint32_t sysclockfreq = 0U;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

	tmpreg = RCC->CFGR;
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	60fb      	str	r3, [r7, #12]

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (tmpreg & RCC_CFGR_SWS) {
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 030c 	and.w	r3, r3, #12
 8003c4a:	2b04      	cmp	r3, #4
 8003c4c:	d002      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0x30>
 8003c4e:	2b08      	cmp	r3, #8
 8003c50:	d003      	beq.n	8003c5a <HAL_RCC_GetSysClockFreq+0x36>
 8003c52:	e027      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x80>
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock */
	{
		sysclockfreq = HSE_VALUE;
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003c56:	613b      	str	r3, [r7, #16]
		break;
 8003c58:	e027      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x86>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock */
	{
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
				>> RCC_CFGR_PLLMULL_Pos];
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	0c9b      	lsrs	r3, r3, #18
 8003c5e:	f003 030f 	and.w	r3, r3, #15
		pllmul = aPLLMULFactorTable[(uint32_t) (tmpreg & RCC_CFGR_PLLMULL)
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c64:	5cd3      	ldrb	r3, [r2, r3]
 8003c66:	607b      	str	r3, [r7, #4]
		if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2) {
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d010      	beq.n	8003c94 <HAL_RCC_GetSysClockFreq+0x70>
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 8003c72:	4b11      	ldr	r3, [pc, #68]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c74:	685b      	ldr	r3, [r3, #4]
					& RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c76:	0c5b      	lsrs	r3, r3, #17
 8003c78:	f003 0301 	and.w	r3, r3, #1
			prediv = aPredivFactorTable[(uint32_t) (RCC->CFGR
 8003c7c:	4a11      	ldr	r2, [pc, #68]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c7e:	5cd3      	ldrb	r3, [r2, r3]
 8003c80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
			/* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
			pllclk = (uint32_t) ((HSE_VALUE * pllmul) / prediv);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a0d      	ldr	r2, [pc, #52]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003c86:	fb03 f202 	mul.w	r2, r3, r2
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
 8003c92:	e004      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
		} else {
			/* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
			pllclk = (uint32_t) ((HSI_VALUE >> 1) * pllmul);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a0c      	ldr	r2, [pc, #48]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c98:	fb02 f303 	mul.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
		}
		sysclockfreq = pllclk;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	613b      	str	r3, [r7, #16]
		break;
 8003ca2:	e002      	b.n	8003caa <HAL_RCC_GetSysClockFreq+0x86>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	default: /* HSI used as system clock */
	{
		sysclockfreq = HSI_VALUE;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <HAL_RCC_GetSysClockFreq+0x98>)
 8003ca6:	613b      	str	r3, [r7, #16]
		break;
 8003ca8:	bf00      	nop
	}
	}
	return sysclockfreq;
 8003caa:	693b      	ldr	r3, [r7, #16]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bc80      	pop	{r7}
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	007a1200 	.word	0x007a1200
 8003cc0:	08005cac 	.word	0x08005cac
 8003cc4:	08005cbc 	.word	0x08005cbc
 8003cc8:	003d0900 	.word	0x003d0900

08003ccc <HAL_RCC_GetHCLKFreq>:
 *
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
 *         and updated within this function
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8003cd0:	4b02      	ldr	r3, [pc, #8]	; (8003cdc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bc80      	pop	{r7}
 8003cda:	4770      	bx	lr
 8003cdc:	20000014 	.word	0x20000014

08003ce0 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003ce4:	f7ff fff2 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cea:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	; (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000
 8003d04:	08005ca4 	.word	0x08005ca4

08003d08 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8003d0c:	f7ff ffde 	bl	8003ccc <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d12:	4b05      	ldr	r3, [pc, #20]	; (8003d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	0adb      	lsrs	r3, r3, #11
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	; (8003d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08005ca4 	.word	0x08005ca4

08003d30 <HAL_RCC_NMI_IRQHandler>:
/**
 * @brief This function handles the RCC CSS interrupt request.
 * @note This API should be called under the NMI_Handler().
 * @retval None
 */
void HAL_RCC_NMI_IRQHandler(void) {
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
	/* Check RCC CSSF flag  */
	if (__HAL_RCC_GET_IT(RCC_IT_CSS)) {
 8003d34:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d104      	bne.n	8003d4a <HAL_RCC_NMI_IRQHandler+0x1a>
		/* RCC Clock Security System interrupt user callback */
		HAL_RCC_CSSCallback();
 8003d40:	f000 f828 	bl	8003d94 <HAL_RCC_CSSCallback>

		/* Clear RCC CSS pending bit */
		__HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003d44:	4b03      	ldr	r3, [pc, #12]	; (8003d54 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003d46:	2280      	movs	r2, #128	; 0x80
 8003d48:	701a      	strb	r2, [r3, #0]
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	40021000 	.word	0x40021000
 8003d54:	4002100a 	.word	0x4002100a

08003d58 <RCC_Delay>:
/**
 * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
 * @param  mdelay: specifies the delay time length, in milliseconds.
 * @retval None
 */
static void RCC_Delay(uint32_t mdelay) {
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
	__IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d60:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <RCC_Delay+0x34>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0a      	ldr	r2, [pc, #40]	; (8003d90 <RCC_Delay+0x38>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0a5b      	lsrs	r3, r3, #9
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	fb02 f303 	mul.w	r3, r2, r3
 8003d72:	60fb      	str	r3, [r7, #12]
	do {
		__NOP();
 8003d74:	bf00      	nop
	} while (Delay--);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	60fa      	str	r2, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f9      	bne.n	8003d74 <RCC_Delay+0x1c>
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bc80      	pop	{r7}
 8003d8a:	4770      	bx	lr
 8003d8c:	20000014 	.word	0x20000014
 8003d90:	10624dd3 	.word	0x10624dd3

08003d94 <HAL_RCC_CSSCallback>:

/**
 * @brief  RCC Clock Security System interrupt callback
 * @retval none
 */
__weak void HAL_RCC_CSSCallback(void) {
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
	/* NOTE : This function Should not be modified, when the callback is needed,
	 the HAL_RCC_CSSCallback could be implemented in the user file
	 */
}
 8003d98:	bf00      	nop
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bc80      	pop	{r7}
 8003d9e:	4770      	bx	lr

08003da0 <HAL_RCCEx_PeriphCLKConfig>:
 *         manually disable it.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0U, temp_reg = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*------------------------------- RTC/LCD Configuration ------------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d07d      	beq.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
			== RCC_PERIPHCLK_RTC)) {
		FlagStatus pwrclkchanged = RESET;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	75fb      	strb	r3, [r7, #23]
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* As soon as function is called to change RTC clock source, activation of the
		 power domain is done. */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 8003dc0:	4b4f      	ldr	r3, [pc, #316]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10d      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x48>
			__HAL_RCC_PWR_CLK_ENABLE();
 8003dcc:	4b4c      	ldr	r3, [pc, #304]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4a4b      	ldr	r2, [pc, #300]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd6:	61d3      	str	r3, [r2, #28]
 8003dd8:	4b49      	ldr	r3, [pc, #292]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8003de4:	2301      	movs	r3, #1
 8003de6:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d118      	bne.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x86>
			/* Enable write access to Backup domain */
			SET_BIT(PWR->CR, PWR_CR_DBP);
 8003df4:	4b43      	ldr	r3, [pc, #268]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a42      	ldr	r2, [pc, #264]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 8003e00:	f7fe fd3a 	bl	8002878 <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003e06:	e008      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8003e08:	f7fe fd36 	bl	8002878 <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
					return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e06d      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
			while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP)) {
 8003e1a:	4b3a      	ldr	r3, [pc, #232]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x68>
				}
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
		temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e26:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e2e:	60fb      	str	r3, [r7, #12]
		if ((temp_reg != 0x00000000U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02e      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
				&& (temp_reg
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& (temp_reg
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d027      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
			/* Store the content of BDCR register before the reset of Backup Domain */
			temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e44:	4b2e      	ldr	r3, [pc, #184]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e4c:	60fb      	str	r3, [r7, #12]
			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8003e4e:	4b2e      	ldr	r3, [pc, #184]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e50:	2201      	movs	r2, #1
 8003e52:	601a      	str	r2, [r3, #0]
			__HAL_RCC_BACKUPRESET_RELEASE();
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
			/* Restore the Content of BDCR register */
			RCC->BDCR = temp_reg;
 8003e5a:	4a29      	ldr	r2, [pc, #164]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6213      	str	r3, [r2, #32]

			/* Wait for LSERDY if LSE was enabled */
			if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON)) {
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d014      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
				/* Get Start Tick */
				tickstart = HAL_GetTick();
 8003e6a:	f7fe fd05 	bl	8002878 <HAL_GetTick>
 8003e6e:	6138      	str	r0, [r7, #16]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003e70:	e00a      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8003e72:	f7fe fd01 	bl	8002878 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xe8>
						return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e036      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x156>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8003e88:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d0ee      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xd2>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e94:	4b1a      	ldr	r3, [pc, #104]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4917      	ldr	r1, [pc, #92]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	620b      	str	r3, [r1, #32]

		/* Require to disable power clock if necessary */
		if (pwrclkchanged == SET) {
 8003ea6:	7dfb      	ldrb	r3, [r7, #23]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d105      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
			__HAL_RCC_PWR_CLK_DISABLE();
 8003eac:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eae:	69db      	ldr	r3, [r3, #28]
 8003eb0:	4a13      	ldr	r2, [pc, #76]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	61d3      	str	r3, [r2, #28]
		}
	}

	/*------------------------------ ADC clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x136>
			== RCC_PERIPHCLK_ADC) {
		/* Check the parameters */
		assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	490b      	ldr	r1, [pc, #44]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
	/*------------------------------ USB clock Configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d008      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x154>
			== RCC_PERIPHCLK_USB) {
		/* Check the parameters */
		assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

		/* Configure the USB clock source */
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ee2:	4b07      	ldr	r3, [pc, #28]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	4904      	ldr	r1, [pc, #16]	; (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
	}
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

	return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40007000 	.word	0x40007000
 8003f08:	42420440 	.word	0x42420440

08003f0c <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e041      	b.n	8003fa2 <HAL_TIM_Base_Init+0x96>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f7fe fb08 	bl	8002548 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 fb24 	bl	8004598 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <HAL_TIM_Base_Start>:
/**
 * @brief  Starts the TIM Base generation.
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim) {
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_INSTANCE(htim->Instance));

	/* Check the TIM state */
	if (htim->State != HAL_TIM_STATE_READY) {
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d001      	beq.n	8003fc4 <HAL_TIM_Base_Start+0x18>
		return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e032      	b.n	800402a <HAL_TIM_Base_Start+0x7e>
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a18      	ldr	r2, [pc, #96]	; (8004034 <HAL_TIM_Base_Start+0x88>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d00e      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d009      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a14      	ldr	r2, [pc, #80]	; (8004038 <HAL_TIM_Base_Start+0x8c>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d004      	beq.n	8003ff4 <HAL_TIM_Base_Start+0x48>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a13      	ldr	r2, [pc, #76]	; (800403c <HAL_TIM_Base_Start+0x90>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d111      	bne.n	8004018 <HAL_TIM_Base_Start+0x6c>
		tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	60fb      	str	r3, [r7, #12]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d010      	beq.n	8004028 <HAL_TIM_Base_Start+0x7c>
			__HAL_TIM_ENABLE(htim);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
		if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr)) {
 8004016:	e007      	b.n	8004028 <HAL_TIM_Base_Start+0x7c>
		}
	} else {
		__HAL_TIM_ENABLE(htim);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f042 0201 	orr.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]
	}

	/* Return function status */
	return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40000400 	.word	0x40000400
 800403c:	40000800 	.word	0x40000800

08004040 <HAL_TIM_OC_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
 * @param  htim TIM Output Compare handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim) {
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_TIM_OC_Init+0x12>
		return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e041      	b.n	80040d6 <HAL_TIM_OC_Init+0x96>
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_PERIOD(htim->Init.Period));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d106      	bne.n	800406c <HAL_TIM_OC_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_OC_MspInit(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f839 	bl	80040de <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2202      	movs	r2, #2
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Init the base time for the Output Compare */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3304      	adds	r3, #4
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f000 fa8a 	bl	8004598 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_TIM_OC_MspInit>:
/**
 * @brief  Initializes the TIM Output Compare MSP.
 * @param  htim TIM Output Compare handle
 * @retval None
 */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim) {
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_OC_MspInit could be implemented in the user file
	 */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_Encoder_Init>:
 * @param  htim TIM Encoder Interface handle
 * @param  sConfig TIM Encoder Interface configuration structure
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,
		const TIM_Encoder_InitTypeDef *sConfig) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <HAL_TIM_Encoder_Init+0x14>
		return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e093      	b.n	800422c <HAL_TIM_Encoder_Init+0x13c>
	assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
	assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
	assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
	assert_param(IS_TIM_PERIOD(htim->Init.Period));

	if (htim->State == HAL_TIM_STATE_RESET) {
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b00      	cmp	r3, #0
 800410e:	d106      	bne.n	800411e <HAL_TIM_Encoder_Init+0x2e>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_Encoder_MspInit(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7fe f9d5 	bl	80024c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2202      	movs	r2, #2
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Reset the SMS and ECE bits */
	htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6812      	ldr	r2, [r2, #0]
 8004130:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004134:	f023 0307 	bic.w	r3, r3, #7
 8004138:	6093      	str	r3, [r2, #8]

	/* Configure the Time base in the Encoder Mode */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3304      	adds	r3, #4
 8004142:	4619      	mov	r1, r3
 8004144:	4610      	mov	r0, r2
 8004146:	f000 fa27 	bl	8004598 <TIM_Base_SetConfig>

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR1 register value */
	tmpccmr1 = htim->Instance->CCMR1;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCER register value */
	tmpccer = htim->Instance->CCER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	60fb      	str	r3, [r7, #12]

	/* Set the encoder Mode */
	tmpsmcr |= sConfig->EncoderMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]

	/* Select the Capture Compare 1 and the Capture Compare 2 as input */
	tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	021b      	lsls	r3, r3, #8
 8004182:	4313      	orrs	r3, r2
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	613b      	str	r3, [r7, #16]

	/* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
	tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004190:	f023 030c 	bic.w	r3, r3, #12
 8004194:	613b      	str	r3, [r7, #16]
	tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800419c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041a0:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	021b      	lsls	r3, r3, #8
 80041ac:	4313      	orrs	r3, r2
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	011a      	lsls	r2, r3, #4
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	031b      	lsls	r3, r3, #12
 80041c0:	4313      	orrs	r3, r2
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]

	/* Set the TI1 and the TI2 Polarities */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80041ce:	60fb      	str	r3, [r7, #12]
	tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	685a      	ldr	r2, [r3, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	011b      	lsls	r3, r3, #4
 80041da:	4313      	orrs	r3, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]

	/* Write to TIMx SMCR */
	htim->Instance->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	609a      	str	r2, [r3, #8]

	/* Write to TIMx CCMR1 */
	htim->Instance->CCMR1 = tmpccmr1;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	619a      	str	r2, [r3, #24]

	/* Write to TIMx CCER */
	htim->Instance->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	621a      	str	r2, [r3, #32]

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2201      	movs	r2, #1
 80041fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

	/* Set the TIM channels state */
	TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2201      	movs	r2, #1
 800420e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_TIM_Encoder_Start>:
 *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
 *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim,
		uint32_t Channel) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
	HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim,
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004244:	73fb      	strb	r3, [r7, #15]
			TIM_CHANNEL_1);
	HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800424c:	73bb      	strb	r3, [r7, #14]
			TIM_CHANNEL_2);
	HAL_TIM_ChannelStateTypeDef complementary_channel_1_state =
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004254:	737b      	strb	r3, [r7, #13]
			TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
	HAL_TIM_ChannelStateTypeDef complementary_channel_2_state =
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800425c:	733b      	strb	r3, [r7, #12]

	/* Check the parameters */
	assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

	/* Set the TIM channel(s) state */
	if (Channel == TIM_CHANNEL_1) {
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d110      	bne.n	8004286 <HAL_TIM_Encoder_Start+0x52>
		if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d102      	bne.n	8004270 <HAL_TIM_Encoder_Start+0x3c>
				|| (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)) {
 800426a:	7b7b      	ldrb	r3, [r7, #13]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d001      	beq.n	8004274 <HAL_TIM_Encoder_Start+0x40>
			return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e069      	b.n	8004348 <HAL_TIM_Encoder_Start+0x114>
		} else {
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					HAL_TIM_CHANNEL_STATE_BUSY);
			TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004284:	e031      	b.n	80042ea <HAL_TIM_Encoder_Start+0xb6>
					HAL_TIM_CHANNEL_STATE_BUSY);
		}
	} else if (Channel == TIM_CHANNEL_2) {
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2b04      	cmp	r3, #4
 800428a:	d110      	bne.n	80042ae <HAL_TIM_Encoder_Start+0x7a>
		if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800428c:	7bbb      	ldrb	r3, [r7, #14]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d102      	bne.n	8004298 <HAL_TIM_Encoder_Start+0x64>
				|| (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY)) {
 8004292:	7b3b      	ldrb	r3, [r7, #12]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d001      	beq.n	800429c <HAL_TIM_Encoder_Start+0x68>
			return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e055      	b.n	8004348 <HAL_TIM_Encoder_Start+0x114>
		} else {
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2,
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
					HAL_TIM_CHANNEL_STATE_BUSY);
			TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ac:	e01d      	b.n	80042ea <HAL_TIM_Encoder_Start+0xb6>
					HAL_TIM_CHANNEL_STATE_BUSY);
		}
	} else {
		if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ae:	7bfb      	ldrb	r3, [r7, #15]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d108      	bne.n	80042c6 <HAL_TIM_Encoder_Start+0x92>
				|| (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80042b4:	7bbb      	ldrb	r3, [r7, #14]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d105      	bne.n	80042c6 <HAL_TIM_Encoder_Start+0x92>
				|| (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80042ba:	7b7b      	ldrb	r3, [r7, #13]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d102      	bne.n	80042c6 <HAL_TIM_Encoder_Start+0x92>
				|| (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY)) {
 80042c0:	7b3b      	ldrb	r3, [r7, #12]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d001      	beq.n	80042ca <HAL_TIM_Encoder_Start+0x96>
			return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e03e      	b.n	8004348 <HAL_TIM_Encoder_Start+0x114>
		} else {
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
					HAL_TIM_CHANNEL_STATE_BUSY);
			TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2,
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2202      	movs	r2, #2
 80042d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
					HAL_TIM_CHANNEL_STATE_BUSY);
			TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1,
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
					HAL_TIM_CHANNEL_STATE_BUSY);
			TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2,
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2202      	movs	r2, #2
 80042e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
					HAL_TIM_CHANNEL_STATE_BUSY);
		}
	}

	/* Enable the encoder interface channels */
	switch (Channel) {
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d003      	beq.n	80042f8 <HAL_TIM_Encoder_Start+0xc4>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d008      	beq.n	8004308 <HAL_TIM_Encoder_Start+0xd4>
 80042f6:	e00f      	b.n	8004318 <HAL_TIM_Encoder_Start+0xe4>
	case TIM_CHANNEL_1: {
		TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2201      	movs	r2, #1
 80042fe:	2100      	movs	r1, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fbc9 	bl	8004a98 <TIM_CCxChannelCmd>
		break;
 8004306:	e016      	b.n	8004336 <HAL_TIM_Encoder_Start+0x102>
	}

	case TIM_CHANNEL_2: {
		TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2201      	movs	r2, #1
 800430e:	2104      	movs	r1, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fbc1 	bl	8004a98 <TIM_CCxChannelCmd>
		break;
 8004316:	e00e      	b.n	8004336 <HAL_TIM_Encoder_Start+0x102>
	}

	default: {
		TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2201      	movs	r2, #1
 800431e:	2100      	movs	r1, #0
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fbb9 	bl	8004a98 <TIM_CCxChannelCmd>
		TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2201      	movs	r2, #1
 800432c:	2104      	movs	r1, #4
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fbb2 	bl	8004a98 <TIM_CCxChannelCmd>
		break;
 8004334:	bf00      	nop
	}
	}
	/* Enable the Peripheral */
	__HAL_TIM_ENABLE(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]

	/* Return function status */
	return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_TIM_OC_ConfigChannel>:
 *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
 *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
		const TIM_OC_InitTypeDef *sConfig, uint32_t Channel) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]
	assert_param(IS_TIM_CHANNELS(Channel));
	assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

	/* Process Locked */
	__HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_OC_ConfigChannel+0x1e>
 800436a:	2302      	movs	r3, #2
 800436c:	e048      	b.n	8004400 <HAL_TIM_OC_ConfigChannel+0xb0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	switch (Channel) {
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d839      	bhi.n	80043f0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_TIM_OC_ConfigChannel+0x34>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043b9 	.word	0x080043b9
 8004388:	080043f1 	.word	0x080043f1
 800438c:	080043f1 	.word	0x080043f1
 8004390:	080043f1 	.word	0x080043f1
 8004394:	080043c7 	.word	0x080043c7
 8004398:	080043f1 	.word	0x080043f1
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043d5 	.word	0x080043d5
 80043a8:	080043f1 	.word	0x080043f1
 80043ac:	080043f1 	.word	0x080043f1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043e3 	.word	0x080043e3
	case TIM_CHANNEL_1: {
		/* Check the parameters */
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

		/* Configure the TIM Channel 1 in Output Compare */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f94c 	bl	800465c <TIM_OC1_SetConfig>
		break;
 80043c4:	e017      	b.n	80043f6 <HAL_TIM_OC_ConfigChannel+0xa6>
	case TIM_CHANNEL_2: {
		/* Check the parameters */
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

		/* Configure the TIM Channel 2 in Output Compare */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 f9ab 	bl	8004728 <TIM_OC2_SetConfig>
		break;
 80043d2:	e010      	b.n	80043f6 <HAL_TIM_OC_ConfigChannel+0xa6>
	case TIM_CHANNEL_3: {
		/* Check the parameters */
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

		/* Configure the TIM Channel 3 in Output Compare */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68b9      	ldr	r1, [r7, #8]
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa0e 	bl	80047fc <TIM_OC3_SetConfig>
		break;
 80043e0:	e009      	b.n	80043f6 <HAL_TIM_OC_ConfigChannel+0xa6>
	case TIM_CHANNEL_4: {
		/* Check the parameters */
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

		/* Configure the TIM Channel 4 in Output Compare */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f000 fa71 	bl	80048d0 <TIM_OC4_SetConfig>
		break;
 80043ee:	e002      	b.n	80043f6 <HAL_TIM_OC_ConfigChannel+0xa6>
	}

	default:
		status = HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	75fb      	strb	r3, [r7, #23]
		break;
 80043f4:	bf00      	nop
	}

	__HAL_UNLOCK(htim);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 80043fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004400:	4618      	mov	r0, r3
 8004402:	3718      	adds	r7, #24
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		const TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	73fb      	strb	r3, [r7, #15]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_TIM_ConfigClockSource+0x1c>
 8004420:	2302      	movs	r3, #2
 8004422:	e0b4      	b.n	800458e <HAL_TIM_ConfigClockSource+0x186>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004442:	60bb      	str	r3, [r7, #8]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800444a:	60bb      	str	r3, [r7, #8]
	htim->Instance->SMCR = tmpsmcr;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800445c:	d03e      	beq.n	80044dc <HAL_TIM_ConfigClockSource+0xd4>
 800445e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004462:	f200 8087 	bhi.w	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	f000 8086 	beq.w	800457a <HAL_TIM_ConfigClockSource+0x172>
 800446e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004472:	d87f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004474:	2b70      	cmp	r3, #112	; 0x70
 8004476:	d01a      	beq.n	80044ae <HAL_TIM_ConfigClockSource+0xa6>
 8004478:	2b70      	cmp	r3, #112	; 0x70
 800447a:	d87b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800447c:	2b60      	cmp	r3, #96	; 0x60
 800447e:	d050      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x11a>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d877      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004484:	2b50      	cmp	r3, #80	; 0x50
 8004486:	d03c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0xfa>
 8004488:	2b50      	cmp	r3, #80	; 0x50
 800448a:	d873      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800448c:	2b40      	cmp	r3, #64	; 0x40
 800448e:	d058      	beq.n	8004542 <HAL_TIM_ConfigClockSource+0x13a>
 8004490:	2b40      	cmp	r3, #64	; 0x40
 8004492:	d86f      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 8004494:	2b30      	cmp	r3, #48	; 0x30
 8004496:	d064      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 8004498:	2b30      	cmp	r3, #48	; 0x30
 800449a:	d86b      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 800449c:	2b20      	cmp	r3, #32
 800449e:	d060      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d867      	bhi.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d05c      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d05a      	beq.n	8004562 <HAL_TIM_ConfigClockSource+0x15a>
 80044ac:	e062      	b.n	8004574 <HAL_TIM_ConfigClockSource+0x16c>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6899      	ldr	r1, [r3, #8]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	f000 facc 	bl	8004a5a <TIM_ETR_SetConfig>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);

		/* Select the External clock mode1 and the ETRF trigger */
		tmpsmcr = htim->Instance->SMCR;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60bb      	str	r3, [r7, #8]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044d0:	60bb      	str	r3, [r7, #8]
		/* Write to TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	609a      	str	r2, [r3, #8]
		break;
 80044da:	e04f      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
		assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		/* Configure the ETR Clock source */
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6818      	ldr	r0, [r3, #0]
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	f000 fab5 	bl	8004a5a <TIM_ETR_SetConfig>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		/* Enable the External clock mode2 */
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044fe:	609a      	str	r2, [r3, #8]
		break;
 8004500:	e03c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	461a      	mov	r2, r3
 8004510:	f000 fa2c 	bl	800496c <TIM_TI1_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2150      	movs	r1, #80	; 0x50
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fa83 	bl	8004a26 <TIM_ITRx_SetConfig>
		break;
 8004520:	e02c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI2 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI2_ConfigInputStage(htim->Instance,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6818      	ldr	r0, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	6859      	ldr	r1, [r3, #4]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	461a      	mov	r2, r3
 8004530:	f000 fa4a 	bl	80049c8 <TIM_TI2_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2160      	movs	r1, #96	; 0x60
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa73 	bl	8004a26 <TIM_ITRx_SetConfig>
		break;
 8004540:	e01c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>

		/* Check TI1 input conditioning related parameters */
		assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
		assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

		TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	6859      	ldr	r1, [r3, #4]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	461a      	mov	r2, r3
 8004550:	f000 fa0c 	bl	800496c <TIM_TI1_ConfigInputStage>
				sClockSourceConfig->ClockPolarity,
				sClockSourceConfig->ClockFilter);
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2140      	movs	r1, #64	; 0x40
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fa63 	bl	8004a26 <TIM_ITRx_SetConfig>
		break;
 8004560:	e00c      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
	case TIM_CLOCKSOURCE_ITR2:
	case TIM_CLOCKSOURCE_ITR3: {
		/* Check whether or not the timer instance supports internal trigger input */
		assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4619      	mov	r1, r3
 800456c:	4610      	mov	r0, r2
 800456e:	f000 fa5a 	bl	8004a26 <TIM_ITRx_SetConfig>
		break;
 8004572:	e003      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
	}

	default:
		status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
		break;
 8004578:	e000      	b.n	800457c <HAL_TIM_ConfigClockSource+0x174>
		break;
 800457a:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return status;
 800458c:	7bfb      	ldrb	r3, [r7, #15]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <TIM_Base_SetConfig>:
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx,
		const TIM_Base_InitTypeDef *Structure) {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a29      	ldr	r2, [pc, #164]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a26      	ldr	r2, [pc, #152]	; (8004654 <TIM_Base_SetConfig+0xbc>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x30>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a25      	ldr	r2, [pc, #148]	; (8004658 <TIM_Base_SetConfig+0xc0>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x42>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00b      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e8:	d007      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a19      	ldr	r2, [pc, #100]	; (8004654 <TIM_Base_SetConfig+0xbc>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d003      	beq.n	80045fa <TIM_Base_SetConfig+0x62>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <TIM_Base_SetConfig+0xc0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d108      	bne.n	800460c <TIM_Base_SetConfig+0x74>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004600:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	4313      	orrs	r3, r2
 800460a:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	689a      	ldr	r2, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <TIM_Base_SetConfig+0xb8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d103      	bne.n	8004640 <TIM_Base_SetConfig+0xa8>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	691a      	ldr	r2, [r3, #16]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	615a      	str	r2, [r3, #20]
}
 8004646:	bf00      	nop
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800

0800465c <TIM_OC1_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config) {
 800465c:	b480      	push	{r7}
 800465e:	b087      	sub	sp, #28
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	f023 0201 	bic.w	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800468a:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0303 	bic.w	r3, r3, #3
 8004692:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	f023 0302 	bic.w	r3, r3, #2
 80046a4:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1c      	ldr	r2, [pc, #112]	; (8004724 <TIM_OC1_SetConfig+0xc8>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10c      	bne.n	80046d2 <TIM_OC1_SetConfig+0x76>
		/* Check parameters */
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0308 	bic.w	r3, r3, #8
 80046be:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a13      	ldr	r2, [pc, #76]	; (8004724 <TIM_OC1_SetConfig+0xc8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d111      	bne.n	80046fe <TIM_OC1_SetConfig+0xa2>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e0:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046e8:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	bc80      	pop	{r7}
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40012c00 	.word	0x40012c00

08004728 <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config) {
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f023 0210 	bic.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	021b      	lsls	r3, r3, #8
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0320 	bic.w	r3, r3, #32
 8004772:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <TIM_OC2_SetConfig+0xd0>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10d      	bne.n	80047a4 <TIM_OC2_SetConfig+0x7c>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800478e:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	4313      	orrs	r3, r2
 800479a:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047a2:	617b      	str	r3, [r7, #20]

	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <TIM_OC2_SetConfig+0xd0>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d113      	bne.n	80047d4 <TIM_OC2_SetConfig+0xac>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047b2:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047ba:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	693a      	ldr	r2, [r7, #16]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	621a      	str	r2, [r3, #32]
}
 80047ee:	bf00      	nop
 80047f0:	371c      	adds	r7, #28
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr
 80047f8:	40012c00 	.word	0x40012c00

080047fc <TIM_OC3_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config) {
 80047fc:	b480      	push	{r7}
 80047fe:	b087      	sub	sp, #28
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	617b      	str	r3, [r7, #20]

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800482a:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0303 	bic.w	r3, r3, #3
 8004832:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	4313      	orrs	r3, r2
 800483c:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004844:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	4313      	orrs	r3, r2
 8004850:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1d      	ldr	r2, [pc, #116]	; (80048cc <TIM_OC3_SetConfig+0xd0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d10d      	bne.n	8004876 <TIM_OC3_SetConfig+0x7a>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004860:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004874:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a14      	ldr	r2, [pc, #80]	; (80048cc <TIM_OC3_SetConfig+0xd0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d113      	bne.n	80048a6 <TIM_OC3_SetConfig+0xaa>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004884:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800488c:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	621a      	str	r2, [r3, #32]
}
 80048c0:	bf00      	nop
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40012c00 	.word	0x40012c00

080048d0 <TIM_OC4_SetConfig>:
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The output configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx,
		const TIM_OC_InitTypeDef *OC_Config) {
 80048d0:	b480      	push	{r7}
 80048d2:	b087      	sub	sp, #28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a1b      	ldr	r3, [r3, #32]
 80048de:	613b      	str	r3, [r7, #16]

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69db      	ldr	r3, [r3, #28]
 80048f6:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048fe:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	021b      	lsls	r3, r3, #8
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	4313      	orrs	r3, r2
 8004912:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800491a:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	031b      	lsls	r3, r3, #12
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4313      	orrs	r3, r2
 8004926:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a0f      	ldr	r2, [pc, #60]	; (8004968 <TIM_OC4_SetConfig+0x98>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d109      	bne.n	8004944 <TIM_OC4_SetConfig+0x74>
		/* Check parameters */
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004936:	617b      	str	r3, [r7, #20]

		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4313      	orrs	r3, r2
 8004942:	617b      	str	r3, [r7, #20]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	621a      	str	r2, [r3, #32]
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr
 8004968:	40012c00 	.word	0x40012c00

0800496c <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	f023 0201 	bic.w	r2, r3, #1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004996:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f023 030a 	bic.w	r3, r3, #10
 80049a8:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	693a      	ldr	r2, [r7, #16]
 80049b6:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	621a      	str	r2, [r3, #32]
}
 80049be:	bf00      	nop
 80049c0:	371c      	adds	r7, #28
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bc80      	pop	{r7}
 80049c6:	4770      	bx	lr

080049c8 <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	tmpccer = TIMx->CCER;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6a1b      	ldr	r3, [r3, #32]
 80049d8:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC2E;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	f023 0210 	bic.w	r2, r3, #16
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049f2:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	031b      	lsls	r3, r3, #12
 80049f8:	693a      	ldr	r2, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a04:	617b      	str	r3, [r7, #20]
	tmpccer |= (TIM_ICPolarity << 4U);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	697a      	ldr	r2, [r7, #20]
 8004a1a:	621a      	str	r2, [r3, #32]
}
 8004a1c:	bf00      	nop
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bc80      	pop	{r7}
 8004a24:	4770      	bx	lr

08004a26 <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 8004a26:	b480      	push	{r7}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3c:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f043 0307 	orr.w	r3, r3, #7
 8004a48:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	609a      	str	r2, [r3, #8]
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bc80      	pop	{r7}
 8004a58:	4770      	bx	lr

08004a5a <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8004a5a:	b480      	push	{r7}
 8004a5c:	b087      	sub	sp, #28
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	60b9      	str	r1, [r7, #8]
 8004a64:	607a      	str	r2, [r7, #4]
 8004a66:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a74:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	021a      	lsls	r2, r3, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	609a      	str	r2, [r3, #8]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <TIM_CCxChannelCmd>:
 * @param  ChannelState specifies the TIM Channel CCxE bit new state.
 *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
 * @retval None
 */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel,
		uint32_t ChannelState) {
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]

	/* Check the parameters */
	assert_param(IS_TIM_CC1_INSTANCE(TIMx));
	assert_param(IS_TIM_CHANNELS(Channel));

	tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	f003 031f 	and.w	r3, r3, #31
 8004aaa:	2201      	movs	r2, #1
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	617b      	str	r3, [r7, #20]

	/* Reset the CCxE Bit */
	TIMx->CCER &= ~tmp;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1a      	ldr	r2, [r3, #32]
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	401a      	ands	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	621a      	str	r2, [r3, #32]

	/* Set or reset the CCxE Bit */
	TIMx->CCER |= (uint32_t) (ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
}
 8004ad6:	bf00      	nop
 8004ad8:	371c      	adds	r7, #28
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		const TIM_MasterConfigTypeDef *sMasterConfig) {
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e046      	b.n	8004b86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1e:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a16      	ldr	r2, [pc, #88]	; (8004b90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d00e      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d009      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d004      	beq.n	8004b5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a10      	ldr	r2, [pc, #64]	; (8004b98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d10c      	bne.n	8004b74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b60:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bc80      	pop	{r7}
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40000800 	.word	0x40000800

08004b9c <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b082      	sub	sp, #8
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_UART_Init+0x12>
		return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e042      	b.n	8004c34 <HAL_UART_Init+0x98>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

	if (huart->gState == HAL_UART_STATE_RESET) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d106      	bne.n	8004bc8 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd fd38 	bl	8002638 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2224      	movs	r2, #36	; 0x24
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68da      	ldr	r2, [r3, #12]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bde:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f82b 	bl	8004c3c <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004bf4:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c04:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c14:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	; 0x44
	huart->gState = HAL_UART_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	huart->RxState = HAL_UART_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	635a      	str	r2, [r3, #52]	; 0x34

	return HAL_OK;
 8004c32:	2300      	movs	r3, #0
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	431a      	orrs	r2, r3
			| huart->Init.Mode;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	695b      	ldr	r3, [r3, #20]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(huart->Instance->CR1,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c76:	f023 030c 	bic.w	r3, r3, #12
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6812      	ldr	r2, [r2, #0]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	430b      	orrs	r3, r1
 8004c82:	60d3      	str	r3, [r2, #12]
			tmpreg);
#endif /* USART_CR1_OVER8 */

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699a      	ldr	r2, [r3, #24]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]
			huart->Init.HwFlowCtl);

	if (huart->Instance == USART1) {
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a2c      	ldr	r2, [pc, #176]	; (8004d50 <UART_SetConfig+0x114>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d103      	bne.n	8004cac <UART_SetConfig+0x70>
		pclk = HAL_RCC_GetPCLK2Freq();
 8004ca4:	f7ff f830 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	e002      	b.n	8004cb2 <UART_SetConfig+0x76>
	} else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8004cac:	f7ff f818 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004cb0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
	huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009a      	lsls	r2, r3, #2
 8004cbc:	441a      	add	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <UART_SetConfig+0x118>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	095b      	lsrs	r3, r3, #5
 8004cd0:	0119      	lsls	r1, r3, #4
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009a      	lsls	r2, r3, #2
 8004cdc:	441a      	add	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	; (8004d54 <UART_SetConfig+0x118>)
 8004cea:	fba3 0302 	umull	r0, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2064      	movs	r0, #100	; 0x64
 8004cf2:	fb00 f303 	mul.w	r3, r0, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <UART_SetConfig+0x118>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d08:	4419      	add	r1, r3
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009a      	lsls	r2, r3, #2
 8004d14:	441a      	add	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <UART_SetConfig+0x118>)
 8004d22:	fba3 0302 	umull	r0, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	2064      	movs	r0, #100	; 0x64
 8004d2a:	fb00 f303 	mul.w	r3, r0, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	3332      	adds	r3, #50	; 0x32
 8004d34:	4a07      	ldr	r2, [pc, #28]	; (8004d54 <UART_SetConfig+0x118>)
 8004d36:	fba2 2303 	umull	r2, r3, r2, r3
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	f003 020f 	and.w	r2, r3, #15
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	440a      	add	r2, r1
 8004d46:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	40013800 	.word	0x40013800
 8004d54:	51eb851f 	.word	0x51eb851f

08004d58 <__errno>:
 8004d58:	4b01      	ldr	r3, [pc, #4]	; (8004d60 <__errno+0x8>)
 8004d5a:	6818      	ldr	r0, [r3, #0]
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20000020 	.word	0x20000020

08004d64 <__libc_init_array>:
 8004d64:	b570      	push	{r4, r5, r6, lr}
 8004d66:	2600      	movs	r6, #0
 8004d68:	4d0c      	ldr	r5, [pc, #48]	; (8004d9c <__libc_init_array+0x38>)
 8004d6a:	4c0d      	ldr	r4, [pc, #52]	; (8004da0 <__libc_init_array+0x3c>)
 8004d6c:	1b64      	subs	r4, r4, r5
 8004d6e:	10a4      	asrs	r4, r4, #2
 8004d70:	42a6      	cmp	r6, r4
 8004d72:	d109      	bne.n	8004d88 <__libc_init_array+0x24>
 8004d74:	f000 ff62 	bl	8005c3c <_init>
 8004d78:	2600      	movs	r6, #0
 8004d7a:	4d0a      	ldr	r5, [pc, #40]	; (8004da4 <__libc_init_array+0x40>)
 8004d7c:	4c0a      	ldr	r4, [pc, #40]	; (8004da8 <__libc_init_array+0x44>)
 8004d7e:	1b64      	subs	r4, r4, r5
 8004d80:	10a4      	asrs	r4, r4, #2
 8004d82:	42a6      	cmp	r6, r4
 8004d84:	d105      	bne.n	8004d92 <__libc_init_array+0x2e>
 8004d86:	bd70      	pop	{r4, r5, r6, pc}
 8004d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d8c:	4798      	blx	r3
 8004d8e:	3601      	adds	r6, #1
 8004d90:	e7ee      	b.n	8004d70 <__libc_init_array+0xc>
 8004d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d96:	4798      	blx	r3
 8004d98:	3601      	adds	r6, #1
 8004d9a:	e7f2      	b.n	8004d82 <__libc_init_array+0x1e>
 8004d9c:	08005d18 	.word	0x08005d18
 8004da0:	08005d18 	.word	0x08005d18
 8004da4:	08005d18 	.word	0x08005d18
 8004da8:	08005d1c 	.word	0x08005d1c

08004dac <__itoa>:
 8004dac:	1e93      	subs	r3, r2, #2
 8004dae:	2b22      	cmp	r3, #34	; 0x22
 8004db0:	b510      	push	{r4, lr}
 8004db2:	460c      	mov	r4, r1
 8004db4:	d904      	bls.n	8004dc0 <__itoa+0x14>
 8004db6:	2300      	movs	r3, #0
 8004db8:	461c      	mov	r4, r3
 8004dba:	700b      	strb	r3, [r1, #0]
 8004dbc:	4620      	mov	r0, r4
 8004dbe:	bd10      	pop	{r4, pc}
 8004dc0:	2a0a      	cmp	r2, #10
 8004dc2:	d109      	bne.n	8004dd8 <__itoa+0x2c>
 8004dc4:	2800      	cmp	r0, #0
 8004dc6:	da07      	bge.n	8004dd8 <__itoa+0x2c>
 8004dc8:	232d      	movs	r3, #45	; 0x2d
 8004dca:	700b      	strb	r3, [r1, #0]
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4240      	negs	r0, r0
 8004dd0:	4421      	add	r1, r4
 8004dd2:	f000 f80d 	bl	8004df0 <__utoa>
 8004dd6:	e7f1      	b.n	8004dbc <__itoa+0x10>
 8004dd8:	2100      	movs	r1, #0
 8004dda:	e7f9      	b.n	8004dd0 <__itoa+0x24>

08004ddc <itoa>:
 8004ddc:	f7ff bfe6 	b.w	8004dac <__itoa>

08004de0 <memset>:
 8004de0:	4603      	mov	r3, r0
 8004de2:	4402      	add	r2, r0
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d100      	bne.n	8004dea <memset+0xa>
 8004de8:	4770      	bx	lr
 8004dea:	f803 1b01 	strb.w	r1, [r3], #1
 8004dee:	e7f9      	b.n	8004de4 <memset+0x4>

08004df0 <__utoa>:
 8004df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df2:	b08b      	sub	sp, #44	; 0x2c
 8004df4:	4605      	mov	r5, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	466e      	mov	r6, sp
 8004dfa:	4c1d      	ldr	r4, [pc, #116]	; (8004e70 <__utoa+0x80>)
 8004dfc:	f104 0c20 	add.w	ip, r4, #32
 8004e00:	4637      	mov	r7, r6
 8004e02:	6820      	ldr	r0, [r4, #0]
 8004e04:	6861      	ldr	r1, [r4, #4]
 8004e06:	3408      	adds	r4, #8
 8004e08:	c703      	stmia	r7!, {r0, r1}
 8004e0a:	4564      	cmp	r4, ip
 8004e0c:	463e      	mov	r6, r7
 8004e0e:	d1f7      	bne.n	8004e00 <__utoa+0x10>
 8004e10:	7921      	ldrb	r1, [r4, #4]
 8004e12:	6820      	ldr	r0, [r4, #0]
 8004e14:	7139      	strb	r1, [r7, #4]
 8004e16:	1e91      	subs	r1, r2, #2
 8004e18:	2922      	cmp	r1, #34	; 0x22
 8004e1a:	6038      	str	r0, [r7, #0]
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	d904      	bls.n	8004e2c <__utoa+0x3c>
 8004e22:	7019      	strb	r1, [r3, #0]
 8004e24:	460b      	mov	r3, r1
 8004e26:	4618      	mov	r0, r3
 8004e28:	b00b      	add	sp, #44	; 0x2c
 8004e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e2c:	1e58      	subs	r0, r3, #1
 8004e2e:	4684      	mov	ip, r0
 8004e30:	fbb5 f7f2 	udiv	r7, r5, r2
 8004e34:	fb02 5617 	mls	r6, r2, r7, r5
 8004e38:	3628      	adds	r6, #40	; 0x28
 8004e3a:	446e      	add	r6, sp
 8004e3c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8004e40:	460c      	mov	r4, r1
 8004e42:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004e46:	462e      	mov	r6, r5
 8004e48:	42b2      	cmp	r2, r6
 8004e4a:	463d      	mov	r5, r7
 8004e4c:	f101 0101 	add.w	r1, r1, #1
 8004e50:	d9ee      	bls.n	8004e30 <__utoa+0x40>
 8004e52:	2200      	movs	r2, #0
 8004e54:	545a      	strb	r2, [r3, r1]
 8004e56:	1919      	adds	r1, r3, r4
 8004e58:	1aa5      	subs	r5, r4, r2
 8004e5a:	42aa      	cmp	r2, r5
 8004e5c:	dae3      	bge.n	8004e26 <__utoa+0x36>
 8004e5e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8004e62:	780e      	ldrb	r6, [r1, #0]
 8004e64:	3201      	adds	r2, #1
 8004e66:	7006      	strb	r6, [r0, #0]
 8004e68:	f801 5901 	strb.w	r5, [r1], #-1
 8004e6c:	e7f4      	b.n	8004e58 <__utoa+0x68>
 8004e6e:	bf00      	nop
 8004e70:	08005cbe 	.word	0x08005cbe

08004e74 <pow>:
 8004e74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	4689      	mov	r9, r1
 8004e80:	f000 f862 	bl	8004f48 <__ieee754_pow>
 8004e84:	4622      	mov	r2, r4
 8004e86:	4606      	mov	r6, r0
 8004e88:	460f      	mov	r7, r1
 8004e8a:	462b      	mov	r3, r5
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb fdb4 	bl	80009fc <__aeabi_dcmpun>
 8004e94:	bbc8      	cbnz	r0, 8004f0a <pow+0x96>
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	f7fb fd7b 	bl	8000998 <__aeabi_dcmpeq>
 8004ea2:	b1b8      	cbz	r0, 8004ed4 <pow+0x60>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7fb fd74 	bl	8000998 <__aeabi_dcmpeq>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d141      	bne.n	8004f38 <pow+0xc4>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	f000 fe3b 	bl	8005b32 <finite>
 8004ebc:	b328      	cbz	r0, 8004f0a <pow+0x96>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	4629      	mov	r1, r5
 8004ec6:	f7fb fd71 	bl	80009ac <__aeabi_dcmplt>
 8004eca:	b1f0      	cbz	r0, 8004f0a <pow+0x96>
 8004ecc:	f7ff ff44 	bl	8004d58 <__errno>
 8004ed0:	2322      	movs	r3, #34	; 0x22
 8004ed2:	e019      	b.n	8004f08 <pow+0x94>
 8004ed4:	4630      	mov	r0, r6
 8004ed6:	4639      	mov	r1, r7
 8004ed8:	f000 fe2b 	bl	8005b32 <finite>
 8004edc:	b9c8      	cbnz	r0, 8004f12 <pow+0x9e>
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f000 fe26 	bl	8005b32 <finite>
 8004ee6:	b1a0      	cbz	r0, 8004f12 <pow+0x9e>
 8004ee8:	4620      	mov	r0, r4
 8004eea:	4629      	mov	r1, r5
 8004eec:	f000 fe21 	bl	8005b32 <finite>
 8004ef0:	b178      	cbz	r0, 8004f12 <pow+0x9e>
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	463b      	mov	r3, r7
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	f7fb fd7f 	bl	80009fc <__aeabi_dcmpun>
 8004efe:	2800      	cmp	r0, #0
 8004f00:	d0e4      	beq.n	8004ecc <pow+0x58>
 8004f02:	f7ff ff29 	bl	8004d58 <__errno>
 8004f06:	2321      	movs	r3, #33	; 0x21
 8004f08:	6003      	str	r3, [r0, #0]
 8004f0a:	4630      	mov	r0, r6
 8004f0c:	4639      	mov	r1, r7
 8004f0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f12:	2200      	movs	r2, #0
 8004f14:	2300      	movs	r3, #0
 8004f16:	4630      	mov	r0, r6
 8004f18:	4639      	mov	r1, r7
 8004f1a:	f7fb fd3d 	bl	8000998 <__aeabi_dcmpeq>
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	d0f3      	beq.n	8004f0a <pow+0x96>
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	f000 fe04 	bl	8005b32 <finite>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d0ed      	beq.n	8004f0a <pow+0x96>
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f000 fdfe 	bl	8005b32 <finite>
 8004f36:	e7c8      	b.n	8004eca <pow+0x56>
 8004f38:	2600      	movs	r6, #0
 8004f3a:	4f01      	ldr	r7, [pc, #4]	; (8004f40 <pow+0xcc>)
 8004f3c:	e7e5      	b.n	8004f0a <pow+0x96>
 8004f3e:	bf00      	nop
 8004f40:	3ff00000 	.word	0x3ff00000
 8004f44:	00000000 	.word	0x00000000

08004f48 <__ieee754_pow>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	b093      	sub	sp, #76	; 0x4c
 8004f4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004f52:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8004f56:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004f5a:	4689      	mov	r9, r1
 8004f5c:	ea56 0102 	orrs.w	r1, r6, r2
 8004f60:	4680      	mov	r8, r0
 8004f62:	d111      	bne.n	8004f88 <__ieee754_pow+0x40>
 8004f64:	1803      	adds	r3, r0, r0
 8004f66:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8004f6a:	4152      	adcs	r2, r2
 8004f6c:	4299      	cmp	r1, r3
 8004f6e:	4b82      	ldr	r3, [pc, #520]	; (8005178 <__ieee754_pow+0x230>)
 8004f70:	4193      	sbcs	r3, r2
 8004f72:	f080 84b9 	bcs.w	80058e8 <__ieee754_pow+0x9a0>
 8004f76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f7a:	4640      	mov	r0, r8
 8004f7c:	4649      	mov	r1, r9
 8004f7e:	f7fb f8ed 	bl	800015c <__adddf3>
 8004f82:	4683      	mov	fp, r0
 8004f84:	468c      	mov	ip, r1
 8004f86:	e06f      	b.n	8005068 <__ieee754_pow+0x120>
 8004f88:	4b7c      	ldr	r3, [pc, #496]	; (800517c <__ieee754_pow+0x234>)
 8004f8a:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8004f8e:	429c      	cmp	r4, r3
 8004f90:	464d      	mov	r5, r9
 8004f92:	4682      	mov	sl, r0
 8004f94:	dc06      	bgt.n	8004fa4 <__ieee754_pow+0x5c>
 8004f96:	d101      	bne.n	8004f9c <__ieee754_pow+0x54>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	d1ec      	bne.n	8004f76 <__ieee754_pow+0x2e>
 8004f9c:	429e      	cmp	r6, r3
 8004f9e:	dc01      	bgt.n	8004fa4 <__ieee754_pow+0x5c>
 8004fa0:	d10f      	bne.n	8004fc2 <__ieee754_pow+0x7a>
 8004fa2:	b172      	cbz	r2, 8004fc2 <__ieee754_pow+0x7a>
 8004fa4:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8004fa8:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8004fac:	ea55 050a 	orrs.w	r5, r5, sl
 8004fb0:	d1e1      	bne.n	8004f76 <__ieee754_pow+0x2e>
 8004fb2:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8004fb6:	18db      	adds	r3, r3, r3
 8004fb8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8004fbc:	4152      	adcs	r2, r2
 8004fbe:	429d      	cmp	r5, r3
 8004fc0:	e7d5      	b.n	8004f6e <__ieee754_pow+0x26>
 8004fc2:	2d00      	cmp	r5, #0
 8004fc4:	da39      	bge.n	800503a <__ieee754_pow+0xf2>
 8004fc6:	4b6e      	ldr	r3, [pc, #440]	; (8005180 <__ieee754_pow+0x238>)
 8004fc8:	429e      	cmp	r6, r3
 8004fca:	dc52      	bgt.n	8005072 <__ieee754_pow+0x12a>
 8004fcc:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004fd0:	429e      	cmp	r6, r3
 8004fd2:	f340 849c 	ble.w	800590e <__ieee754_pow+0x9c6>
 8004fd6:	1533      	asrs	r3, r6, #20
 8004fd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004fdc:	2b14      	cmp	r3, #20
 8004fde:	dd0f      	ble.n	8005000 <__ieee754_pow+0xb8>
 8004fe0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004fe4:	fa22 f103 	lsr.w	r1, r2, r3
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	4293      	cmp	r3, r2
 8004fee:	f040 848e 	bne.w	800590e <__ieee754_pow+0x9c6>
 8004ff2:	f001 0101 	and.w	r1, r1, #1
 8004ff6:	f1c1 0302 	rsb	r3, r1, #2
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	b182      	cbz	r2, 8005020 <__ieee754_pow+0xd8>
 8004ffe:	e05d      	b.n	80050bc <__ieee754_pow+0x174>
 8005000:	2a00      	cmp	r2, #0
 8005002:	d159      	bne.n	80050b8 <__ieee754_pow+0x170>
 8005004:	f1c3 0314 	rsb	r3, r3, #20
 8005008:	fa46 f103 	asr.w	r1, r6, r3
 800500c:	fa01 f303 	lsl.w	r3, r1, r3
 8005010:	42b3      	cmp	r3, r6
 8005012:	f040 8479 	bne.w	8005908 <__ieee754_pow+0x9c0>
 8005016:	f001 0101 	and.w	r1, r1, #1
 800501a:	f1c1 0302 	rsb	r3, r1, #2
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	4b58      	ldr	r3, [pc, #352]	; (8005184 <__ieee754_pow+0x23c>)
 8005022:	429e      	cmp	r6, r3
 8005024:	d132      	bne.n	800508c <__ieee754_pow+0x144>
 8005026:	2f00      	cmp	r7, #0
 8005028:	f280 846a 	bge.w	8005900 <__ieee754_pow+0x9b8>
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	2000      	movs	r0, #0
 8005032:	4954      	ldr	r1, [pc, #336]	; (8005184 <__ieee754_pow+0x23c>)
 8005034:	f7fb fb72 	bl	800071c <__aeabi_ddiv>
 8005038:	e7a3      	b.n	8004f82 <__ieee754_pow+0x3a>
 800503a:	2300      	movs	r3, #0
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	2a00      	cmp	r2, #0
 8005040:	d13c      	bne.n	80050bc <__ieee754_pow+0x174>
 8005042:	4b4e      	ldr	r3, [pc, #312]	; (800517c <__ieee754_pow+0x234>)
 8005044:	429e      	cmp	r6, r3
 8005046:	d1eb      	bne.n	8005020 <__ieee754_pow+0xd8>
 8005048:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800504c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005050:	ea53 030a 	orrs.w	r3, r3, sl
 8005054:	f000 8448 	beq.w	80058e8 <__ieee754_pow+0x9a0>
 8005058:	4b4b      	ldr	r3, [pc, #300]	; (8005188 <__ieee754_pow+0x240>)
 800505a:	429c      	cmp	r4, r3
 800505c:	dd0b      	ble.n	8005076 <__ieee754_pow+0x12e>
 800505e:	2f00      	cmp	r7, #0
 8005060:	f2c0 8448 	blt.w	80058f4 <__ieee754_pow+0x9ac>
 8005064:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005068:	4658      	mov	r0, fp
 800506a:	4661      	mov	r1, ip
 800506c:	b013      	add	sp, #76	; 0x4c
 800506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005072:	2302      	movs	r3, #2
 8005074:	e7e2      	b.n	800503c <__ieee754_pow+0xf4>
 8005076:	2f00      	cmp	r7, #0
 8005078:	f04f 0b00 	mov.w	fp, #0
 800507c:	f04f 0c00 	mov.w	ip, #0
 8005080:	daf2      	bge.n	8005068 <__ieee754_pow+0x120>
 8005082:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8005086:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800508a:	e7ed      	b.n	8005068 <__ieee754_pow+0x120>
 800508c:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005090:	d106      	bne.n	80050a0 <__ieee754_pow+0x158>
 8005092:	4642      	mov	r2, r8
 8005094:	464b      	mov	r3, r9
 8005096:	4640      	mov	r0, r8
 8005098:	4649      	mov	r1, r9
 800509a:	f7fb fa15 	bl	80004c8 <__aeabi_dmul>
 800509e:	e770      	b.n	8004f82 <__ieee754_pow+0x3a>
 80050a0:	4b3a      	ldr	r3, [pc, #232]	; (800518c <__ieee754_pow+0x244>)
 80050a2:	429f      	cmp	r7, r3
 80050a4:	d10a      	bne.n	80050bc <__ieee754_pow+0x174>
 80050a6:	2d00      	cmp	r5, #0
 80050a8:	db08      	blt.n	80050bc <__ieee754_pow+0x174>
 80050aa:	4640      	mov	r0, r8
 80050ac:	4649      	mov	r1, r9
 80050ae:	b013      	add	sp, #76	; 0x4c
 80050b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	f000 bc5e 	b.w	8005974 <__ieee754_sqrt>
 80050b8:	2300      	movs	r3, #0
 80050ba:	9300      	str	r3, [sp, #0]
 80050bc:	4640      	mov	r0, r8
 80050be:	4649      	mov	r1, r9
 80050c0:	f000 fd34 	bl	8005b2c <fabs>
 80050c4:	4683      	mov	fp, r0
 80050c6:	468c      	mov	ip, r1
 80050c8:	f1ba 0f00 	cmp.w	sl, #0
 80050cc:	d128      	bne.n	8005120 <__ieee754_pow+0x1d8>
 80050ce:	b124      	cbz	r4, 80050da <__ieee754_pow+0x192>
 80050d0:	4b2c      	ldr	r3, [pc, #176]	; (8005184 <__ieee754_pow+0x23c>)
 80050d2:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d122      	bne.n	8005120 <__ieee754_pow+0x1d8>
 80050da:	2f00      	cmp	r7, #0
 80050dc:	da07      	bge.n	80050ee <__ieee754_pow+0x1a6>
 80050de:	465a      	mov	r2, fp
 80050e0:	4663      	mov	r3, ip
 80050e2:	2000      	movs	r0, #0
 80050e4:	4927      	ldr	r1, [pc, #156]	; (8005184 <__ieee754_pow+0x23c>)
 80050e6:	f7fb fb19 	bl	800071c <__aeabi_ddiv>
 80050ea:	4683      	mov	fp, r0
 80050ec:	468c      	mov	ip, r1
 80050ee:	2d00      	cmp	r5, #0
 80050f0:	daba      	bge.n	8005068 <__ieee754_pow+0x120>
 80050f2:	9b00      	ldr	r3, [sp, #0]
 80050f4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050f8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050fc:	4323      	orrs	r3, r4
 80050fe:	d108      	bne.n	8005112 <__ieee754_pow+0x1ca>
 8005100:	465a      	mov	r2, fp
 8005102:	4663      	mov	r3, ip
 8005104:	4658      	mov	r0, fp
 8005106:	4661      	mov	r1, ip
 8005108:	f7fb f826 	bl	8000158 <__aeabi_dsub>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e790      	b.n	8005034 <__ieee754_pow+0xec>
 8005112:	9b00      	ldr	r3, [sp, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d1a7      	bne.n	8005068 <__ieee754_pow+0x120>
 8005118:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800511c:	469c      	mov	ip, r3
 800511e:	e7a3      	b.n	8005068 <__ieee754_pow+0x120>
 8005120:	0feb      	lsrs	r3, r5, #31
 8005122:	3b01      	subs	r3, #1
 8005124:	930c      	str	r3, [sp, #48]	; 0x30
 8005126:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005128:	9b00      	ldr	r3, [sp, #0]
 800512a:	4313      	orrs	r3, r2
 800512c:	d104      	bne.n	8005138 <__ieee754_pow+0x1f0>
 800512e:	4642      	mov	r2, r8
 8005130:	464b      	mov	r3, r9
 8005132:	4640      	mov	r0, r8
 8005134:	4649      	mov	r1, r9
 8005136:	e7e7      	b.n	8005108 <__ieee754_pow+0x1c0>
 8005138:	4b15      	ldr	r3, [pc, #84]	; (8005190 <__ieee754_pow+0x248>)
 800513a:	429e      	cmp	r6, r3
 800513c:	f340 80f6 	ble.w	800532c <__ieee754_pow+0x3e4>
 8005140:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005144:	429e      	cmp	r6, r3
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <__ieee754_pow+0x240>)
 8005148:	dd09      	ble.n	800515e <__ieee754_pow+0x216>
 800514a:	429c      	cmp	r4, r3
 800514c:	dc0c      	bgt.n	8005168 <__ieee754_pow+0x220>
 800514e:	2f00      	cmp	r7, #0
 8005150:	da0c      	bge.n	800516c <__ieee754_pow+0x224>
 8005152:	2000      	movs	r0, #0
 8005154:	b013      	add	sp, #76	; 0x4c
 8005156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800515a:	f000 bce2 	b.w	8005b22 <__math_oflow>
 800515e:	429c      	cmp	r4, r3
 8005160:	dbf5      	blt.n	800514e <__ieee754_pow+0x206>
 8005162:	4b08      	ldr	r3, [pc, #32]	; (8005184 <__ieee754_pow+0x23c>)
 8005164:	429c      	cmp	r4, r3
 8005166:	dd15      	ble.n	8005194 <__ieee754_pow+0x24c>
 8005168:	2f00      	cmp	r7, #0
 800516a:	dcf2      	bgt.n	8005152 <__ieee754_pow+0x20a>
 800516c:	2000      	movs	r0, #0
 800516e:	b013      	add	sp, #76	; 0x4c
 8005170:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	f000 bcd0 	b.w	8005b18 <__math_uflow>
 8005178:	fff00000 	.word	0xfff00000
 800517c:	7ff00000 	.word	0x7ff00000
 8005180:	433fffff 	.word	0x433fffff
 8005184:	3ff00000 	.word	0x3ff00000
 8005188:	3fefffff 	.word	0x3fefffff
 800518c:	3fe00000 	.word	0x3fe00000
 8005190:	41e00000 	.word	0x41e00000
 8005194:	4661      	mov	r1, ip
 8005196:	2200      	movs	r2, #0
 8005198:	4658      	mov	r0, fp
 800519a:	4b5f      	ldr	r3, [pc, #380]	; (8005318 <__ieee754_pow+0x3d0>)
 800519c:	f7fa ffdc 	bl	8000158 <__aeabi_dsub>
 80051a0:	a355      	add	r3, pc, #340	; (adr r3, 80052f8 <__ieee754_pow+0x3b0>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	4604      	mov	r4, r0
 80051a8:	460d      	mov	r5, r1
 80051aa:	f7fb f98d 	bl	80004c8 <__aeabi_dmul>
 80051ae:	a354      	add	r3, pc, #336	; (adr r3, 8005300 <__ieee754_pow+0x3b8>)
 80051b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051b4:	4606      	mov	r6, r0
 80051b6:	460f      	mov	r7, r1
 80051b8:	4620      	mov	r0, r4
 80051ba:	4629      	mov	r1, r5
 80051bc:	f7fb f984 	bl	80004c8 <__aeabi_dmul>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4682      	mov	sl, r0
 80051c4:	468b      	mov	fp, r1
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	4b54      	ldr	r3, [pc, #336]	; (800531c <__ieee754_pow+0x3d4>)
 80051cc:	f7fb f97c 	bl	80004c8 <__aeabi_dmul>
 80051d0:	4602      	mov	r2, r0
 80051d2:	460b      	mov	r3, r1
 80051d4:	a14c      	add	r1, pc, #304	; (adr r1, 8005308 <__ieee754_pow+0x3c0>)
 80051d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051da:	f7fa ffbd 	bl	8000158 <__aeabi_dsub>
 80051de:	4622      	mov	r2, r4
 80051e0:	462b      	mov	r3, r5
 80051e2:	f7fb f971 	bl	80004c8 <__aeabi_dmul>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	2000      	movs	r0, #0
 80051ec:	494c      	ldr	r1, [pc, #304]	; (8005320 <__ieee754_pow+0x3d8>)
 80051ee:	f7fa ffb3 	bl	8000158 <__aeabi_dsub>
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	4680      	mov	r8, r0
 80051f8:	4689      	mov	r9, r1
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f7fb f963 	bl	80004c8 <__aeabi_dmul>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fb f95d 	bl	80004c8 <__aeabi_dmul>
 800520e:	a340      	add	r3, pc, #256	; (adr r3, 8005310 <__ieee754_pow+0x3c8>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb f958 	bl	80004c8 <__aeabi_dmul>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4650      	mov	r0, sl
 800521e:	4659      	mov	r1, fp
 8005220:	f7fa ff9a 	bl	8000158 <__aeabi_dsub>
 8005224:	f04f 0a00 	mov.w	sl, #0
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4604      	mov	r4, r0
 800522e:	460d      	mov	r5, r1
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fa ff92 	bl	800015c <__adddf3>
 8005238:	4632      	mov	r2, r6
 800523a:	463b      	mov	r3, r7
 800523c:	4650      	mov	r0, sl
 800523e:	468b      	mov	fp, r1
 8005240:	f7fa ff8a 	bl	8000158 <__aeabi_dsub>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fa ff84 	bl	8000158 <__aeabi_dsub>
 8005250:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005254:	9b00      	ldr	r3, [sp, #0]
 8005256:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005258:	3b01      	subs	r3, #1
 800525a:	4313      	orrs	r3, r2
 800525c:	f04f 0600 	mov.w	r6, #0
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	bf0c      	ite	eq
 8005266:	4b2f      	ldreq	r3, [pc, #188]	; (8005324 <__ieee754_pow+0x3dc>)
 8005268:	4b2b      	ldrne	r3, [pc, #172]	; (8005318 <__ieee754_pow+0x3d0>)
 800526a:	4604      	mov	r4, r0
 800526c:	460d      	mov	r5, r1
 800526e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005272:	e9cd 2300 	strd	r2, r3, [sp]
 8005276:	4632      	mov	r2, r6
 8005278:	463b      	mov	r3, r7
 800527a:	f7fa ff6d 	bl	8000158 <__aeabi_dsub>
 800527e:	4652      	mov	r2, sl
 8005280:	465b      	mov	r3, fp
 8005282:	f7fb f921 	bl	80004c8 <__aeabi_dmul>
 8005286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800528a:	4680      	mov	r8, r0
 800528c:	4689      	mov	r9, r1
 800528e:	4620      	mov	r0, r4
 8005290:	4629      	mov	r1, r5
 8005292:	f7fb f919 	bl	80004c8 <__aeabi_dmul>
 8005296:	4602      	mov	r2, r0
 8005298:	460b      	mov	r3, r1
 800529a:	4640      	mov	r0, r8
 800529c:	4649      	mov	r1, r9
 800529e:	f7fa ff5d 	bl	800015c <__adddf3>
 80052a2:	4632      	mov	r2, r6
 80052a4:	463b      	mov	r3, r7
 80052a6:	4680      	mov	r8, r0
 80052a8:	4689      	mov	r9, r1
 80052aa:	4650      	mov	r0, sl
 80052ac:	4659      	mov	r1, fp
 80052ae:	f7fb f90b 	bl	80004c8 <__aeabi_dmul>
 80052b2:	4604      	mov	r4, r0
 80052b4:	460d      	mov	r5, r1
 80052b6:	460b      	mov	r3, r1
 80052b8:	4602      	mov	r2, r0
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80052c2:	f7fa ff4b 	bl	800015c <__adddf3>
 80052c6:	4b18      	ldr	r3, [pc, #96]	; (8005328 <__ieee754_pow+0x3e0>)
 80052c8:	4682      	mov	sl, r0
 80052ca:	4299      	cmp	r1, r3
 80052cc:	460f      	mov	r7, r1
 80052ce:	460e      	mov	r6, r1
 80052d0:	f340 82e5 	ble.w	800589e <__ieee754_pow+0x956>
 80052d4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80052d8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80052dc:	4303      	orrs	r3, r0
 80052de:	f000 81df 	beq.w	80056a0 <__ieee754_pow+0x758>
 80052e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052e6:	2200      	movs	r2, #0
 80052e8:	2300      	movs	r3, #0
 80052ea:	f7fb fb5f 	bl	80009ac <__aeabi_dcmplt>
 80052ee:	3800      	subs	r0, #0
 80052f0:	bf18      	it	ne
 80052f2:	2001      	movne	r0, #1
 80052f4:	e72e      	b.n	8005154 <__ieee754_pow+0x20c>
 80052f6:	bf00      	nop
 80052f8:	60000000 	.word	0x60000000
 80052fc:	3ff71547 	.word	0x3ff71547
 8005300:	f85ddf44 	.word	0xf85ddf44
 8005304:	3e54ae0b 	.word	0x3e54ae0b
 8005308:	55555555 	.word	0x55555555
 800530c:	3fd55555 	.word	0x3fd55555
 8005310:	652b82fe 	.word	0x652b82fe
 8005314:	3ff71547 	.word	0x3ff71547
 8005318:	3ff00000 	.word	0x3ff00000
 800531c:	3fd00000 	.word	0x3fd00000
 8005320:	3fe00000 	.word	0x3fe00000
 8005324:	bff00000 	.word	0xbff00000
 8005328:	408fffff 	.word	0x408fffff
 800532c:	4bd2      	ldr	r3, [pc, #840]	; (8005678 <__ieee754_pow+0x730>)
 800532e:	2200      	movs	r2, #0
 8005330:	402b      	ands	r3, r5
 8005332:	b943      	cbnz	r3, 8005346 <__ieee754_pow+0x3fe>
 8005334:	4658      	mov	r0, fp
 8005336:	4661      	mov	r1, ip
 8005338:	4bd0      	ldr	r3, [pc, #832]	; (800567c <__ieee754_pow+0x734>)
 800533a:	f7fb f8c5 	bl	80004c8 <__aeabi_dmul>
 800533e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005342:	4683      	mov	fp, r0
 8005344:	460c      	mov	r4, r1
 8005346:	1523      	asrs	r3, r4, #20
 8005348:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800534c:	4413      	add	r3, r2
 800534e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005350:	4bcb      	ldr	r3, [pc, #812]	; (8005680 <__ieee754_pow+0x738>)
 8005352:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005356:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800535a:	429c      	cmp	r4, r3
 800535c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005360:	dd08      	ble.n	8005374 <__ieee754_pow+0x42c>
 8005362:	4bc8      	ldr	r3, [pc, #800]	; (8005684 <__ieee754_pow+0x73c>)
 8005364:	429c      	cmp	r4, r3
 8005366:	f340 8199 	ble.w	800569c <__ieee754_pow+0x754>
 800536a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800536c:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005370:	3301      	adds	r3, #1
 8005372:	930b      	str	r3, [sp, #44]	; 0x2c
 8005374:	2600      	movs	r6, #0
 8005376:	00f3      	lsls	r3, r6, #3
 8005378:	930d      	str	r3, [sp, #52]	; 0x34
 800537a:	4bc3      	ldr	r3, [pc, #780]	; (8005688 <__ieee754_pow+0x740>)
 800537c:	4658      	mov	r0, fp
 800537e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005382:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005386:	4629      	mov	r1, r5
 8005388:	461a      	mov	r2, r3
 800538a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800538e:	4623      	mov	r3, r4
 8005390:	f7fa fee2 	bl	8000158 <__aeabi_dsub>
 8005394:	46da      	mov	sl, fp
 8005396:	462b      	mov	r3, r5
 8005398:	4652      	mov	r2, sl
 800539a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800539e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80053a2:	f7fa fedb 	bl	800015c <__adddf3>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	2000      	movs	r0, #0
 80053ac:	49b7      	ldr	r1, [pc, #732]	; (800568c <__ieee754_pow+0x744>)
 80053ae:	f7fb f9b5 	bl	800071c <__aeabi_ddiv>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053ba:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053be:	f7fb f883 	bl	80004c8 <__aeabi_dmul>
 80053c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053c6:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80053ca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80053ce:	2300      	movs	r3, #0
 80053d0:	2200      	movs	r2, #0
 80053d2:	46ab      	mov	fp, r5
 80053d4:	106d      	asrs	r5, r5, #1
 80053d6:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80053da:	9304      	str	r3, [sp, #16]
 80053dc:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80053e0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053e4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80053e8:	4640      	mov	r0, r8
 80053ea:	4649      	mov	r1, r9
 80053ec:	4614      	mov	r4, r2
 80053ee:	461d      	mov	r5, r3
 80053f0:	f7fb f86a 	bl	80004c8 <__aeabi_dmul>
 80053f4:	4602      	mov	r2, r0
 80053f6:	460b      	mov	r3, r1
 80053f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80053fc:	f7fa feac 	bl	8000158 <__aeabi_dsub>
 8005400:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005404:	4606      	mov	r6, r0
 8005406:	460f      	mov	r7, r1
 8005408:	4620      	mov	r0, r4
 800540a:	4629      	mov	r1, r5
 800540c:	f7fa fea4 	bl	8000158 <__aeabi_dsub>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4650      	mov	r0, sl
 8005416:	4659      	mov	r1, fp
 8005418:	f7fa fe9e 	bl	8000158 <__aeabi_dsub>
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f7fb f852 	bl	80004c8 <__aeabi_dmul>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4630      	mov	r0, r6
 800542a:	4639      	mov	r1, r7
 800542c:	f7fa fe94 	bl	8000158 <__aeabi_dsub>
 8005430:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005434:	f7fb f848 	bl	80004c8 <__aeabi_dmul>
 8005438:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800543c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005440:	4610      	mov	r0, r2
 8005442:	4619      	mov	r1, r3
 8005444:	f7fb f840 	bl	80004c8 <__aeabi_dmul>
 8005448:	a379      	add	r3, pc, #484	; (adr r3, 8005630 <__ieee754_pow+0x6e8>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	4604      	mov	r4, r0
 8005450:	460d      	mov	r5, r1
 8005452:	f7fb f839 	bl	80004c8 <__aeabi_dmul>
 8005456:	a378      	add	r3, pc, #480	; (adr r3, 8005638 <__ieee754_pow+0x6f0>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fa fe7e 	bl	800015c <__adddf3>
 8005460:	4622      	mov	r2, r4
 8005462:	462b      	mov	r3, r5
 8005464:	f7fb f830 	bl	80004c8 <__aeabi_dmul>
 8005468:	a375      	add	r3, pc, #468	; (adr r3, 8005640 <__ieee754_pow+0x6f8>)
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	f7fa fe75 	bl	800015c <__adddf3>
 8005472:	4622      	mov	r2, r4
 8005474:	462b      	mov	r3, r5
 8005476:	f7fb f827 	bl	80004c8 <__aeabi_dmul>
 800547a:	a373      	add	r3, pc, #460	; (adr r3, 8005648 <__ieee754_pow+0x700>)
 800547c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005480:	f7fa fe6c 	bl	800015c <__adddf3>
 8005484:	4622      	mov	r2, r4
 8005486:	462b      	mov	r3, r5
 8005488:	f7fb f81e 	bl	80004c8 <__aeabi_dmul>
 800548c:	a370      	add	r3, pc, #448	; (adr r3, 8005650 <__ieee754_pow+0x708>)
 800548e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005492:	f7fa fe63 	bl	800015c <__adddf3>
 8005496:	4622      	mov	r2, r4
 8005498:	462b      	mov	r3, r5
 800549a:	f7fb f815 	bl	80004c8 <__aeabi_dmul>
 800549e:	a36e      	add	r3, pc, #440	; (adr r3, 8005658 <__ieee754_pow+0x710>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f7fa fe5a 	bl	800015c <__adddf3>
 80054a8:	4622      	mov	r2, r4
 80054aa:	4606      	mov	r6, r0
 80054ac:	460f      	mov	r7, r1
 80054ae:	462b      	mov	r3, r5
 80054b0:	4620      	mov	r0, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	f7fb f808 	bl	80004c8 <__aeabi_dmul>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4630      	mov	r0, r6
 80054be:	4639      	mov	r1, r7
 80054c0:	f7fb f802 	bl	80004c8 <__aeabi_dmul>
 80054c4:	4604      	mov	r4, r0
 80054c6:	460d      	mov	r5, r1
 80054c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	f7fa fe44 	bl	800015c <__adddf3>
 80054d4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80054d8:	f7fa fff6 	bl	80004c8 <__aeabi_dmul>
 80054dc:	4622      	mov	r2, r4
 80054de:	462b      	mov	r3, r5
 80054e0:	f7fa fe3c 	bl	800015c <__adddf3>
 80054e4:	4642      	mov	r2, r8
 80054e6:	4606      	mov	r6, r0
 80054e8:	460f      	mov	r7, r1
 80054ea:	464b      	mov	r3, r9
 80054ec:	4640      	mov	r0, r8
 80054ee:	4649      	mov	r1, r9
 80054f0:	f7fa ffea 	bl	80004c8 <__aeabi_dmul>
 80054f4:	2200      	movs	r2, #0
 80054f6:	4b66      	ldr	r3, [pc, #408]	; (8005690 <__ieee754_pow+0x748>)
 80054f8:	4682      	mov	sl, r0
 80054fa:	468b      	mov	fp, r1
 80054fc:	f7fa fe2e 	bl	800015c <__adddf3>
 8005500:	4632      	mov	r2, r6
 8005502:	463b      	mov	r3, r7
 8005504:	f7fa fe2a 	bl	800015c <__adddf3>
 8005508:	2400      	movs	r4, #0
 800550a:	460d      	mov	r5, r1
 800550c:	4622      	mov	r2, r4
 800550e:	460b      	mov	r3, r1
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fa ffd8 	bl	80004c8 <__aeabi_dmul>
 8005518:	2200      	movs	r2, #0
 800551a:	4680      	mov	r8, r0
 800551c:	4689      	mov	r9, r1
 800551e:	4620      	mov	r0, r4
 8005520:	4629      	mov	r1, r5
 8005522:	4b5b      	ldr	r3, [pc, #364]	; (8005690 <__ieee754_pow+0x748>)
 8005524:	f7fa fe18 	bl	8000158 <__aeabi_dsub>
 8005528:	4652      	mov	r2, sl
 800552a:	465b      	mov	r3, fp
 800552c:	f7fa fe14 	bl	8000158 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fa fe0e 	bl	8000158 <__aeabi_dsub>
 800553c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005540:	f7fa ffc2 	bl	80004c8 <__aeabi_dmul>
 8005544:	4622      	mov	r2, r4
 8005546:	4606      	mov	r6, r0
 8005548:	460f      	mov	r7, r1
 800554a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800554e:	462b      	mov	r3, r5
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	4602      	mov	r2, r0
 8005556:	460b      	mov	r3, r1
 8005558:	4630      	mov	r0, r6
 800555a:	4639      	mov	r1, r7
 800555c:	f7fa fdfe 	bl	800015c <__adddf3>
 8005560:	2400      	movs	r4, #0
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4640      	mov	r0, r8
 800556c:	4649      	mov	r1, r9
 800556e:	f7fa fdf5 	bl	800015c <__adddf3>
 8005572:	a33b      	add	r3, pc, #236	; (adr r3, 8005660 <__ieee754_pow+0x718>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	4620      	mov	r0, r4
 800557a:	460d      	mov	r5, r1
 800557c:	f7fa ffa4 	bl	80004c8 <__aeabi_dmul>
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005588:	4620      	mov	r0, r4
 800558a:	4629      	mov	r1, r5
 800558c:	f7fa fde4 	bl	8000158 <__aeabi_dsub>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4630      	mov	r0, r6
 8005596:	4639      	mov	r1, r7
 8005598:	f7fa fdde 	bl	8000158 <__aeabi_dsub>
 800559c:	a332      	add	r3, pc, #200	; (adr r3, 8005668 <__ieee754_pow+0x720>)
 800559e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a2:	f7fa ff91 	bl	80004c8 <__aeabi_dmul>
 80055a6:	a332      	add	r3, pc, #200	; (adr r3, 8005670 <__ieee754_pow+0x728>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	4606      	mov	r6, r0
 80055ae:	460f      	mov	r7, r1
 80055b0:	4620      	mov	r0, r4
 80055b2:	4629      	mov	r1, r5
 80055b4:	f7fa ff88 	bl	80004c8 <__aeabi_dmul>
 80055b8:	4602      	mov	r2, r0
 80055ba:	460b      	mov	r3, r1
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fa fdcc 	bl	800015c <__adddf3>
 80055c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055c6:	4b33      	ldr	r3, [pc, #204]	; (8005694 <__ieee754_pow+0x74c>)
 80055c8:	f04f 0a00 	mov.w	sl, #0
 80055cc:	4413      	add	r3, r2
 80055ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d2:	f7fa fdc3 	bl	800015c <__adddf3>
 80055d6:	4680      	mov	r8, r0
 80055d8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80055da:	4689      	mov	r9, r1
 80055dc:	f7fa ff0a 	bl	80003f4 <__aeabi_i2d>
 80055e0:	4604      	mov	r4, r0
 80055e2:	460d      	mov	r5, r1
 80055e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055e6:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <__ieee754_pow+0x750>)
 80055e8:	4413      	add	r3, r2
 80055ea:	e9d3 6700 	ldrd	r6, r7, [r3]
 80055ee:	4642      	mov	r2, r8
 80055f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f4:	464b      	mov	r3, r9
 80055f6:	f7fa fdb1 	bl	800015c <__adddf3>
 80055fa:	4632      	mov	r2, r6
 80055fc:	463b      	mov	r3, r7
 80055fe:	f7fa fdad 	bl	800015c <__adddf3>
 8005602:	4622      	mov	r2, r4
 8005604:	462b      	mov	r3, r5
 8005606:	f7fa fda9 	bl	800015c <__adddf3>
 800560a:	4622      	mov	r2, r4
 800560c:	462b      	mov	r3, r5
 800560e:	4650      	mov	r0, sl
 8005610:	468b      	mov	fp, r1
 8005612:	f7fa fda1 	bl	8000158 <__aeabi_dsub>
 8005616:	4632      	mov	r2, r6
 8005618:	463b      	mov	r3, r7
 800561a:	f7fa fd9d 	bl	8000158 <__aeabi_dsub>
 800561e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005622:	f7fa fd99 	bl	8000158 <__aeabi_dsub>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4640      	mov	r0, r8
 800562c:	4649      	mov	r1, r9
 800562e:	e60d      	b.n	800524c <__ieee754_pow+0x304>
 8005630:	4a454eef 	.word	0x4a454eef
 8005634:	3fca7e28 	.word	0x3fca7e28
 8005638:	93c9db65 	.word	0x93c9db65
 800563c:	3fcd864a 	.word	0x3fcd864a
 8005640:	a91d4101 	.word	0xa91d4101
 8005644:	3fd17460 	.word	0x3fd17460
 8005648:	518f264d 	.word	0x518f264d
 800564c:	3fd55555 	.word	0x3fd55555
 8005650:	db6fabff 	.word	0xdb6fabff
 8005654:	3fdb6db6 	.word	0x3fdb6db6
 8005658:	33333303 	.word	0x33333303
 800565c:	3fe33333 	.word	0x3fe33333
 8005660:	e0000000 	.word	0xe0000000
 8005664:	3feec709 	.word	0x3feec709
 8005668:	dc3a03fd 	.word	0xdc3a03fd
 800566c:	3feec709 	.word	0x3feec709
 8005670:	145b01f5 	.word	0x145b01f5
 8005674:	be3e2fe0 	.word	0xbe3e2fe0
 8005678:	7ff00000 	.word	0x7ff00000
 800567c:	43400000 	.word	0x43400000
 8005680:	0003988e 	.word	0x0003988e
 8005684:	000bb679 	.word	0x000bb679
 8005688:	08005ce8 	.word	0x08005ce8
 800568c:	3ff00000 	.word	0x3ff00000
 8005690:	40080000 	.word	0x40080000
 8005694:	08005d08 	.word	0x08005d08
 8005698:	08005cf8 	.word	0x08005cf8
 800569c:	2601      	movs	r6, #1
 800569e:	e66a      	b.n	8005376 <__ieee754_pow+0x42e>
 80056a0:	a39d      	add	r3, pc, #628	; (adr r3, 8005918 <__ieee754_pow+0x9d0>)
 80056a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a6:	4640      	mov	r0, r8
 80056a8:	4649      	mov	r1, r9
 80056aa:	f7fa fd57 	bl	800015c <__adddf3>
 80056ae:	4622      	mov	r2, r4
 80056b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056b4:	462b      	mov	r3, r5
 80056b6:	4650      	mov	r0, sl
 80056b8:	4639      	mov	r1, r7
 80056ba:	f7fa fd4d 	bl	8000158 <__aeabi_dsub>
 80056be:	4602      	mov	r2, r0
 80056c0:	460b      	mov	r3, r1
 80056c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80056c6:	f7fb f98f 	bl	80009e8 <__aeabi_dcmpgt>
 80056ca:	2800      	cmp	r0, #0
 80056cc:	f47f ae09 	bne.w	80052e2 <__ieee754_pow+0x39a>
 80056d0:	4aa3      	ldr	r2, [pc, #652]	; (8005960 <__ieee754_pow+0xa18>)
 80056d2:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80056d6:	4293      	cmp	r3, r2
 80056d8:	f340 8101 	ble.w	80058de <__ieee754_pow+0x996>
 80056dc:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80056e0:	2000      	movs	r0, #0
 80056e2:	151b      	asrs	r3, r3, #20
 80056e4:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80056e8:	fa4a f303 	asr.w	r3, sl, r3
 80056ec:	4433      	add	r3, r6
 80056ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80056f2:	4f9c      	ldr	r7, [pc, #624]	; (8005964 <__ieee754_pow+0xa1c>)
 80056f4:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80056f8:	4117      	asrs	r7, r2
 80056fa:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80056fe:	ea23 0107 	bic.w	r1, r3, r7
 8005702:	f1c2 0214 	rsb	r2, r2, #20
 8005706:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800570a:	460b      	mov	r3, r1
 800570c:	fa4a fa02 	asr.w	sl, sl, r2
 8005710:	2e00      	cmp	r6, #0
 8005712:	4602      	mov	r2, r0
 8005714:	4629      	mov	r1, r5
 8005716:	4620      	mov	r0, r4
 8005718:	bfb8      	it	lt
 800571a:	f1ca 0a00 	rsblt	sl, sl, #0
 800571e:	f7fa fd1b 	bl	8000158 <__aeabi_dsub>
 8005722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005726:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800572a:	2400      	movs	r4, #0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	f7fa fd14 	bl	800015c <__adddf3>
 8005734:	a37a      	add	r3, pc, #488	; (adr r3, 8005920 <__ieee754_pow+0x9d8>)
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	4620      	mov	r0, r4
 800573c:	460d      	mov	r5, r1
 800573e:	f7fa fec3 	bl	80004c8 <__aeabi_dmul>
 8005742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005746:	4606      	mov	r6, r0
 8005748:	460f      	mov	r7, r1
 800574a:	4620      	mov	r0, r4
 800574c:	4629      	mov	r1, r5
 800574e:	f7fa fd03 	bl	8000158 <__aeabi_dsub>
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	4640      	mov	r0, r8
 8005758:	4649      	mov	r1, r9
 800575a:	f7fa fcfd 	bl	8000158 <__aeabi_dsub>
 800575e:	a372      	add	r3, pc, #456	; (adr r3, 8005928 <__ieee754_pow+0x9e0>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa feb0 	bl	80004c8 <__aeabi_dmul>
 8005768:	a371      	add	r3, pc, #452	; (adr r3, 8005930 <__ieee754_pow+0x9e8>)
 800576a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576e:	4680      	mov	r8, r0
 8005770:	4689      	mov	r9, r1
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fa fea7 	bl	80004c8 <__aeabi_dmul>
 800577a:	4602      	mov	r2, r0
 800577c:	460b      	mov	r3, r1
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f7fa fceb 	bl	800015c <__adddf3>
 8005786:	4604      	mov	r4, r0
 8005788:	460d      	mov	r5, r1
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4630      	mov	r0, r6
 8005790:	4639      	mov	r1, r7
 8005792:	f7fa fce3 	bl	800015c <__adddf3>
 8005796:	4632      	mov	r2, r6
 8005798:	463b      	mov	r3, r7
 800579a:	4680      	mov	r8, r0
 800579c:	4689      	mov	r9, r1
 800579e:	f7fa fcdb 	bl	8000158 <__aeabi_dsub>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4620      	mov	r0, r4
 80057a8:	4629      	mov	r1, r5
 80057aa:	f7fa fcd5 	bl	8000158 <__aeabi_dsub>
 80057ae:	4642      	mov	r2, r8
 80057b0:	4606      	mov	r6, r0
 80057b2:	460f      	mov	r7, r1
 80057b4:	464b      	mov	r3, r9
 80057b6:	4640      	mov	r0, r8
 80057b8:	4649      	mov	r1, r9
 80057ba:	f7fa fe85 	bl	80004c8 <__aeabi_dmul>
 80057be:	a35e      	add	r3, pc, #376	; (adr r3, 8005938 <__ieee754_pow+0x9f0>)
 80057c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c4:	4604      	mov	r4, r0
 80057c6:	460d      	mov	r5, r1
 80057c8:	f7fa fe7e 	bl	80004c8 <__aeabi_dmul>
 80057cc:	a35c      	add	r3, pc, #368	; (adr r3, 8005940 <__ieee754_pow+0x9f8>)
 80057ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d2:	f7fa fcc1 	bl	8000158 <__aeabi_dsub>
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	f7fa fe75 	bl	80004c8 <__aeabi_dmul>
 80057de:	a35a      	add	r3, pc, #360	; (adr r3, 8005948 <__ieee754_pow+0xa00>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa fcba 	bl	800015c <__adddf3>
 80057e8:	4622      	mov	r2, r4
 80057ea:	462b      	mov	r3, r5
 80057ec:	f7fa fe6c 	bl	80004c8 <__aeabi_dmul>
 80057f0:	a357      	add	r3, pc, #348	; (adr r3, 8005950 <__ieee754_pow+0xa08>)
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa fcaf 	bl	8000158 <__aeabi_dsub>
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	f7fa fe63 	bl	80004c8 <__aeabi_dmul>
 8005802:	a355      	add	r3, pc, #340	; (adr r3, 8005958 <__ieee754_pow+0xa10>)
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f7fa fca8 	bl	800015c <__adddf3>
 800580c:	4622      	mov	r2, r4
 800580e:	462b      	mov	r3, r5
 8005810:	f7fa fe5a 	bl	80004c8 <__aeabi_dmul>
 8005814:	4602      	mov	r2, r0
 8005816:	460b      	mov	r3, r1
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	f7fa fc9c 	bl	8000158 <__aeabi_dsub>
 8005820:	4604      	mov	r4, r0
 8005822:	460d      	mov	r5, r1
 8005824:	4602      	mov	r2, r0
 8005826:	460b      	mov	r3, r1
 8005828:	4640      	mov	r0, r8
 800582a:	4649      	mov	r1, r9
 800582c:	f7fa fe4c 	bl	80004c8 <__aeabi_dmul>
 8005830:	2200      	movs	r2, #0
 8005832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800583a:	4620      	mov	r0, r4
 800583c:	4629      	mov	r1, r5
 800583e:	f7fa fc8b 	bl	8000158 <__aeabi_dsub>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800584a:	f7fa ff67 	bl	800071c <__aeabi_ddiv>
 800584e:	4632      	mov	r2, r6
 8005850:	4604      	mov	r4, r0
 8005852:	460d      	mov	r5, r1
 8005854:	463b      	mov	r3, r7
 8005856:	4640      	mov	r0, r8
 8005858:	4649      	mov	r1, r9
 800585a:	f7fa fe35 	bl	80004c8 <__aeabi_dmul>
 800585e:	4632      	mov	r2, r6
 8005860:	463b      	mov	r3, r7
 8005862:	f7fa fc7b 	bl	800015c <__adddf3>
 8005866:	4602      	mov	r2, r0
 8005868:	460b      	mov	r3, r1
 800586a:	4620      	mov	r0, r4
 800586c:	4629      	mov	r1, r5
 800586e:	f7fa fc73 	bl	8000158 <__aeabi_dsub>
 8005872:	4642      	mov	r2, r8
 8005874:	464b      	mov	r3, r9
 8005876:	f7fa fc6f 	bl	8000158 <__aeabi_dsub>
 800587a:	4602      	mov	r2, r0
 800587c:	460b      	mov	r3, r1
 800587e:	2000      	movs	r0, #0
 8005880:	4939      	ldr	r1, [pc, #228]	; (8005968 <__ieee754_pow+0xa20>)
 8005882:	f7fa fc69 	bl	8000158 <__aeabi_dsub>
 8005886:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800588a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800588e:	da29      	bge.n	80058e4 <__ieee754_pow+0x99c>
 8005890:	4652      	mov	r2, sl
 8005892:	f000 f955 	bl	8005b40 <scalbn>
 8005896:	e9dd 2300 	ldrd	r2, r3, [sp]
 800589a:	f7ff bbfe 	b.w	800509a <__ieee754_pow+0x152>
 800589e:	4b33      	ldr	r3, [pc, #204]	; (800596c <__ieee754_pow+0xa24>)
 80058a0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 80058a4:	429f      	cmp	r7, r3
 80058a6:	f77f af13 	ble.w	80056d0 <__ieee754_pow+0x788>
 80058aa:	4b31      	ldr	r3, [pc, #196]	; (8005970 <__ieee754_pow+0xa28>)
 80058ac:	440b      	add	r3, r1
 80058ae:	4303      	orrs	r3, r0
 80058b0:	d009      	beq.n	80058c6 <__ieee754_pow+0x97e>
 80058b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058b6:	2200      	movs	r2, #0
 80058b8:	2300      	movs	r3, #0
 80058ba:	f7fb f877 	bl	80009ac <__aeabi_dcmplt>
 80058be:	3800      	subs	r0, #0
 80058c0:	bf18      	it	ne
 80058c2:	2001      	movne	r0, #1
 80058c4:	e453      	b.n	800516e <__ieee754_pow+0x226>
 80058c6:	4622      	mov	r2, r4
 80058c8:	462b      	mov	r3, r5
 80058ca:	f7fa fc45 	bl	8000158 <__aeabi_dsub>
 80058ce:	4642      	mov	r2, r8
 80058d0:	464b      	mov	r3, r9
 80058d2:	f7fb f87f 	bl	80009d4 <__aeabi_dcmpge>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	f43f aefa 	beq.w	80056d0 <__ieee754_pow+0x788>
 80058dc:	e7e9      	b.n	80058b2 <__ieee754_pow+0x96a>
 80058de:	f04f 0a00 	mov.w	sl, #0
 80058e2:	e720      	b.n	8005726 <__ieee754_pow+0x7de>
 80058e4:	4621      	mov	r1, r4
 80058e6:	e7d6      	b.n	8005896 <__ieee754_pow+0x94e>
 80058e8:	f04f 0b00 	mov.w	fp, #0
 80058ec:	f8df c078 	ldr.w	ip, [pc, #120]	; 8005968 <__ieee754_pow+0xa20>
 80058f0:	f7ff bbba 	b.w	8005068 <__ieee754_pow+0x120>
 80058f4:	f04f 0b00 	mov.w	fp, #0
 80058f8:	f04f 0c00 	mov.w	ip, #0
 80058fc:	f7ff bbb4 	b.w	8005068 <__ieee754_pow+0x120>
 8005900:	4640      	mov	r0, r8
 8005902:	4649      	mov	r1, r9
 8005904:	f7ff bb3d 	b.w	8004f82 <__ieee754_pow+0x3a>
 8005908:	9200      	str	r2, [sp, #0]
 800590a:	f7ff bb89 	b.w	8005020 <__ieee754_pow+0xd8>
 800590e:	2300      	movs	r3, #0
 8005910:	f7ff bb73 	b.w	8004ffa <__ieee754_pow+0xb2>
 8005914:	f3af 8000 	nop.w
 8005918:	652b82fe 	.word	0x652b82fe
 800591c:	3c971547 	.word	0x3c971547
 8005920:	00000000 	.word	0x00000000
 8005924:	3fe62e43 	.word	0x3fe62e43
 8005928:	fefa39ef 	.word	0xfefa39ef
 800592c:	3fe62e42 	.word	0x3fe62e42
 8005930:	0ca86c39 	.word	0x0ca86c39
 8005934:	be205c61 	.word	0xbe205c61
 8005938:	72bea4d0 	.word	0x72bea4d0
 800593c:	3e663769 	.word	0x3e663769
 8005940:	c5d26bf1 	.word	0xc5d26bf1
 8005944:	3ebbbd41 	.word	0x3ebbbd41
 8005948:	af25de2c 	.word	0xaf25de2c
 800594c:	3f11566a 	.word	0x3f11566a
 8005950:	16bebd93 	.word	0x16bebd93
 8005954:	3f66c16c 	.word	0x3f66c16c
 8005958:	5555553e 	.word	0x5555553e
 800595c:	3fc55555 	.word	0x3fc55555
 8005960:	3fe00000 	.word	0x3fe00000
 8005964:	000fffff 	.word	0x000fffff
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	4090cbff 	.word	0x4090cbff
 8005970:	3f6f3400 	.word	0x3f6f3400

08005974 <__ieee754_sqrt>:
 8005974:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005ad0 <__ieee754_sqrt+0x15c>
 8005978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800597c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005980:	4606      	mov	r6, r0
 8005982:	460d      	mov	r5, r1
 8005984:	460c      	mov	r4, r1
 8005986:	460a      	mov	r2, r1
 8005988:	4607      	mov	r7, r0
 800598a:	4603      	mov	r3, r0
 800598c:	d10f      	bne.n	80059ae <__ieee754_sqrt+0x3a>
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	f7fa fd99 	bl	80004c8 <__aeabi_dmul>
 8005996:	4602      	mov	r2, r0
 8005998:	460b      	mov	r3, r1
 800599a:	4630      	mov	r0, r6
 800599c:	4629      	mov	r1, r5
 800599e:	f7fa fbdd 	bl	800015c <__adddf3>
 80059a2:	4606      	mov	r6, r0
 80059a4:	460d      	mov	r5, r1
 80059a6:	4630      	mov	r0, r6
 80059a8:	4629      	mov	r1, r5
 80059aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ae:	2900      	cmp	r1, #0
 80059b0:	dc0e      	bgt.n	80059d0 <__ieee754_sqrt+0x5c>
 80059b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80059b6:	ea5c 0707 	orrs.w	r7, ip, r7
 80059ba:	d0f4      	beq.n	80059a6 <__ieee754_sqrt+0x32>
 80059bc:	b141      	cbz	r1, 80059d0 <__ieee754_sqrt+0x5c>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	f7fa fbc9 	bl	8000158 <__aeabi_dsub>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	f7fa fea7 	bl	800071c <__aeabi_ddiv>
 80059ce:	e7e8      	b.n	80059a2 <__ieee754_sqrt+0x2e>
 80059d0:	1521      	asrs	r1, r4, #20
 80059d2:	d075      	beq.n	8005ac0 <__ieee754_sqrt+0x14c>
 80059d4:	07cc      	lsls	r4, r1, #31
 80059d6:	f04f 0400 	mov.w	r4, #0
 80059da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80059de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80059e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80059e6:	bf5e      	ittt	pl
 80059e8:	0fd9      	lsrpl	r1, r3, #31
 80059ea:	005b      	lslpl	r3, r3, #1
 80059ec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80059f0:	0fd9      	lsrs	r1, r3, #31
 80059f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80059f6:	2516      	movs	r5, #22
 80059f8:	4620      	mov	r0, r4
 80059fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059fe:	107f      	asrs	r7, r7, #1
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	1846      	adds	r6, r0, r1
 8005a04:	4296      	cmp	r6, r2
 8005a06:	bfde      	ittt	le
 8005a08:	1b92      	suble	r2, r2, r6
 8005a0a:	1870      	addle	r0, r6, r1
 8005a0c:	1864      	addle	r4, r4, r1
 8005a0e:	0052      	lsls	r2, r2, #1
 8005a10:	3d01      	subs	r5, #1
 8005a12:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005a16:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005a1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a1e:	d1f0      	bne.n	8005a02 <__ieee754_sqrt+0x8e>
 8005a20:	4629      	mov	r1, r5
 8005a22:	f04f 0e20 	mov.w	lr, #32
 8005a26:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005a2a:	4282      	cmp	r2, r0
 8005a2c:	eb06 0c05 	add.w	ip, r6, r5
 8005a30:	dc02      	bgt.n	8005a38 <__ieee754_sqrt+0xc4>
 8005a32:	d113      	bne.n	8005a5c <__ieee754_sqrt+0xe8>
 8005a34:	459c      	cmp	ip, r3
 8005a36:	d811      	bhi.n	8005a5c <__ieee754_sqrt+0xe8>
 8005a38:	f1bc 0f00 	cmp.w	ip, #0
 8005a3c:	eb0c 0506 	add.w	r5, ip, r6
 8005a40:	da43      	bge.n	8005aca <__ieee754_sqrt+0x156>
 8005a42:	2d00      	cmp	r5, #0
 8005a44:	db41      	blt.n	8005aca <__ieee754_sqrt+0x156>
 8005a46:	f100 0801 	add.w	r8, r0, #1
 8005a4a:	1a12      	subs	r2, r2, r0
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	459c      	cmp	ip, r3
 8005a50:	bf88      	it	hi
 8005a52:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005a56:	eba3 030c 	sub.w	r3, r3, ip
 8005a5a:	4431      	add	r1, r6
 8005a5c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8005a60:	f1be 0e01 	subs.w	lr, lr, #1
 8005a64:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8005a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a6c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005a70:	d1db      	bne.n	8005a2a <__ieee754_sqrt+0xb6>
 8005a72:	4313      	orrs	r3, r2
 8005a74:	d006      	beq.n	8005a84 <__ieee754_sqrt+0x110>
 8005a76:	1c48      	adds	r0, r1, #1
 8005a78:	bf0b      	itete	eq
 8005a7a:	4671      	moveq	r1, lr
 8005a7c:	3101      	addne	r1, #1
 8005a7e:	3401      	addeq	r4, #1
 8005a80:	f021 0101 	bicne.w	r1, r1, #1
 8005a84:	1063      	asrs	r3, r4, #1
 8005a86:	0849      	lsrs	r1, r1, #1
 8005a88:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005a8c:	07e2      	lsls	r2, r4, #31
 8005a8e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005a92:	bf48      	it	mi
 8005a94:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005a98:	460e      	mov	r6, r1
 8005a9a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8005a9e:	e782      	b.n	80059a6 <__ieee754_sqrt+0x32>
 8005aa0:	0ada      	lsrs	r2, r3, #11
 8005aa2:	3815      	subs	r0, #21
 8005aa4:	055b      	lsls	r3, r3, #21
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	d0fa      	beq.n	8005aa0 <__ieee754_sqrt+0x12c>
 8005aaa:	02d5      	lsls	r5, r2, #11
 8005aac:	d50a      	bpl.n	8005ac4 <__ieee754_sqrt+0x150>
 8005aae:	f1c1 0420 	rsb	r4, r1, #32
 8005ab2:	fa23 f404 	lsr.w	r4, r3, r4
 8005ab6:	1e4d      	subs	r5, r1, #1
 8005ab8:	408b      	lsls	r3, r1
 8005aba:	4322      	orrs	r2, r4
 8005abc:	1b41      	subs	r1, r0, r5
 8005abe:	e789      	b.n	80059d4 <__ieee754_sqrt+0x60>
 8005ac0:	4608      	mov	r0, r1
 8005ac2:	e7f0      	b.n	8005aa6 <__ieee754_sqrt+0x132>
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	3101      	adds	r1, #1
 8005ac8:	e7ef      	b.n	8005aaa <__ieee754_sqrt+0x136>
 8005aca:	4680      	mov	r8, r0
 8005acc:	e7bd      	b.n	8005a4a <__ieee754_sqrt+0xd6>
 8005ace:	bf00      	nop
 8005ad0:	7ff00000 	.word	0x7ff00000

08005ad4 <with_errno>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460d      	mov	r5, r1
 8005ada:	4616      	mov	r6, r2
 8005adc:	f7ff f93c 	bl	8004d58 <__errno>
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	6006      	str	r6, [r0, #0]
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}

08005ae8 <xflow>:
 8005ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005aea:	4615      	mov	r5, r2
 8005aec:	461c      	mov	r4, r3
 8005aee:	b180      	cbz	r0, 8005b12 <xflow+0x2a>
 8005af0:	4610      	mov	r0, r2
 8005af2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005af6:	e9cd 0100 	strd	r0, r1, [sp]
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4628      	mov	r0, r5
 8005b00:	4621      	mov	r1, r4
 8005b02:	f7fa fce1 	bl	80004c8 <__aeabi_dmul>
 8005b06:	2222      	movs	r2, #34	; 0x22
 8005b08:	b003      	add	sp, #12
 8005b0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b0e:	f7ff bfe1 	b.w	8005ad4 <with_errno>
 8005b12:	4610      	mov	r0, r2
 8005b14:	4619      	mov	r1, r3
 8005b16:	e7ee      	b.n	8005af6 <xflow+0xe>

08005b18 <__math_uflow>:
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005b1e:	f7ff bfe3 	b.w	8005ae8 <xflow>

08005b22 <__math_oflow>:
 8005b22:	2200      	movs	r2, #0
 8005b24:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8005b28:	f7ff bfde 	b.w	8005ae8 <xflow>

08005b2c <fabs>:
 8005b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b30:	4770      	bx	lr

08005b32 <finite>:
 8005b32:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8005b36:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005b3a:	0fc0      	lsrs	r0, r0, #31
 8005b3c:	4770      	bx	lr
	...

08005b40 <scalbn>:
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8005b46:	4604      	mov	r4, r0
 8005b48:	460d      	mov	r5, r1
 8005b4a:	4617      	mov	r7, r2
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	b996      	cbnz	r6, 8005b76 <scalbn+0x36>
 8005b50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b54:	4303      	orrs	r3, r0
 8005b56:	d039      	beq.n	8005bcc <scalbn+0x8c>
 8005b58:	4b33      	ldr	r3, [pc, #204]	; (8005c28 <scalbn+0xe8>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f7fa fcb4 	bl	80004c8 <__aeabi_dmul>
 8005b60:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <scalbn+0xec>)
 8005b62:	4604      	mov	r4, r0
 8005b64:	429f      	cmp	r7, r3
 8005b66:	460d      	mov	r5, r1
 8005b68:	da0f      	bge.n	8005b8a <scalbn+0x4a>
 8005b6a:	a32b      	add	r3, pc, #172	; (adr r3, 8005c18 <scalbn+0xd8>)
 8005b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b70:	f7fa fcaa 	bl	80004c8 <__aeabi_dmul>
 8005b74:	e006      	b.n	8005b84 <scalbn+0x44>
 8005b76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b7a:	4296      	cmp	r6, r2
 8005b7c:	d10a      	bne.n	8005b94 <scalbn+0x54>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	f7fa faec 	bl	800015c <__adddf3>
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	e020      	b.n	8005bcc <scalbn+0x8c>
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8005b90:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8005b94:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8005b98:	19b9      	adds	r1, r7, r6
 8005b9a:	4291      	cmp	r1, r2
 8005b9c:	dd0e      	ble.n	8005bbc <scalbn+0x7c>
 8005b9e:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8005ba2:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8005ba6:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8005baa:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8005bae:	4820      	ldr	r0, [pc, #128]	; (8005c30 <scalbn+0xf0>)
 8005bb0:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8005bb4:	a31a      	add	r3, pc, #104	; (adr r3, 8005c20 <scalbn+0xe0>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	e7d9      	b.n	8005b70 <scalbn+0x30>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	dd08      	ble.n	8005bd2 <scalbn+0x92>
 8005bc0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005bc8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005bcc:	4620      	mov	r0, r4
 8005bce:	4629      	mov	r1, r5
 8005bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd2:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8005bd6:	da12      	bge.n	8005bfe <scalbn+0xbe>
 8005bd8:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005bdc:	429f      	cmp	r7, r3
 8005bde:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8005be2:	ea4f 74c3 	mov.w	r4, r3, lsl #31
 8005be6:	dcdc      	bgt.n	8005ba2 <scalbn+0x62>
 8005be8:	a30b      	add	r3, pc, #44	; (adr r3, 8005c18 <scalbn+0xd8>)
 8005bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bee:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 8005bf2:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 8005bf6:	480f      	ldr	r0, [pc, #60]	; (8005c34 <scalbn+0xf4>)
 8005bf8:	f041 011f 	orr.w	r1, r1, #31
 8005bfc:	e7b8      	b.n	8005b70 <scalbn+0x30>
 8005bfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c02:	3136      	adds	r1, #54	; 0x36
 8005c04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c08:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8005c0c:	4620      	mov	r0, r4
 8005c0e:	4629      	mov	r1, r5
 8005c10:	2200      	movs	r2, #0
 8005c12:	4b09      	ldr	r3, [pc, #36]	; (8005c38 <scalbn+0xf8>)
 8005c14:	e7ac      	b.n	8005b70 <scalbn+0x30>
 8005c16:	bf00      	nop
 8005c18:	c2f8f359 	.word	0xc2f8f359
 8005c1c:	01a56e1f 	.word	0x01a56e1f
 8005c20:	8800759c 	.word	0x8800759c
 8005c24:	7e37e43c 	.word	0x7e37e43c
 8005c28:	43500000 	.word	0x43500000
 8005c2c:	ffff3cb0 	.word	0xffff3cb0
 8005c30:	8800759c 	.word	0x8800759c
 8005c34:	c2f8f359 	.word	0xc2f8f359
 8005c38:	3c900000 	.word	0x3c900000

08005c3c <_init>:
 8005c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c3e:	bf00      	nop
 8005c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c42:	bc08      	pop	{r3}
 8005c44:	469e      	mov	lr, r3
 8005c46:	4770      	bx	lr

08005c48 <_fini>:
 8005c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4a:	bf00      	nop
 8005c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c4e:	bc08      	pop	{r3}
 8005c50:	469e      	mov	lr, r3
 8005c52:	4770      	bx	lr
